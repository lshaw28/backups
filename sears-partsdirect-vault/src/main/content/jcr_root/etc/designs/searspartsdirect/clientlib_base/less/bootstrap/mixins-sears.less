@import "../base.variables.less";
@import "../base.mixins.less";

// # Twitter Bootstrap Mixins
// # Cleaned up to remove duplication and improve legibility
// # Clearfix
.clearfix {
	*zoom: 1;

	&:before, &:after {
		display: table;
		content: '';
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}
// # Webkit-style focus
.tab-focus() {
	outline: thin dotted #333;
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}
// # Center-align a block level element
.center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}
// # IE7 inline-block fix
.ie7-inline-block() {
	*display: inline;
	*zoom: 1;
}
// # IE7 whitespace collapse fix
.ie7-restore-left-whitespace() {
	*margin-left: .3em;

	&:first-child {
		*margin-left: 0;
	}
}
.ie7-restore-right-whitespace() {
	*margin-right: .3em;
}
// # Sizing shortcuts
.size(@height, @width) {
	width: @width;
	height: @height;
}
.square(@size) {
	.size(@size, @size);
}
// # Placeholder text
.placeholder(@color: @placeholderText) {
	&:-moz-placeholder {
		color: @color;
	}
	&:-ms-input-placeholder {
		color: @color;
	}
	&::-webkit-input-placeholder {
		color: @color;
	}
}
// # Text overflow
.text-overflow() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
// # CSS image replacement
.hide-text {
	font: 0/0 a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}
// # FONTS
#font {
	#family {
		.serif() {
			font-family: @serifFontFamily;
		}
		.sans-serif() {
			font-family: @sansFontFamily;
		}
		.monospace() {
			font-family: @monoFontFamily;
		}
	}
	.shorthand(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
		font-size: @size;
		font-weight: @weight;
		line-height: @lineHeight;
	}
	.serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
		#font > #family > .serif;
		#font > .shorthand(@size, @weight, @lineHeight);
	}
	.sans-serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
		#font > #family > .sans-serif;
		#font > .shorthand(@size, @weight, @lineHeight);
	}
	.monospace(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
		#font > #family > .monospace;
		#font > .shorthand(@size, @weight, @lineHeight);
	}
}
// # FORMS
// # Block level inputs
.input-block-level {
	display: block;
	width: 100%;
	min-height: @inputHeight;
	.box-sizing(border-box);
}
// # Mixin for form field states
.formFieldState(@textColor: #555, @borderColor: #ccc, @backgroundColor: #f5f5f5) {
	// # Set the text color
	.control-label, .help-block, .help-inline {
		color: @textColor;
	}
	// # Style inputs accordingly
	.checkbox, .radio, input, select, textarea {
		color: @textColor;
	}
	input, select, textarea {
		border-color: @borderColor;
		.box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work

		&:focus {
			border-color: darken(@borderColor, 10%);
			@shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@borderColor, 20%);
			.box-shadow(@shadow);
		}
	}
	// # Give a small background color for input-prepend/-append
	.input-prepend .add-on, .input-append .add-on {
		color: @textColor;
		background-color: @backgroundColor;
		border-color: @textColor;
	}
}
// # CSS3 PROPERTIES
// # Border Radius
.border-radius(@radius) {
	.borderRadius(@radius);
}
// # Single Corner Border Radius
.border-top-left-radius(@radius) {
	.borderTopLeftRadius(@radius);
}
.border-top-right-radius(@radius) {
	.borderTopRightRadius(@radius);
}
.border-bottom-right-radius(@radius) {
	.borderBottomRightRadius(@radius);
}
.border-bottom-left-radius(@radius) {
	.borderBottomLeftRadius(@radius);
}
// # Single Side Border Radius
.border-top-radius(@radius) {
	.borderTopRightRadius(@radius);
	.borderTopLeftRadius(@radius);
}
.border-right-radius(@radius) {
	.borderTopRightRadius(@radius);
	.borderBottomRightRadius(@radius);
}
.border-bottom-radius(@radius) {
	.borderBottomRightRadius(@radius);
	.borderBottomLeftRadius(@radius);
}
.border-left-radius(@radius) {
	.borderTopLeftRadius(@radius);
	.borderBottomLeftRadius(@radius);
}
// # Drop shadows
.box-shadow(@shadow) {
	.boxShadow(@shadow);
}
// # Transitions
.transition-delay(@transition-delay) {
	-webkit-transition-delay: @transition-delay;
	-moz-transition-delay: @transition-delay;
	-ms-transition-delay: @transition-delay;
	-o-transition-delay: @transition-delay;
	transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
	-webkit-transition-duration: @transition-duration;
	-moz-transition-duration: @transition-duration;
	-ms-transition-duration: @transition-duration;
	-o-transition-duration: @transition-duration;
	transition-duration: @transition-duration;
}
// Transformations
.rotate(@degrees) {
	-webkit-transform: rotate(@degrees);
	-moz-transform: rotate(@degrees);
	-ms-transform: rotate(@degrees);
	-o-transform: rotate(@degrees);
	transform: rotate(@degrees);
}
.scale(@ratio) {
	-webkit-transform: scale(@ratio);
	-moz-transform: scale(@ratio);
	-ms-transform: scale(@ratio);
	-o-transform: scale(@ratio);
	transform: scale(@ratio);
}
.translate(@x, @y) {
	-webkit-transform: translate(@x, @y);
	-moz-transform: translate(@x, @y);
	-ms-transform: translate(@x, @y);
	-o-transform: translate(@x, @y);
	transform: translate(@x, @y);
}
.skew(@x, @y) {
	-webkit-transform: skew(@x, @y);
	-moz-transform: skew(@x, @y);
	-ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885
	-o-transform: skew(@x, @y);
	transform: skew(@x, @y);
	-webkit-backface-visibility: hidden; // See https://github.com/twbs/bootstrap/issues/5319
}
.translate3d(@x, @y, @z) {
	-webkit-transform: translate3d(@x, @y, @z);
	-moz-transform: translate3d(@x, @y, @z);
	-ms-transform: translate3d(@x, @y, @z);
	-o-transform: translate3d(@x, @y, @z);
	transform: translate3d(@x, @y, @z);
}
// # Backface visibility
// # Prevent browsers from flickering when using CSS 3D transforms
.backface-visibility(@visibility){
	-webkit-backface-visibility: @visibility;
	-moz-backface-visibility: @visibility;
	backface-visibility: @visibility;
}
// # Background clipping
.background-clip(@clip) {
	-webkit-background-clip: @clip;
	-moz-background-clip: @clip;
	background-clip: @clip;
}
// # Background sizing
.background-size(@size) {
	.backgroundSize(@size);
}
// # Box sizing
.box-sizing(@boxmodel) {
	.boxSizing(@boxmodel);
}
// # User select
// # For selecting text on the page
.user-select(@select) {
	-webkit-user-select: @select;
	-moz-user-select: @select;
	-ms-user-select: @select;
	-o-user-select: @select;
	user-select: @select;
}
// # Resize anything
.resizable(@direction) {
	resize: @direction;
	overflow: auto;
}
// # CSS3 Content Columns
.content-columns(@columnCount, @columnGap: @gridGutterWidth) {
	-webkit-column-count: @columnCount;
	-moz-column-count: @columnCount;
	-ms-column-count: @columnCount;
	-o-column-count: @columnCount;
	column-count: @columnCount;
	-webkit-column-gap: @columnGap;
	-moz-column-gap: @columnGap;
	-ms-column-gap: @columnGap;
	-o-column-gap: @columnGap;
	column-gap: @columnGap;
}
// # Optional hyphenation
.hyphens(@mode: auto) {
	word-wrap: break-word;
	-webkit-hyphens: @mode;
	-moz-hyphens: @mode;
	-ms-hyphens: @mode;
	-o-hyphens: @mode;
	hyphens: @mode;
}
// # Opacity was replaced with our own outright
// # BACKGROUNDS
// # Add an alphatransparency value to any background or border color (via Elyse Holladay)
#translucent {
	.background(@color: @white, @alpha: 1) {
		background-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
	}
	.border(@color: @white, @alpha: 1) {
		border-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
		.background-clip(padding-box);
	}
}
// # Gradient Bar Colors for buttons and alerts
.gradientBar(@primaryColor, @secondaryColor, @textColor: #fff, @textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
	color: @textColor;
	text-shadow: @textShadow;
	#gradient > .vertical(@primaryColor, @secondaryColor);
	border-color: @secondaryColor @secondaryColor darken(@secondaryColor, 15%);
	border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fadein(rgba(0,0,0,.1), 15%);
}
// # Gradients
#gradient {
	.horizontal(@startColor: #555, @endColor: #333) {
		.horizontalGradient(@startColor, @endColor);
	}
	.vertical(@startColor: #555, @endColor: #333) {
		.verticalGradient(@startColor, @endColor);
	}
	.directional(@startColor: #555, @endColor: #333, @deg: 45deg) {
		background-color: @endColor;
		background-repeat: repeat-x;
		background-image: -moz-linear-gradient(@deg, @startColor, @endColor); // FF 3.6+
		background-image: -webkit-linear-gradient(@deg, @startColor, @endColor); // Safari 5.1+, Chrome 10+
		background-image: -o-linear-gradient(@deg, @startColor, @endColor); // Opera 11.10
		background-image: linear-gradient(@deg, @startColor, @endColor); // Standard, IE10
	}
	.horizontal-three-colors(@startColor: #00b3ee, @midColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f) {
		background-color: mix(@midColor, @endColor, 80%);
		background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from(@startColor), color-stop(@colorStop, @midColor), to(@endColor));
		background-image: -webkit-linear-gradient(left, @startColor, @midColor @colorStop, @endColor);
		background-image: -moz-linear-gradient(left, @startColor, @midColor @colorStop, @endColor);
		background-image: -o-linear-gradient(left, @startColor, @midColor @colorStop, @endColor);
		background-image: linear-gradient(to right, @startColor, @midColor @colorStop, @endColor);
		background-repeat: no-repeat;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@startColor),argb(@endColor))); // IE9 and down, gets no color-stop at all for proper fallback
	}
	.vertical-three-colors(@startColor: #00b3ee, @midColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f) {
		background-color: mix(@midColor, @endColor, 80%);
		background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), color-stop(@colorStop, @midColor), to(@endColor));
		background-image: -webkit-linear-gradient(@startColor, @midColor @colorStop, @endColor);
		background-image: -moz-linear-gradient(top, @startColor, @midColor @colorStop, @endColor);
		background-image: -o-linear-gradient(@startColor, @midColor @colorStop, @endColor);
		background-image: linear-gradient(@startColor, @midColor @colorStop, @endColor);
		background-repeat: no-repeat;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@startColor),argb(@endColor))); // IE9 and down, gets no color-stop at all for proper fallback
	}
	.radial(@innerColor: #555, @outerColor: #333) {
		background-color: @outerColor;
		background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@innerColor), to(@outerColor));
		background-image: -webkit-radial-gradient(circle, @innerColor, @outerColor);
		background-image: -moz-radial-gradient(circle, @innerColor, @outerColor);
		background-image: -o-radial-gradient(circle, @innerColor, @outerColor);
		background-repeat: no-repeat;
	}
	.striped(@color: #555, @angle: 45deg) {
		background-color: @color;
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
		background-image: -o-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
		background-image: linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
	}
}
// # Reset filters for IE
.reset-filter() {
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}
// # COMPONENT MIXINS
// # Horizontal dividers
// # Dividers (basically an hr) within dropdowns and nav lists
.nav-divider(@top: #e5e5e5, @bottom: @white) {
	*width: 100%;
	height: 1px;
	margin: ((@baseLineHeight / 2) - 1) 1px; // 8px 1px
	*margin: -5px 0 5px;
	overflow: hidden;
	background-color: @top;
	border-bottom: 1px solid @bottom;
}
// # Button backgrounds
.buttonBackground(@startColor, @endColor, @textColor: #fff, @textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
	.gradientBar(@startColor, @endColor, @textColor, @textShadow);
	*background-color: @endColor;
	.reset-filter();

	&:hover, &:focus, &:active, &.active, &.disabled, &[disabled] {
		color: @textColor;
		background-color: @endColor;
		*background-color: darken(@endColor, 5%);
	}
	&:active, &.active {
		background-color: darken(@endColor, 10%) e("\9");
	}
}
// # Navbar vertical align
// # Vertically center elements in the navbar.
.navbarVerticalAlign(@elementHeight) {
	margin-top: (@navbarHeight - @elementHeight) / 2;
}
// # Grid System
// # Centered container element
.container-fixed() {
	margin-right: auto;
	margin-left: auto;
	.clearfix();
}
// # Table columns
.tableColumns(@columnSpan: 1) {
	float: none;
	width: ((@gridColumnWidth) * @columnSpan) + (@gridGutterWidth * (@columnSpan - 1)) - 16;
	margin-left: 0;
}
// # Make a Grid
// # Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
.makeRow() {
	margin-left: @gridGutterWidth * -1;
	.clearfix();
}
.makeColumn(@columns: 1, @offset: 0) {
	float: left;
	margin-left: (@gridColumnWidth * @offset) + (@gridGutterWidth * (@offset - 1)) + (@gridGutterWidth * 2);
	width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
}
// # The Grid
#grid {
	.core (@gridColumnWidth, @gridGutterWidth) {
		.offset (@columns) {
			margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
		}
		.span (@columns) {
			width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
		}
		.row {
			margin-left: @gridGutterWidth * -1;
			.clearfix();
		}
		[class*="span"] {
			float: left;
			min-height: 1px;
			margin-left: @gridGutterWidth;
		}
		// # Set the container width, and override it for fixed navbars in media queries
		.container, .navbar-static-top .container, .navbar-fixed-top .container, .navbar-fixed-bottom .container {
			.span(@gridColumns);
		}
		.span1 {
			.span(1);
		}
		.span2 {
			.span(2);
		}
		.span3 {
			.span(3);
		}
		.span4 {
			.span(4);
		}
		.span5 {
			.span(5);
		}
		.span6 {
			.span(6);
		}
		.span7 {
			.span(7);
		}
		.span8 {
			.span(8);
		}
		.span9 {
			.span(9);
		}
		.span10 {
			.span(10);
		}
		.span11 {
			.span(11);
		}
		.span12 {
			.span(12);
		}
		.offset1 {
			.offset(1);
		}
		.offset2 {
			.offset(2);
		}
		.offset3 {
			.offset(3);
		}
		.offset4 {
			.offset(4);
		}
		.offset5 {
			.offset(5);
		}
		.offset6 {
			.offset(6);
		}
		.offset7 {
			.offset(7);
		}
		.offset8 {
			.offset(8);
		}
		.offset9 {
			.offset(9);
		}
		.offset10 {
			.offset(10);
		}
		.offset11 {
			.offset(11);
		}
		.offset12 {
			.offset(12);
		}
	}
	.fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {
		.offset (@columns) {
			margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
			*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
		}
		.offsetFirstChild (@columns) {
			margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
			*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
		}
		.span (@columns) {
			width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
			*width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
		}
		.row-fluid {
			width: 100%;
			.clearfix();

			[class*="span"] {
				.input-block-level();
				float: left;
				margin-left: @fluidGridGutterWidth;
				*margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
			}
			[class*="span"]:first-child {
				margin-left: 0;
			}
			.controls-row [class*="span"] + [class*="span"] {
				margin-left: @fluidGridGutterWidth;
			}
			.span1 {
				.span(1);
			}
			.span2 {
				.span(2);
			}
			.span3 {
				.span(3);
			}
			.span4 {
				.span(4);
			}
			.span5 {
				.span(5);
			}
			.span6 {
				.span(6);
			}
			.span7 {
				.span(7);
			}
			.span8 {
				.span(8);
			}
			.span9 {
				.span(9);
			}
			.span10 {
				.span(10);
			}
			.span11 {
				.span(11);
			}
			.span12 {
				.span(12);
			}
			.offset1 {
				.offset(1);
			}
			.offset1:first-child {
				.offsetFirstChild(1);
			}
			.offset2 {
				.offset(2);
			}
			.offset2:first-child {
				.offsetFirstChild(2);
			}
			.offset3 {
				.offset(3);
			}
			.offset3:first-child {
				.offsetFirstChild(3);
			}
			.offset4 {
				.offset(4);
			}
			.offset4:first-child {
				.offsetFirstChild(4);
			}
			.offset5 {
				.offset(5);
			}
			.offset5:first-child {
				.offsetFirstChild(5);
			}
			.offset6 {
				.offset(6);
			}
			.offset6:first-child {
				.offsetFirstChild(6);
			}
			.offset7 {
				.offset(7);
			}
			.offset7:first-child {
				.offsetFirstChild(7);
			}
			.offset8 {
				.offset(8);
			}
			.offset8:first-child {
				.offsetFirstChild(8);
			}
			.offset9 {
				.offset(9);
			}
			.offset9:first-child {
				.offsetFirstChild(9);
			}
			.offset10 {
				.offset(10);
			}
			.offset10:first-child {
				.offsetFirstChild(10);
			}
			.offset11 {
				.offset(11);
			}
			.offset11:first-child {
				.offsetFirstChild(11);
			}
			.offset12 {
				.offset(12);
			}
			.offset12:first-child {
				.offsetFirstChild(12);
			}
		}
	}
	.input(@gridColumnWidth, @gridGutterWidth) {
		.span(@columns) {
			width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 14;
		}
		input, textarea, .uneditable-input {
			margin-left: 0; // override margin-left from core grid system
		}
		.controls-row [class*="span"] + [class*="span"] {
			margin-left: @gridGutterWidth;
		}
		input.span1 {
			.span(1);
		}
		input.span2 {
			.span(2);
		}
		input.span3 {
			.span(3);
		}
		input.span4 {
			.span(4);
		}
		input.span5 {
			.span(5);
		}
		input.span6 {
			.span(6);
		}
		input.span7 {
			.span(7);
		}
		input.span8 {
			.span(8);
		}
		input.span9 {
			.span(9);
		}
		input.span10 {
			.span(10);
		}
		input.span11 {
			.span(11);
		}
		input.span12 {
			.span(12);
		}
		textarea.span1 {
			.span(1);
		}
		textarea.span2 {
			.span(2);
		}
		textarea.span3 {
			.span(3);
		}
		textarea.span4 {
			.span(4);
		}
		textarea.span5 {
			.span(5);
		}
		textarea.span6 {
			.span(6);
		}
		textarea.span7 {
			.span(7);
		}
		textarea.span8 {
			.span(8);
		}
		textarea.span9 {
			.span(9);
		}
		textarea.span10 {
			.span(10);
		}
		textarea.span11 {
			.span(11);
		}
		textarea.span12 {
			.span(12);
		}
		.uneditable-input.span1 {
			.span(1);
		}
		.uneditable-input.span2 {
			.span(2);
		}
		.uneditable-input.span3 {
			.span(3);
		}
		.uneditable-input.span4 {
			.span(4);
		}
		.uneditable-input.span5 {
			.span(5);
		}
		.uneditable-input.span6 {
			.span(6);
		}
		.uneditable-input.span7 {
			.span(7);
		}
		.uneditable-input.span8 {
			.span(8);
		}
		.uneditable-input.span9 {
			.span(9);
		}
		.uneditable-input.span10 {
			.span(10);
		}
		.uneditable-input.span11 {
			.span(11);
		}
		.uneditable-input.span12 {
			.span(12);
		}
	}
}