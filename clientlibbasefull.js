/*!
 * Bootstrap.js by @fat & @mdo
 * Copyright 2013 Twitter, Inc.
 * http://www.apache.org/licenses/LICENSE-2.0.txt
 */
!function(e){"use strict";e(function(){e.support.transition=function(){var e=function(){var e=document.createElement("bootstrap"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},n;for(n in t)if(e.style[n]!==undefined)return t[n]}();return e&&{end:e}}()})}(window.jQuery),!function(e){"use strict";var t='[data-dismiss="alert"]',n=function(n){e(n).on("click",t,this.close)};n.prototype.close=function(t){function s(){i.trigger("closed").remove()}var n=e(this),r=n.attr("data-target"),i;r||(r=n.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),i=e(r),t&&t.preventDefault(),i.length||(i=n.hasClass("alert")?n:n.parent()),i.trigger(t=e.Event("close"));if(t.isDefaultPrevented())return;i.removeClass("in"),e.support.transition&&i.hasClass("fade")?i.on(e.support.transition.end,s):s()};var r=e.fn.alert;e.fn.alert=function(t){return this.each(function(){var r=e(this),i=r.data("alert");i||r.data("alert",i=new n(this)),typeof t=="string"&&i[t].call(r)})},e.fn.alert.Constructor=n,e.fn.alert.noConflict=function(){return e.fn.alert=r,this},e(document).on("click.alert.data-api",t,n.prototype.close)}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.button.defaults,n)};t.prototype.setState=function(e){var t="disabled",n=this.$element,r=n.data(),i=n.is("input")?"val":"html";e+="Text",r.resetText||n.data("resetText",n[i]()),n[i](r[e]||this.options[e]),setTimeout(function(){e=="loadingText"?n.addClass(t).attr(t,t):n.removeClass(t).removeAttr(t)},0)},t.prototype.toggle=function(){var e=this.$element.closest('[data-toggle="buttons-radio"]');e&&e.find(".active").removeClass("active"),this.$element.toggleClass("active")};var n=e.fn.button;e.fn.button=function(n){return this.each(function(){var r=e(this),i=r.data("button"),s=typeof n=="object"&&n;i||r.data("button",i=new t(this,s)),n=="toggle"?i.toggle():n&&i.setState(n)})},e.fn.button.defaults={loadingText:"loading..."},e.fn.button.Constructor=t,e.fn.button.noConflict=function(){return e.fn.button=n,this},e(document).on("click.button.data-api","[data-toggle^=button]",function(t){var n=e(t.target);n.hasClass("btn")||(n=n.closest(".btn")),n.button("toggle")})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.options.pause=="hover"&&this.$element.on("mouseenter",e.proxy(this.pause,this)).on("mouseleave",e.proxy(this.cycle,this))};t.prototype={cycle:function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval)),this},getActiveIndex:function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},to:function(t){var n=this.getActiveIndex(),r=this;if(t>this.$items.length-1||t<0)return;return this.sliding?this.$element.one("slid",function(){r.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",e(this.$items[t]))},pause:function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&e.support.transition.end&&(this.$element.trigger(e.support.transition.end),this.cycle(!0)),clearInterval(this.interval),this.interval=null,this},next:function(){if(this.sliding)return;return this.slide("next")},prev:function(){if(this.sliding)return;return this.slide("prev")},slide:function(t,n){var r=this.$element.find(".item.active"),i=n||r[t](),s=this.interval,o=t=="next"?"left":"right",u=t=="next"?"first":"last",a=this,f;this.sliding=!0,s&&this.pause(),i=i.length?i:this.$element.find(".item")[u](),f=e.Event("slide",{relatedTarget:i[0],direction:o});if(i.hasClass("active"))return;this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid",function(){var t=e(a.$indicators.children()[a.getActiveIndex()]);t&&t.addClass("active")}));if(e.support.transition&&this.$element.hasClass("slide")){this.$element.trigger(f);if(f.isDefaultPrevented())return;i.addClass(t),i[0].offsetWidth,r.addClass(o),i.addClass(o),this.$element.one(e.support.transition.end,function(){i.removeClass([t,o].join(" ")).addClass("active"),r.removeClass(["active",o].join(" ")),a.sliding=!1,setTimeout(function(){a.$element.trigger("slid")},0)})}else{this.$element.trigger(f);if(f.isDefaultPrevented())return;r.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger("slid")}return s&&this.cycle(),this}};var n=e.fn.carousel;e.fn.carousel=function(n){return this.each(function(){var r=e(this),i=r.data("carousel"),s=e.extend({},e.fn.carousel.defaults,typeof n=="object"&&n),o=typeof n=="string"?n:s.slide;i||r.data("carousel",i=new t(this,s)),typeof n=="number"?i.to(n):o?i[o]():s.interval&&i.pause().cycle()})},e.fn.carousel.defaults={interval:5e3,pause:"hover"},e.fn.carousel.Constructor=t,e.fn.carousel.noConflict=function(){return e.fn.carousel=n,this},e(document).on("click.carousel.data-api","[data-slide], [data-slide-to]",function(t){var n=e(this),r,i=e(n.attr("data-target")||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,"")),s=e.extend({},i.data(),n.data()),o;i.carousel(s),(o=n.attr("data-slide-to"))&&i.data("carousel").pause().to(o).cycle(),t.preventDefault()})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.collapse.defaults,n),this.options.parent&&(this.$parent=e(this.options.parent)),this.options.toggle&&this.toggle()};t.prototype={constructor:t,dimension:function(){var e=this.$element.hasClass("width");return e?"width":"height"},show:function(){var t,n,r,i;if(this.transitioning||this.$element.hasClass("in"))return;t=this.dimension(),n=e.camelCase(["scroll",t].join("-")),r=this.$parent&&this.$parent.find("> .accordion-group > .in");if(r&&r.length){i=r.data("collapse");if(i&&i.transitioning)return;r.collapse("hide"),i||r.data("collapse",null)}this.$element[t](0),this.transition("addClass",e.Event("show"),"shown"),e.support.transition&&this.$element[t](this.$element[0][n])},hide:function(){var t;if(this.transitioning||!this.$element.hasClass("in"))return;t=this.dimension(),this.reset(this.$element[t]()),this.transition("removeClass",e.Event("hide"),"hidden"),this.$element[t](0)},reset:function(e){var t=this.dimension();return this.$element.removeClass("collapse")[t](e||"auto")[0].offsetWidth,this.$element[e!==null?"addClass":"removeClass"]("collapse"),this},transition:function(t,n,r){var i=this,s=function(){n.type=="show"&&i.reset(),i.transitioning=0,i.$element.trigger(r)};this.$element.trigger(n);if(n.isDefaultPrevented())return;this.transitioning=1,this.$element[t]("in"),e.support.transition&&this.$element.hasClass("collapse")?this.$element.one(e.support.transition.end,s):s()},toggle:function(){this[this.$element.hasClass("in")?"hide":"show"]()}};var n=e.fn.collapse;e.fn.collapse=function(n){return this.each(function(){var r=e(this),i=r.data("collapse"),s=e.extend({},e.fn.collapse.defaults,r.data(),typeof n=="object"&&n);i||r.data("collapse",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.collapse.defaults={toggle:!0},e.fn.collapse.Constructor=t,e.fn.collapse.noConflict=function(){return e.fn.collapse=n,this},e(document).on("click.collapse.data-api","[data-toggle=collapse]",function(t){var n=e(this),r,i=n.attr("data-target")||t.preventDefault()||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""),s=e(i).data("collapse")?"toggle":n.data();n[e(i).hasClass("in")?"addClass":"removeClass"]("collapsed"),e(i).collapse(s)})}(window.jQuery),!function(e){"use strict";function r(){e(".dropdown-backdrop").remove(),e(t).each(function(){i(e(this)).removeClass("open")})}function i(t){var n=t.attr("data-target"),r;n||(n=t.attr("href"),n=n&&/#/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,"")),r=n&&e(n);if(!r||!r.length)r=t.parent();return r}var t="[data-toggle=dropdown]",n=function(t){var n=e(t).on("click.dropdown.data-api",this.toggle);e("html").on("click.dropdown.data-api",function(){n.parent().removeClass("open")})};n.prototype={constructor:n,toggle:function(t){var n=e(this),s,o;if(n.is(".disabled, :disabled"))return;return s=i(n),o=s.hasClass("open"),r(),o||("ontouchstart"in document.documentElement&&e('<div class="dropdown-backdrop"/>').insertBefore(e(this)).on("click",r),s.toggleClass("open")),n.focus(),!1},keydown:function(n){var r,s,o,u,a,f;if(!/(38|40|27)/.test(n.keyCode))return;r=e(this),n.preventDefault(),n.stopPropagation();if(r.is(".disabled, :disabled"))return;u=i(r),a=u.hasClass("open");if(!a||a&&n.keyCode==27)return n.which==27&&u.find(t).focus(),r.click();s=e("[role=menu] li:not(.divider):visible a",u);if(!s.length)return;f=s.index(s.filter(":focus")),n.keyCode==38&&f>0&&f--,n.keyCode==40&&f<s.length-1&&f++,~f||(f=0),s.eq(f).focus()}};var s=e.fn.dropdown;e.fn.dropdown=function(t){return this.each(function(){var r=e(this),i=r.data("dropdown");i||r.data("dropdown",i=new n(this)),typeof t=="string"&&i[t].call(r)})},e.fn.dropdown.Constructor=n,e.fn.dropdown.noConflict=function(){return e.fn.dropdown=s,this},e(document).on("click.dropdown.data-api",r).on("click.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.dropdown.data-api",t,n.prototype.toggle).on("keydown.dropdown.data-api",t+", [role=menu]",n.prototype.keydown)}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.options=n,this.$element=e(t).delegate('[data-dismiss="modal"]',"click.dismiss.modal",e.proxy(this.hide,this)),this.options.remote&&this.$element.find(".modal-body").load(this.options.remote)};t.prototype={constructor:t,toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var t=this,n=e.Event("show");this.$element.trigger(n);if(this.isShown||n.isDefaultPrevented())return;this.isShown=!0,this.escape(),this.backdrop(function(){var n=e.support.transition&&t.$element.hasClass("fade");t.$element.parent().length||t.$element.appendTo(document.body),t.$element.show(),n&&t.$element[0].offsetWidth,t.$element.addClass("in").attr("aria-hidden",!1),t.enforceFocus(),n?t.$element.one(e.support.transition.end,function(){t.$element.focus().trigger("shown")}):t.$element.focus().trigger("shown")})},hide:function(t){t&&t.preventDefault();var n=this;t=e.Event("hide"),this.$element.trigger(t);if(!this.isShown||t.isDefaultPrevented())return;this.isShown=!1,this.escape(),e(document).off("focusin.modal"),this.$element.removeClass("in").attr("aria-hidden",!0),e.support.transition&&this.$element.hasClass("fade")?this.hideWithTransition():this.hideModal()},enforceFocus:function(){var t=this;e(document).on("focusin.modal",function(e){t.$element[0]!==e.target&&!t.$element.has(e.target).length&&t.$element.focus()})},escape:function(){var e=this;this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.modal",function(t){t.which==27&&e.hide()}):this.isShown||this.$element.off("keyup.dismiss.modal")},hideWithTransition:function(){var t=this,n=setTimeout(function(){t.$element.off(e.support.transition.end),t.hideModal()},500);this.$element.one(e.support.transition.end,function(){clearTimeout(n),t.hideModal()})},hideModal:function(){var e=this;this.$element.hide(),this.backdrop(function(){e.removeBackdrop(),e.$element.trigger("hidden")})},removeBackdrop:function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},backdrop:function(t){var n=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=e.support.transition&&r;this.$backdrop=e('<div class="modal-backdrop '+r+'" />').appendTo(document.body),this.$backdrop.click(this.options.backdrop=="static"?e.proxy(this.$element[0].focus,this.$element[0]):e.proxy(this.hide,this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in");if(!t)return;i?this.$backdrop.one(e.support.transition.end,t):t()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(e.support.transition.end,t):t()):t&&t()}};var n=e.fn.modal;e.fn.modal=function(n){return this.each(function(){var r=e(this),i=r.data("modal"),s=e.extend({},e.fn.modal.defaults,r.data(),typeof n=="object"&&n);i||r.data("modal",i=new t(this,s)),typeof n=="string"?i[n]():s.show&&i.show()})},e.fn.modal.defaults={backdrop:!0,keyboard:!0,show:!0},e.fn.modal.Constructor=t,e.fn.modal.noConflict=function(){return e.fn.modal=n,this},e(document).on("click.modal.data-api",'[data-toggle="modal"]',function(t){var n=e(this),r=n.attr("href"),i=e(n.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),s=i.data("modal")?"toggle":e.extend({remote:!/#/.test(r)&&r},i.data(),n.data());t.preventDefault(),i.modal(s).one("hide",function(){n.focus()})})}(window.jQuery),!function(e){"use strict";var t=function(e,t){this.init("tooltip",e,t)};t.prototype={constructor:t,init:function(t,n,r){var i,s,o,u,a;this.type=t,this.$element=e(n),this.options=this.getOptions(r),this.enabled=!0,o=this.options.trigger.split(" ");for(a=o.length;a--;)u=o[a],u=="click"?this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this)):u!="manual"&&(i=u=="hover"?"mouseenter":"focus",s=u=="hover"?"mouseleave":"blur",this.$element.on(i+"."+this.type,this.options.selector,e.proxy(this.enter,this)),this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.leave,this)));this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(t){return t=e.extend({},e.fn[this.type].defaults,this.$element.data(),t),t.delay&&typeof t.delay=="number"&&(t.delay={show:t.delay,hide:t.delay}),t},enter:function(t){var n=e.fn[this.type].defaults,r={},i;this._options&&e.each(this._options,function(e,t){n[e]!=t&&(r[e]=t)},this),i=e(t.currentTarget)[this.type](r).data(this.type);if(!i.options.delay||!i.options.delay.show)return i.show();clearTimeout(this.timeout),i.hoverState="in",this.timeout=setTimeout(function(){i.hoverState=="in"&&i.show()},i.options.delay.show)},leave:function(t){var n=e(t.currentTarget)[this.type](this._options).data(this.type);this.timeout&&clearTimeout(this.timeout);if(!n.options.delay||!n.options.delay.hide)return n.hide();n.hoverState="out",this.timeout=setTimeout(function(){n.hoverState=="out"&&n.hide()},n.options.delay.hide)},show:function(){var t,n,r,i,s,o,u=e.Event("show");if(this.hasContent()&&this.enabled){this.$element.trigger(u);if(u.isDefaultPrevented())return;t=this.tip(),this.setContent(),this.options.animation&&t.addClass("fade"),s=typeof this.options.placement=="function"?this.options.placement.call(this,t[0],this.$element[0]):this.options.placement,t.detach().css({top:0,left:0,display:"block"}),this.options.container?t.appendTo(this.options.container):t.insertAfter(this.$element),n=this.getPosition(),r=t[0].offsetWidth,i=t[0].offsetHeight;switch(s){case"bottom":o={top:n.top+n.height,left:n.left+n.width/2-r/2};break;case"top":o={top:n.top-i,left:n.left+n.width/2-r/2};break;case"left":o={top:n.top+n.height/2-i/2,left:n.left-r};break;case"right":o={top:n.top+n.height/2-i/2,left:n.left+n.width}}this.applyPlacement(o,s),this.$element.trigger("shown")}},applyPlacement:function(e,t){var n=this.tip(),r=n[0].offsetWidth,i=n[0].offsetHeight,s,o,u,a;n.offset(e).addClass(t).addClass("in"),s=n[0].offsetWidth,o=n[0].offsetHeight,t=="top"&&o!=i&&(e.top=e.top+i-o,a=!0),t=="bottom"||t=="top"?(u=0,e.left<0&&(u=e.left*-2,e.left=0,n.offset(e),s=n[0].offsetWidth,o=n[0].offsetHeight),this.replaceArrow(u-r+s,s,"left")):this.replaceArrow(o-i,o,"top"),a&&n.offset(e)},replaceArrow:function(e,t,n){this.arrow().css(n,e?50*(1-e/t)+"%":"")},setContent:function(){var e=this.tip(),t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t),e.removeClass("fade in top bottom left right")},hide:function(){function i(){var t=setTimeout(function(){n.off(e.support.transition.end).detach()},500);n.one(e.support.transition.end,function(){clearTimeout(t),n.detach()})}var t=this,n=this.tip(),r=e.Event("hide");this.$element.trigger(r);if(r.isDefaultPrevented())return;return n.removeClass("in"),e.support.transition&&this.$tip.hasClass("fade")?i():n.detach(),this.$element.trigger("hidden"),this},fixTitle:function(){var e=this.$element;(e.attr("title")||typeof e.attr("data-original-title")!="string")&&e.attr("data-original-title",e.attr("title")||"").attr("title","")},hasContent:function(){return this.getTitle()},getPosition:function(){var t=this.$element[0];return e.extend({},typeof t.getBoundingClientRect=="function"?t.getBoundingClientRect():{width:t.offsetWidth,height:t.offsetHeight},this.$element.offset())},getTitle:function(){var e,t=this.$element,n=this.options;return e=t.attr("data-original-title")||(typeof n.title=="function"?n.title.call(t[0]):n.title),e},tip:function(){return this.$tip=this.$tip||e(this.options.template)},arrow:function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(t){var n=t?e(t.currentTarget)[this.type](this._options).data(this.type):this;n.tip().hasClass("in")?n.hide():n.show()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}};var n=e.fn.tooltip;e.fn.tooltip=function(n){return this.each(function(){var r=e(this),i=r.data("tooltip"),s=typeof n=="object"&&n;i||r.data("tooltip",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.tooltip.Constructor=t,e.fn.tooltip.defaults={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},e.fn.tooltip.noConflict=function(){return e.fn.tooltip=n,this}}(window.jQuery),!function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype,{constructor:t,setContent:function(){var e=this.tip(),t=this.getTitle(),n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t),e.find(".popover-content")[this.options.html?"html":"text"](n),e.removeClass("fade top bottom left right in")},hasContent:function(){return this.getTitle()||this.getContent()},getContent:function(){var e,t=this.$element,n=this.options;return e=(typeof n.content=="function"?n.content.call(t[0]):n.content)||t.attr("data-content"),e},tip:function(){return this.$tip||(this.$tip=e(this.options.template)),this.$tip},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}});var n=e.fn.popover;e.fn.popover=function(n){return this.each(function(){var r=e(this),i=r.data("popover"),s=typeof n=="object"&&n;i||r.data("popover",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.popover.Constructor=t,e.fn.popover.defaults=e.extend({},e.fn.tooltip.defaults,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),e.fn.popover.noConflict=function(){return e.fn.popover=n,this}}(window.jQuery),!function(e){"use strict";function t(t,n){var r=e.proxy(this.process,this),i=e(t).is("body")?e(window):e(t),s;this.options=e.extend({},e.fn.scrollspy.defaults,n),this.$scrollElement=i.on("scroll.scroll-spy.data-api",r),this.selector=(this.options.target||(s=e(t).attr("href"))&&s.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.$body=e("body"),this.refresh(),this.process()}t.prototype={constructor:t,refresh:function(){var t=this,n;this.offsets=e([]),this.targets=e([]),n=this.$body.find(this.selector).map(function(){var n=e(this),r=n.data("target")||n.attr("href"),i=/^#\w/.test(r)&&e(r);return i&&i.length&&[[i.position().top+(!e.isWindow(t.$scrollElement.get(0))&&t.$scrollElement.scrollTop()),r]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},process:function(){var e=this.$scrollElement.scrollTop()+this.options.offset,t=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,n=t-this.$scrollElement.height(),r=this.offsets,i=this.targets,s=this.activeTarget,o;if(e>=n)return s!=(o=i.last()[0])&&this.activate(o);for(o=r.length;o--;)s!=i[o]&&e>=r[o]&&(!r[o+1]||e<=r[o+1])&&this.activate(i[o])},activate:function(t){var n,r;this.activeTarget=t,e(this.selector).parent(".active").removeClass("active"),r=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',n=e(r).parent("li").addClass("active"),n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate")}};var n=e.fn.scrollspy;e.fn.scrollspy=function(n){return this.each(function(){var r=e(this),i=r.data("scrollspy"),s=typeof n=="object"&&n;i||r.data("scrollspy",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.scrollspy.Constructor=t,e.fn.scrollspy.defaults={offset:10},e.fn.scrollspy.noConflict=function(){return e.fn.scrollspy=n,this},e(window).on("load",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);t.scrollspy(t.data())})})}(window.jQuery),!function(e){"use strict";var t=function(t){this.element=e(t)};t.prototype={constructor:t,show:function(){var t=this.element,n=t.closest("ul:not(.dropdown-menu)"),r=t.attr("data-target"),i,s,o;r||(r=t.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));if(t.parent("li").hasClass("active"))return;i=n.find(".active:last a")[0],o=e.Event("show",{relatedTarget:i}),t.trigger(o);if(o.isDefaultPrevented())return;s=e(r),this.activate(t.parent("li"),n),this.activate(s,s.parent(),function(){t.trigger({type:"shown",relatedTarget:i})})},activate:function(t,n,r){function o(){i.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),t.addClass("active"),s?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu")&&t.closest("li.dropdown").addClass("active"),r&&r()}var i=n.find("> .active"),s=r&&e.support.transition&&i.hasClass("fade");s?i.one(e.support.transition.end,o):o(),i.removeClass("in")}};var n=e.fn.tab;e.fn.tab=function(n){return this.each(function(){var r=e(this),i=r.data("tab");i||r.data("tab",i=new t(this)),typeof n=="string"&&i[n]()})},e.fn.tab.Constructor=t,e.fn.tab.noConflict=function(){return e.fn.tab=n,this},e(document).on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(t){t.preventDefault(),e(this).tab("show")})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.typeahead.defaults,n),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.highlighter=this.options.highlighter||this.highlighter,this.updater=this.options.updater||this.updater,this.source=this.options.source,this.$menu=e(this.options.menu),this.shown=!1,this.listen()};t.prototype={constructor:t,select:function(){var e=this.$menu.find(".active").attr("data-value");return this.$element.val(this.updater(e)).change(),this.hide()},updater:function(e){return e},show:function(){var t=e.extend({},this.$element.position(),{height:this.$element[0].offsetHeight});return this.$menu.insertAfter(this.$element).css({top:t.top+t.height,left:t.left}).show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(t){var n;return this.query=this.$element.val(),!this.query||this.query.length<this.options.minLength?this.shown?this.hide():this:(n=e.isFunction(this.source)?this.source(this.query,e.proxy(this.process,this)):this.source,n?this.process(n):this)},process:function(t){var n=this;return t=e.grep(t,function(e){return n.matcher(e)}),t=this.sorter(t),t.length?this.render(t.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(e){return~e.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(e){var t=[],n=[],r=[],i;while(i=e.shift())i.toLowerCase().indexOf(this.query.toLowerCase())?~i.indexOf(this.query)?n.push(i):r.push(i):t.push(i);return t.concat(n,r)},highlighter:function(e){var t=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return e.replace(new RegExp("("+t+")","ig"),function(e,t){return"<strong>"+t+"</strong>"})},render:function(t){var n=this;return t=e(t).map(function(t,r){return t=e(n.options.item).attr("data-value",r),t.find("a").html(n.highlighter(r)),t[0]}),t.first().addClass("active"),this.$menu.html(t),this},next:function(t){var n=this.$menu.find(".active").removeClass("active"),r=n.next();r.length||(r=e(this.$menu.find("li")[0])),r.addClass("active")},prev:function(e){var t=this.$menu.find(".active").removeClass("active"),n=t.prev();n.length||(n=this.$menu.find("li").last()),n.addClass("active")},listen:function(){this.$element.on("focus",e.proxy(this.focus,this)).on("blur",e.proxy(this.blur,this)).on("keypress",e.proxy(this.keypress,this)).on("keyup",e.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",e.proxy(this.keydown,this)),this.$menu.on("click",e.proxy(this.click,this)).on("mouseenter","li",e.proxy(this.mouseenter,this)).on("mouseleave","li",e.proxy(this.mouseleave,this))},eventSupported:function(e){var t=e in this.$element;return t||(this.$element.setAttribute(e,"return;"),t=typeof this.$element[e]=="function"),t},move:function(e){if(!this.shown)return;switch(e.keyCode){case 9:case 13:case 27:e.preventDefault();break;case 38:e.preventDefault(),this.prev();break;case 40:e.preventDefault(),this.next()}e.stopPropagation()},keydown:function(t){this.suppressKeyPressRepeat=~e.inArray(t.keyCode,[40,38,9,13,27]),this.move(t)},keypress:function(e){if(this.suppressKeyPressRepeat)return;this.move(e)},keyup:function(e){switch(e.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}e.stopPropagation(),e.preventDefault()},focus:function(e){this.focused=!0},blur:function(e){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(e){e.stopPropagation(),e.preventDefault(),this.select(),this.$element.focus()},mouseenter:function(t){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),e(t.currentTarget).addClass("active")},mouseleave:function(e){this.mousedover=!1,!this.focused&&this.shown&&this.hide()}};var n=e.fn.typeahead;e.fn.typeahead=function(n){return this.each(function(){var r=e(this),i=r.data("typeahead"),s=typeof n=="object"&&n;i||r.data("typeahead",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1},e.fn.typeahead.Constructor=t,e.fn.typeahead.noConflict=function(){return e.fn.typeahead=n,this},e(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(t){var n=e(this);if(n.data("typeahead"))return;n.typeahead(n.data())})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.options=e.extend({},e.fn.affix.defaults,n),this.$window=e(window).on("scroll.affix.data-api",e.proxy(this.checkPosition,this)).on("click.affix.data-api",e.proxy(function(){setTimeout(e.proxy(this.checkPosition,this),1)},this)),this.$element=e(t),this.checkPosition()};t.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var t=e(document).height(),n=this.$window.scrollTop(),r=this.$element.offset(),i=this.options.offset,s=i.bottom,o=i.top,u="affix affix-top affix-bottom",a;typeof i!="object"&&(s=o=i),typeof o=="function"&&(o=i.top()),typeof s=="function"&&(s=i.bottom()),a=this.unpin!=null&&n+this.unpin<=r.top?!1:s!=null&&r.top+this.$element.height()>=t-s?"bottom":o!=null&&n<=o?"top":!1;if(this.affixed===a)return;this.affixed=a,this.unpin=a=="bottom"?r.top-n:null,this.$element.removeClass(u).addClass("affix"+(a?"-"+a:""))};var n=e.fn.affix;e.fn.affix=function(n){return this.each(function(){var r=e(this),i=r.data("affix"),s=typeof n=="object"&&n;i||r.data("affix",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.affix.Constructor=t,e.fn.affix.defaults={offset:0},e.fn.affix.noConflict=function(){return e.fn.affix=n,this},e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this),n=t.data();n.offset=n.offset||{},n.offsetBottom&&(n.offset.bottom=n.offsetBottom),n.offsetTop&&(n.offset.top=n.offsetTop),t.affix(n)})})}(window.jQuery);
var regula={configure:function(){},bind:function(){},unbind:function(){},custom:function(){},compound:function(){},override:function(){},validate:function(){},Constraint:{},Group:{},DateFormat:{}},regula=function(){function G(){i={Default:{}}}function t(a,b){var c=H.validateEmptyFields;"undefined"!==typeof b.ignoreEmpty&&(c=!b.ignoreEmpty);return!(N.call(a)&&!c)}function O(){var a=!1;if("radio"===this.type.toLowerCase()&&""!==this.name.replace(/\s/g,""))for(var b=I(document.body,"input","name",this.name),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  c=0;c<b.length&&!a;)a=b[c].checked,c++;else a=this.checked;return a}function P(){return""!=this.value.replace(/\s/g,"")}function N(){return""===this.value.replace(/\s/g,"")}function Q(){var a=!0;if(this.tagName)if("select"===this.tagName.toLowerCase())a=0<this.selectedIndex;else if("checkbox"===this.type.toLowerCase()||"radio"===this.type.toLowerCase())a=O.call(this);else if("input"===this.tagName.toLowerCase()||"textarea"===this.tagName.toLowerCase())"button"!=this.type.toLowerCase()&&(a=P.call(this));
    return a}function R(a){var b={YMD:{Year:0,Month:1,Day:2},MDY:{Month:0,Day:1,Year:2},DMY:{Day:0,Month:1,Year:2}}[a.format],c=a.separator;"undefined"===typeof a.separator&&(c=/\//.test(this.value)?"/":/\./.test(this.value)?".":/ /.test(this.value)?" ":/[^0-9]+/);var d=this.value.split(c),e=new Date(d[b.Year],d[b.Month]-1,d[b.Day]),d=new Date;"undefined"!==typeof a.date&&(d=a.date.split(c),d=new Date(d[b.Year],d[b.Month]-1,d[b.Day]));return{dateToValidate:e,dateToTestAgainst:d}}function da(a,b,c){for(var d=
    c.composingConstraints,e=[],f=0;f<d.length;f++){var k=d[f],w=q[k.constraintType],j={},i;for(i in k.params)k.params.hasOwnProperty(i)&&"__size__"!=i&&x(j,i,k.params[i]);if(0<c.params.length)for(i in a)a.hasOwnProperty(i)&&"__size__"!=i&&x(j,i,a[i]);var m=S(b,this.id,w,j);m.constraintPassed||(j=T(this.id,w,j),k={group:b,constraintName:w,custom:h[w].custom,compound:h[w].compound,constraintParameters:k.params,failingElements:m.failingElements,message:j},c.reportAsSingleViolation||(k.composingConstraintViolations=
    m.composingConstraintViolations||[]),e.push(k))}return e}function D(a,b,c){var d={successful:!0,message:"",data:null};"form"==a.tagName.toLowerCase()&&!h[b].formSpecific?d={successful:!1,message:m(a,b,"@"+b+" is not a form constraint, but you are trying to bind it to a form"),data:null}:"form"!=a.tagName.toLowerCase()&&h[b].formSpecific?d={successful:!1,message:m(a,b,"@"+b+" is a form constraint, but you are trying to bind it to a non-form element"),data:null}:("undefined"===typeof a.type||"checkbox"!=
    a.type.toLowerCase()&&"radio"!=a.type.toLowerCase())&&"Checked"==b?d={successful:!1,message:m(a,b,"@"+b+" is only applicable to checkboxes and radio buttons. You are trying to bind it to an input element that is neither a checkbox nor a radio button."),data:null}:"select"!=a.tagName.toLowerCase()&&"Selected"==b?d={successful:!1,message:m(a,b,"@"+b+" is only applicable to select boxes. You are trying to bind it to an input element that is not a select box."),data:null}:(a=U(a,h[b],c),a.error?d={successful:!1,
    message:a.message,data:null}:d.data=c);return d}function U(a,b,c){var d={error:!1,message:""};c.__size__<b.params.length&&(d={error:!0,message:m(a,q[b.constraintType],"@"+q[b.constraintType]+" expects at least "+b.params.length+" parameter(s). However, you have provided only "+c.__size__),data:null});for(var e=[],f=0;f<b.params.length;f++){var k=b.params[f];"undefined"===typeof c[k]&&e.push(k)}0<e.length&&(d={error:!0,message:m(a,q[b.constraintType],"You seem to have provided some optional or required parameters for @"+
    q[b.constraintType]+", but you are still missing the following "+e.length+" required parameter(s): "+J(e,", ")),data:null});return d}function V(a,b,c){var d="",e=RegExp("^"+u[v.Default]+"$|^"+u[v.Default]+",|,"+u[v.Default]+",|,"+u[v.Default]+"$");c.groups||x(c,"groups",u[v.Default]);d=c.groups.replace(/\s/g,"");e.test(d)||(d=u[v.Default]+","+d,c.groups=d);d=d.split(/,/);for(e=0;e<d.length;e++){var f=d[e];if(!i[f]){var k=-1,k=0<K.length?K.pop():ea++;v[f]=k;u[k]=f;i[f]={}}i[f][a.id]||(i[f][a.id]={});
    i[f][a.id][b]=c}}function L(a,b){for(var c=!1,d=0;!c&&d<a.length;)c=b==a[d],d++;return c}function J(a,b){for(var c="",d=0;d<a.length;d++)c+=a[d]+b;return c.replace(RegExp(b+"$"),"")}function x(a,b,c){a.__size__||(a.__size__=0);a[b]||a.__size__++;a[b]=c}function W(a){for(var b in a)if(a.hasOwnProperty(b))return!1;return!0}function r(a){var b="Function received: {",c;for(c in a)a.hasOwnProperty(c)&&("string"==typeof a[c]?b+=c+": "+a[c]+", ":a[c]instanceof Array&&(b+=c+": ["+J(a[c],", ")+"], "));return b=
    b.replace(/, $/,"")+"}"}function m(a,b,c){var d="";null!=a?(d=a.id,d=""==b||null==b||void 0==b?d+": ":d+("."+b+": ")):""!=b&&(null!=b&&void 0!=b)&&(d="@"+b+": ");return d+c}function M(a,b){if(W(i[b][a])&&(delete i[b][a],W(i[b]))){delete i[b];var c=v[b];delete v[b];delete u[c];K.push(c)}}function fa(a,b){function c(a){return a?a.replace(/^\s+/,"").replace(/\s+$/,""):""}function d(b){var c={successful:!0,message:"",data:null};if(!/[A-Za-z_]/.test(b)||"undefined"===typeof b||null==b)c={successful:!1,
    message:m(a,l,"Invalid starting character"),data:null};return c}function e(b){var c={successful:!0,message:"",data:null};/[0-9A-Za-z_]/.test(b)||(c={successful:!1,message:m(a,l,"Invalid character in identifier. Can only include 0-9, A-Z, a-z, and _")+" "+c.message,data:null});return c}function f(b){var f,i=c(b.shift());0==i.length&&(i=b.shift());f={successful:!1,message:m(a,l,"Invalid starting character for parameter name. Can only include A-Z, a-z, and _"),data:null};if("undefined"!==typeof i)if(f=
    d(i.charAt(0)),f.successful){for(var g=1;g<i.length&&f.successful;)f=e(i.charAt(g)),g++;f.successful&&(f.data=i)}else f={successful:!1,message:m(a,l,"Invalid starting character for parameter name. Can only include A-Z, a-z, and _")+" "+f.message,data:null};if(f.successful)if(i=f.data,g=b.shift(),"="==g){0==c(b[0]).length&&b.shift();g={successful:!0,message:"",data:[]};if(")"==b[0])g={successful:!1,message:m(a,l,"Parameter value expected")+" "+g.message,data:null};else if(f=b.shift(),g={successful:!0,
    message:"",data:null},"-"==f?(g=k(b),g.successful&&(g.data=f+g.data)):(b.unshift(f),g={successful:!1,message:m(a,l,"Not a negative number"),data:null}),f=g,f.successful||(f=k(b),f.successful||(f={successful:!1,message:m(a,l,"Parameter value is not a number")+" "+f.message,data:null})),g=f,f=g.message,!g.successful){var g=b.shift(),h="",w={successful:!0,message:"",data:null};if('"'==g){for(var j=!1;0<b.length&&w.successful&&!j;)'"'==b[0]?(j=!0,b.shift()):(w=q(b),h+=w.data);j||(w={successful:!1,message:m(a,
    l,"Unterminated string literal"),data:null})}else b.unshift(g),w={successful:!1,message:m(a,l,"Invalid quoted string"),data:null};w.successful=w.successful&&j;w.data=h;g=w;g.message=g.message+" "+f;f=g.message;if(!g.successful){j="";g=b.shift();h={successful:!0,message:"",data:null};if("/"==g){for(var j=g,n=!1;0<b.length&&h.successful&&!n;)"/"==b[0]?(j+=b.shift(),n=!0):(h=q(b),j+=h.data);n||(h={successful:!1,message:m(a,l,"Unterminated regex literal"),data:null})}else b.unshift(g),h={successful:!1,
    message:m(a,l,"Not a regular expression"),data:null};h.successful=h.successful&&n;h.data=j;g=h;g.message=g.message+" "+f;f=g.message;if(!g.successful&&(n=b.shift(),j={successful:!0,message:"",data:null},"true"==c(n)||"false"==c(n)?j={successful:!0,message:"",data:"true"===n}:(b.unshift(n),j={successful:!1,message:m(a,l,"Not a boolean"),data:null}),g=j,g.message=g.message+" "+f,f=g.message,!g.successful)){j="";j=b.shift();n={successful:!0,message:"",data:null};if("["==j)if(0==c(b[0]).length&&b.shift(),
    n="]"==b[0]?{successful:!0,message:"",data:""}:u(b),n.successful){j=n.data;for(0==c(b[0]).length&&b.shift();0<b.length&&","==b[0]&&n.successful;)b.shift(),n=u(b),j+=","+n.data,0==c(b[0]).length&&b.shift();n.data=j;j=b.shift();0==c(j).length&&b.shift();"]"!=j&&(n={successful:!1,message:m(a,l,"Cannot find matching closing ] in group definition")+" "+n.message,data:null})}else n={successful:!1,message:m(a,l,"Invalid group definition")+" "+n.message,data:null};else b.unshift(j),n={successful:!1,message:m(a,
    l,"Not a valid group definition"),data:null};g=n;g.message=g.message+" "+f;f=g.message;g.successful||(g={successful:!1,message:m(a,l,"Parameter value must be a number, quoted string, regular expression, or a boolean")+" "+f,data:null})}}}f=g;f.successful?f.data={name:i,value:f.data}:f={successful:!1,message:m(a,l,"Invalid parameter value")+" "+f.message,data:null}}else b.unshift(g),f={successful:!1,message:m(a,l,"'=' expected after parameter name "+f.message),data:null};else f={successful:!1,message:m(a,
    l,"Invalid parameter name. You might have unmatched parentheses")+" "+f.message,data:null};return f}function k(b){var c=null;if("."!=b[0]){if(c=j(b),"."==b[0]){var d=c.data,c=i(b);c.successful&&(c.data=d+c.data)}}else c=i(b);c.successful||(c={successful:!1,message:m(a,l,"Not a positive number")+" "+c.message,data:null});return c}function i(b){var c=b.shift(),b=j(b);b.successful?b.data=c+b.data:b={successful:!1,message:m(a,l,"Not a valid fraction"),data:null};return b}function j(b){var d=c(b.shift()),
    e=o(d.charAt(0));if(e.successful){for(b=1;b<d.length&&e.successful;)e=o(d.charAt(b)),b++;e.successful&&(e.data=d)}else b.unshift(d),e={successful:!1,message:m(a,l,"Not a valid integer")+" "+e.message,data:[]};return e}function o(b){var c={successful:!0,message:"",data:null};/[0-9]/.test(b)||(c={successful:!1,message:m(a,l,"Not a valid digit"),data:null});return c}function q(a){var b="",c=a.shift();"\\"==c&&(b=a.shift());return{successful:!0,message:"",data:c+b}}function u(b){var f={successful:!0,
    message:"",data:""},g=c(b.shift());0==g.length&&(g=b.shift());f=d(g.charAt(0));if(f.successful){for(b=1;b<g.length&&f.successful;)f=e(g.charAt(b)),b++;f.successful&&(f.data=g)}else f={successful:!1,message:m(a,l,"Invalid starting character for group name. Can only include A-Z, a-z, and _")+" "+f.message,data:null};return f}for(var l="",n=c(b.replace(/\s*\n\s*/g,"")),p='@()[]=,"\\/-\\.'.split(""),r=[],s=0,g=0;g<n.length;g++)L(p,n.charAt(g))&&(s=n.substring(s,g),0==s.length||r.push(s),r.push(n.charAt(g)),
    s=g+1);s<n.length&&(s=n.substring(s,n.length),0==s.length||r.push(s));for(n={successful:!0,message:"",data:null};0<r.length&&n.successful;){n=r;p={successful:!0,message:"",data:null};g=n.shift();0==c(g).length&&(g=n.shift());if("@"==g){p={Between:"Range",Matches:"Pattern",Empty:"Blank",NotEmpty:"NotBlank",IsAlpha:"Alpha",IsNumeric:"Integer",IsAlphaNumeric:"AlphaNumeric"};g=c(n.shift());s=d(g.charAt(0));if(s.successful){for(var v=1;v<g.length&&s.successful;)s=e(g.charAt(v)),v++;s.successful&&(s.data=
    g)}else s={successful:!1,message:m(a,l,"Invalid starting character for constraint name. Can only include A-Z, a-z, and _")+" "+s.message,data:null};g=s;if(g.successful)if(l=g.data,l=p[l]?p[l]:l,h[l]){p={successful:!0,message:"",data:{}};if("("==n[0])if(n.shift(),g={},")"==n[0])n.shift();else if(p=f(n),p.successful){x(g,p.data.name,p.data.value);for(0==c(n[0]).length&&n.shift();0<n.length&&","==n[0]&&p.successful;)n.shift(),p=f(n),p.successful&&(x(g,p.data.name,p.data.value),0==c(n[0]).length&&n.shift());
    p.successful&&(s=n.shift(),0==c(s).length&&(s=n.shift()),")"!=s?p={successful:!1,message:m(a,l,"Cannot find matching closing ) in parameter list")+" "+p.message,data:null}:p.data=g)}else p={successful:!1,message:m(a,l,"Invalid parameter definition")+" "+p.message,data:null};else void 0!==n[0]&&"@"!=n[0]&&(p={successful:!1,message:m(a,l,"Unexpected character '"+n[0]+"' after constraint definition")+" "+p.message,data:null});g=p;g.successful&&(g=D(a,l,g.data),g.successful&&V(a,l,g.data))}else g={successful:!1,
    message:m(a,l,"I cannot find the specified constraint name. If this is a custom constraint, you need to define it before you bind to it")+" "+g.message,data:null};else g={successful:!1,message:m(a,l,"Invalid constraint name in constraint definition")+" "+g.message,data:null};p=g}else p={successful:!1,message:m(a,l,"Invalid constraint. Constraint definitions need to start with '@'")+" "+p.message,data:null};n=p}return n}function X(a,b){var c=y.getNodeByType(o[a]);null==c&&(y.addNode(o[a],null),c=y.getNodeByType(o[a]));
    y.removeChildren(c);for(var d=0;d<b.length;d++){var e=h[q[b[d].constraintType]];e.compound&&y.addNode(e.constraintType,c)}}function Y(a,b,c){for(var d=[],e=0;e<b.length;e++){if("undefined"===typeof b[e].constraintType)throw"In compound constraint "+a+": A composing constraint has no constraint type specified.";d.push(h[q[b[e].constraintType]])}for(e=0;e<b.length;e++){var f=b[e],d=q[f.constraintType],k={__size__:0};f.params=f.params||{};for(var i in f.params)f.params.hasOwnProperty(i)&&x(k,i,f.params[i]);
    var j=0,m;for(m in f.params)f.params.hasOwnProperty(m)&&j++;f.params.__size__=j;for(f=0;f<c.length;f++)x(k,c[f],null);d=U(null,h[d],k);if(d.error)throw"In compound constraint "+a+": "+d.message;}}function Z(a){var b;b="undefined"===typeof a?I(document.body,"*","data-constraints"):[a];for(var a={successful:!0,message:"",data:null},c=0;c<b.length&&a.successful;){var a=b[c],d=a.tagName.toLowerCase();"form"!=d&&"select"!=d&&"textarea"!=d&&"input"!=d?a={successful:!1,message:d+"#"+a.id+" is not an input, select, textarea, or form element! Validation constraints can only be attached to input, select, textarea, or form elements.",
    data:null}:(a.id||(a.id="regula-generated-"+Math.floor(1E6*Math.random())),d=a.getAttribute("data-constraints"),a=fa(a,d),c++)}return a}function $(a){var b={successful:!0,message:"",data:null},c=a.element,d=a.constraints||[],e=c&&c.tagName?c.tagName.toLowerCase():null;if(c)if(1!==c.nodeType)b={successful:!1,message:"regula.bind: element attribute is expected to be an HTMLElement, but was of unexpected type: "+typeof c+". "+r(a),data:null};else if("form"!=e&&"select"!=e&&"textarea"!=e&&"input"!=e)b=
{successful:!1,message:e+"#"+c.id+" is not an input, select, textarea, or form element! Validation constraints can only be attached to input, select, textarea, or form elements. "+r(a),data:null};else if(0<d.length)for(c=0;c<d.length&&b.successful;)b=ga(d[c],a),c++;else b=Z(c);else b={successful:!1,message:"regula.bind expects a non-null element attribute in the options argument. "+r(a),data:null};return b}function ga(a,b){function c(a,b,c){var d=i[u[v.Default]][a.id][q[b]].groups.split(/,/),e=[];
    c.groups?e=c.groups.split(/,/):e.push(u[v.Default]);L(e,u[v.Default])||e.push(u[v.Default]);for(var f=c=e,k={},e=[],j=0;j<d.length;j++)e.push(d[j]),k[d[j]]=!0;for(d=0;d<f.length;d++)k[f[d]]||e.push(f[d]);d=[];for(f=0;f<e.length;f++)L(c,e[f])||d.push(e[f]);for(c=0;c<d.length;c++)e=d[c],delete i[e][a.id][q[b]],M(a.id,e)}var d={successful:!0,message:"",data:null},e=b.element,f=a.overwriteConstraint||!1,k=a.overwriteParameters||!1,h=a.constraintType,j=a.params||{},m={__size__:0};if("undefined"===typeof h)d=
{successful:!1,message:"regula.bind expects a valid constraint type for each constraint in constraints attribute of the options argument. "+r(b),data:null};else if(j&&j.groups)if(j.groups instanceof Array){for(var o="",t=0;t<j.groups.length&&d.successful;)"string"==typeof j.groups[t]?o+=j.groups[t]+",":"undefined"!==typeof u[j.groups[t]]?o+=u[j.groups[t]]+",":d={successful:!1,message:"Invalid group: "+j.groups[t]+". "+r(b),data:null},t++;d.successful&&(o=o.replace(/,$/,""),j.groups=o)}else d={successful:!1,
    message:"The groups parameter must be an array of enums or strings "+r(b),data:null};if(d.successful){if(!i[u[v.Default]][e.id]||!i[u[v.Default]][e.id][q[h]]){for(var l in j)j.hasOwnProperty(l)&&x(m,l,j[l]);d=D(e,q[h],m)}else if(f){for(l in j)j.hasOwnProperty(l)&&x(m,l,j[l]);d=D(e,q[h],m);d.successful&&c(e,h,j)}else{f=i[u[v.Default]][e.id][q[h]];for(l in f)f.hasOwnProperty(l)&&x(m,l,f[l]);if(k){for(l in j)j.hasOwnProperty(l)&&x(m,l,j[l]);d=D(e,q[h],m);d.successful&&c(e,h,m)}else for(l in j)j.hasOwnProperty(l)&&
(f[l]||x(m,l,j[l]))}d.successful&&V(e,q[h],m)}return d}function aa(a){var b={"000":ha,"001":ia,"010":ja,"011":ka,100:la,101:ma,110:na,111:oa};C={};A={};if(!a||"undefined"===typeof a)a={};"undefined"===typeof a.independent&&(a.independent=!0);"undefined"!==typeof a.constraintType&&(a.constraintType=q[a.constraintType]);if(a.groups){var c=a.groups;a.groups=[];for(var d=0;d<c.length;d++)a.groups.push(u[c[d]])}return b[function(a){var b=a.elementId||null,c=(typeof a.constraintType==="undefined"?null:
    a.constraintType)||null,a=""+((a.groups||null)==null?"0":"1");return a+(b==null?"0":"1")+(c==null?"0":"1")}(a)](a)}function ha(){var a=[],b;for(b in i)if(i.hasOwnProperty(b)){var c=i[b],d;for(d in c)if(c.hasOwnProperty(d))if(document.getElementById(d)){var e=c[d],f;for(f in e)if(e.hasOwnProperty(f)){var k=z(b,d,f);k&&a.push(k)}}else delete c[d]}return a}function ia(a){var b=[],c=!1,d;for(d in i)if(i.hasOwnProperty(d)){var e=i[d],f;for(f in e)if(e.hasOwnProperty(f)&&e[f][a.constraintType]){var c=!0,
    k=z(d,f,a.constraintType);k&&b.push(k)}}if(!c)throw"Constraint "+a.constraintType+" has not been bound to any element. "+r(a);return b}function ja(a){var b=[],c=!1,d;for(d in i)if(i.hasOwnProperty(d)){var e=i[d];if(e[a.elementId]){var c=!0,e=e[a.elementId],f;for(f in e)if(e.hasOwnProperty(f)){var k=z(d,a.elementId,f);k&&b.push(k)}}}if(!c)throw"No constraints have been bound to element with id "+a.elementId+". "+r(a);return b}function ka(a){var b=[],c=!1,d=!1,e;for(e in i)if(i.hasOwnProperty(e)){var f=
    i[e][a.elementId];f&&(c=!0,f[a.constraintType]&&(d=!0,(f=z(e,a.elementId,a.constraintType))&&b.push(f)))}if(!c||!d)throw"No element with id "+a.elementId+" was found with the constraint "+a.constraintType+" bound to it. "+r(a);return b}function la(a){for(var b=[],c=0,d=!0;c<a.groups.length&&d;){var d=a.groups[c],e=i[d];if(e)for(var f in e){if(e.hasOwnProperty(f)){var k=e[f],h;for(h in k)if(k.hasOwnProperty(h)){var j=z(d,f,h);j&&b.push(j)}}}else throw"Undefined group in group list. "+r(a);c++;d=0==
    b.length||a.independent&&0!=b.length}return b}function ma(a){for(var b=[],c=0,d=!0;c<a.groups.length&&d;){var d=a.groups[c],e=i[d];if(e){var f=!1,k;for(k in e)if(e.hasOwnProperty(k)&&e[k][a.constraintType]){var f=!0,h=z(d,k,a.constraintType);h&&b.push(h)}if(!f)throw"Constraint "+a.constraintType+" has not been bound to any element under group "+d+". "+r(a);}else throw"Undefined group in group list. "+r(a);c++;d=0==b.length||a.independent&&0!=b.length}return b}function na(a){for(var b=[],c=[],d=0,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           e=!0;d<a.groups.length&&e;){var e=a.groups[d],f=i[e];if(f)if(f=f[a.elementId])for(var k in f){if(f.hasOwnProperty(k)){var h=z(e,a.elementId,k);h&&b.push(h)}}else c.push(e);else throw"Undefined group in group list. "+r(a);d++;e=0==b.length||a.independent&&0!=b.length}if(0<c.length)throw"No element with id "+a.elementId+" was found in the following group(s): ["+J(c,",").replace(/,/g,", ")+"]. "+r(a);return b}function oa(a){for(var b=[],c=0,d=!0;c<a.groups.length&&d;)(d=z(a.groups[c],a.elementId,a.constraintType))&&
b.push(d),c++,d=0==b.length||a.independent&&0!=b.length;return b}function z(a,b,c){var d,e=i[a];if(!e)throw"Undefined group in group list (group: "+a+", elementId: "+b+", constraint: "+c+")";e=e[b];C[b]||(C[b]={});var f=document.getElementById(b),k=f.name.replace(/\s/g,"");"undefined"!==typeof f.type&&"radio"===f.type.toLowerCase()&&""!==k?A[k]||(A[k]={}):(k="__dontcare__",A[k]={});if(!C[b][c]&&!A[k][c])if(e)if(e=e[c])f=S(a,b,c,e),f.constraintPassed||(b=T(b,c,e),d={group:a,constraintName:c,formSpecific:h[c].formSpecific,
    custom:h[c].custom,compound:h[c].compound,composingConstraintViolations:f.composingConstraintViolations||[],constraintParameters:e,failingElements:f.failingElements,message:b});else throw c+" in group "+a+" hasn't been bound to the element with id "+b;else throw"No constraints have been defined for the element with id: "+b+" in group "+a;return d}function S(a,b,c,d){var e=!1,f=[],k=document.getElementById(b),i=[];h[c].formSpecific?(f=h[c].validator.call(k,d),e=0==f.length):(h[c].compound?(i=h[c].validator.call(k,
    d,a,h[c]),e=0==i.length):e=h[c].validator.call(k,d),e||f.push(k));C[b][c]=!0;a=k.name.replace(/\s/g,"");"undefined"!==typeof k.type&&("radio"===k.type.toLowerCase()&&""!==a)&&(A[a][c]=!0,f=I(document.body,"input","name",a));e={constraintPassed:e,failingElements:f};h[c].reportAsSingleViolation||(e.composingConstraintViolations=i);return e}function T(a,b,c){var a=document.getElementById(a),d="",d=c.message?c.message:c.msg?c.msg:h[b].defaultMessage,e;for(e in c)if(c.hasOwnProperty(e))var f=RegExp("{"+
    e+"}","g"),d=d.replace(f,c[e]);if(h[b].compound&&"undefined"!==typeof h[b].composingConstraints)for(c=0;c<h[b].composingConstraints.length;c++){var k=h[b].composingConstraints[c];for(e in k.params)k.params.hasOwnProperty(e)&&(f=RegExp("{"+e+"}","g"),d=d.replace(f,k.params[e]))}/{label}/.test(d)&&((b=ba[a.tagName.toLowerCase()])||(b=ba[a.type.toLowerCase()]),d=d.replace(/{label}/,b),d=d.replace(/{flags}/g,""));return d=d.replace(/\\\"/g,'"')}var I=function(a,b,c,d){for(var a="*"==b&&a.all?a.all:a.getElementsByTagName(b),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b=[],e="undefined"!==typeof d?RegExp("(^|\\s)"+d+"(\\s|$)"):null,f,h,i=0;i<a.length;i++)f=a[i],h=f.getAttribute&&f.getAttribute(c),"string"==typeof h&&0<h.length&&("undefined"===typeof d||e&&e.test(h))&&b.push(f);return b},H={validateEmptyFields:!0,debug:!1},v={Default:0},u={"0":"Default"},K=[],o={Checked:0,Selected:1,Max:2,Min:3,Range:4,Between:4,NotBlank:5,NotEmpty:5,Blank:6,Empty:6,Pattern:7,Matches:7,Email:8,Alpha:9,IsAlpha:9,Numeric:10,IsNumeric:12,AlphaNumeric:11,IsAlphaNumeric:11,Integer:12,
    Real:13,CompletelyFilled:14,PasswordsMatch:15,Required:16,Length:17,Digits:18,Past:19,Future:20},q={"0":"Checked",1:"Selected",2:"Max",3:"Min",4:"Range",5:"NotBlank",6:"Blank",7:"Pattern",8:"Email",9:"Alpha",10:"Numeric",11:"AlphaNumeric",12:"Integer",13:"Real",14:"CompletelyFilled",15:"PasswordsMatch",16:"Required",17:"Length",18:"Digits",19:"Past",20:"Future"},ba={form:"The form",select:"The select box",textarea:"The text area",checkbox:"The checkbox",radio:"The radio button",text:"The text field",
    password:"The password"},E=21,ea=1,h={Checked:{formSpecific:!1,validator:O,constraintType:o.Checked,custom:!1,compound:!1,params:[],defaultMessage:"{label} needs to be checked."},Selected:{formSpecific:!1,validator:function(){return 0<this.selectedIndex},constraintType:o.Selected,custom:!1,compound:!1,params:[],defaultMessage:"{label} needs to be selected."},Max:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(b=parseFloat(this.value)<=parseFloat(a.value));return b},constraintType:o.Max,
    custom:!1,compound:!1,params:["value"],defaultMessage:"{label} needs to be lesser than or equal to {value}."},Min:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(b=parseFloat(this.value)>=parseFloat(a.value));return b},constraintType:o.Min,custom:!1,compound:!1,params:["value"],defaultMessage:"{label} needs to be greater than or equal to {value}."},Range:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(b=""!=this.value.replace(/\s/g,"")&&parseFloat(this.value)<=parseFloat(a.max)&&
    parseFloat(this.value)>=parseFloat(a.min));return b},constraintType:o.Range,custom:!1,compound:!1,params:["min","max"],defaultMessage:"{label} needs to be between {min} and {max}."},NotBlank:{formSpecific:!1,validator:P,constraintType:o.NotBlank,custom:!1,compound:!1,params:[],defaultMessage:"{label} cannot be blank."},Blank:{formSpecific:!1,validator:N,constraintType:o.Blank,custom:!1,compound:!1,params:[],defaultMessage:"{label} needs to be blank."},Pattern:{formSpecific:!1,validator:function(a){var b=
    !0;t(this,a)&&(b="string"===typeof a.regex?a.regex.replace(/^\//,"").replace(/\/$/,""):a.regex,b=("undefined"!==typeof a.flags?RegExp(b.toString().replace(/^\//,"").replace(/\/[^\/]*$/,""),a.flags):RegExp(b)).test(this.value));return b},constraintType:o.Pattern,custom:!1,compound:!1,params:["regex"],defaultMessage:"{label} needs to match {regex}{flags}."},Email:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(b=/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/i.test(this.value));
    return b},constraintType:o.Email,custom:!1,compound:!1,params:[],defaultMessage:"{label} is not a valid email."},Alpha:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(b=/^[A-Za-z]+$/.test(this.value));return b},constraintType:o.Alpha,custom:!1,compound:!1,params:[],defaultMessage:"{label} can only contain letters."},Numeric:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(b=/^[0-9]+$/.test(this.value));return b},constraintType:o.Numeric,custom:!1,compound:!1,params:[],defaultMessage:"{label} can only contain numbers."},
    AlphaNumeric:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(b=/^[0-9A-Za-z]+$/.test(this.value));return b},constraintType:o.AlphaNumeric,custom:!1,compound:!1,params:[],defaultMessage:"{label} can only contain numbers and letters."},Integer:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(b=/^-?[0-9]+$/.test(this.value));return b},constraintType:o.Integer,custom:!1,compound:!1,params:[],defaultMessage:"{label} must be an integer."},Real:{formSpecific:!1,validator:function(a){var b=
        !0;t(this,a)&&(b=/^-?([0-9]+(\.[0-9]+)?|\.[0-9]+)$/.test(this.value));return b},constraintType:o.Real,custom:!1,compound:!1,params:[],defaultMessage:"{label} must be a real number."},CompletelyFilled:{formSpecific:!0,validator:function(){for(var a=[],b=0;b<this.elements.length;b++){var c=this.elements[b];Q.call(c)||a.push(c)}return a},constraintType:o.CompletelyFilled,custom:!1,compound:!1,params:[],defaultMessage:"{label} must be completely filled."},PasswordsMatch:{formSpecific:!0,validator:function(a){var b=
        [],c=document.getElementById(a.field1),a=document.getElementById(a.field2);c.value!=a.value&&(b=[c,a]);return b},constraintType:o.PasswordsMatch,custom:!1,compound:!1,params:["field1","field2"],defaultMessage:"Passwords do not match."},Required:{formSpecific:!1,validator:Q,constraintType:o.Required,custom:!1,compound:!1,params:[],defaultMessage:"{label} is required."},Length:{formSpecific:!1,validator:function(a){return this.value.length>=a.min&&this.value.length<=a.max},constraintType:o.Length,custom:!1,
        compound:!1,params:["min","max"],defaultMessage:"{label} length must be between {min} and {max}."},Digits:{formSpecific:!1,validator:function(a){var b=!0;if(t(this,a)){var c=this.value.replace(/\s/g,""),d=c.split(/\./),b=!1;0<c.length&&(1==d.length&&(d[1]=""),b=0<a.integer?d[0].length<=a.integer:!0,0<a.fraction&&(b=b&&d[1].length<=a.fraction))}return b},constraintType:o.Digits,custom:!1,compound:!1,params:["integer","fraction"],defaultMessage:"{label} must have up to {integer} digits and {fraction} fractional digits."},
    Past:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(a=R.call(this,a),b=a.dateToValidate<a.dateToTestAgainst);return b},constraintType:o.Past,custom:!1,compound:!1,params:["format"],defaultMessage:"{label} must be in the past."},Future:{formSpecific:!1,validator:function(a){var b=!0;t(this,a)&&(a=R.call(this,a),b=a.dateToValidate>a.dateToTestAgainst);return b},constraintType:o.Future,custom:!1,compound:!1,params:["format"],defaultMessage:"{label} must be in the future."}},y={addNode:function(){},
    getNodeByType:function(){},cycleExists:function(){},getRoot:function(){},setRoot:function(){},clone:function(){}},ca=function(a){for(var b={visited:a.visited,name:a.name,type:a.type,children:[]},c=0;c<a.children.length;c++)b.children[b.children.length]=ca(a.children[c]);return b},F={},B={visited:!1,name:"RootNode",type:-1,children:[]},y={addNode:function(a,b){var c=null==F[a]?{visited:!1,name:q[a],type:a,children:[]}:F[a];null==b?B.children[B.children.length]=c:b.children[b.children.length]=c;F[a]=
    c},removeChildren:function(a){a.children=[]},getNodeByType:function(a){return F[a]},cycleExists:function(a){a=function(a,c){var d={cycleExists:!1,path:c};if(a.visited)d={cycleExists:!0,path:c};else{a.visited=!0;for(var e=0;e<a.children.length&&!d.cycleExists;)d=arguments.callee(a.children[e],c+"."+a.children[e].name),e++}return d}(a,a.name);a.cycleExists||function(a){a.visited=!1;for(var c=0;c<a.children.length;c++)arguments.callee(a.children[c])}(B);return a},getRoot:function(){return B},setRoot:function(a){B=
    a},clone:function(){return ca(B)}},i=null,C={},A={};return{configure:function(a){var b=function(a,b){"undefined"!==typeof H[a]&&(H[a]=b)},c=0,d;for(d in a)a.hasOwnProperty(d)&&"__size__"!==d&&(b.call(a,d,a[d],c),c++)},bind:function(a){i||G();var b={successful:!0,message:"",data:null};if("undefined"===typeof a||!a)G(),b=Z();else if(b=a.elements,"undefined"===typeof b||!b)b=$(a);else{for(var c={successful:!0},d=0;c.successful&&d<b.length;)a.element=b[d],c=$(a),c.successful||(c.message="regula.bind: Element "+
    (d+1)+" of "+b.length+" failed: "+c.message),d++;b=c}if(!b.successful)throw b.message;},unbind:function(a){if("undefined"===typeof a||!a)G();else{if("undefined"===typeof a.elementId&&"undefined"===typeof a.elements)throw"regula.unbind requires an elementId attribute, or an elements attribute if options are provided";if("undefined"!==typeof a.elements&&!(a.elements instanceof Array))throw"regula.unbind expects the elements attribute to be an array, if it is provided";if("undefined"===typeof a.elements&&
    (a.elements=[document.getElementById(a.elementId)],null===a.elements[0]))throw"Element with id "+a.elementId+" does not have any constraints bound to it. "+r(a);for(var b=0;b<a.elements.length;b++){var c=a.elements[b].id,d=a.constraints||[];if(0==d.length)for(var e in i){if(i.hasOwnProperty(e))if("undefined"!==typeof i[e][c])delete i[e][c],"Default"!==e&&M(c,e);else throw"Element with id "+c+" does not have any constraints bound to it. "+r(a);}else for(var f=0;f<d.length;f++){var h=d[f];for(e in i)if(i.hasOwnProperty(e))if("undefined"!==
    typeof i[e][c])delete i[e][c][q[h]],"Default"!==e&&M(c,e);else throw"Element with id "+c+" does not have any constraints bound to it. "+r(a);}}}},validate:function(a){var b=null;if("undefined"!==typeof a&&"undefined"!==typeof a.groups&&!(a.groups instanceof Array))throw"regula.validate: If a groups attribute is provided, it must be an array.";if("undefined"!==typeof a&&"undefined"!==typeof a.groups&&0==a.groups.length)throw"regula.validate: If a groups attribute is provided, it must not be empty.";
    if("undefined"!==typeof a&&a.hasOwnProperty("constraintType")&&"undefined"===typeof a.constraintType)throw"regula.validate: If a constraintType attribute is provided, it cannot be undefined.";if("undefined"!==typeof a&&"undefined"!==typeof a.elements)if(a.elements instanceof Array){if(0==a.elements.length)throw"regula.validate: If an elements attribute is provided, it must not be empty.";for(var c=a.constraintType,d=a.groups,b=[],e=0;e<a.elements.length;e++)a.elementId=a.elements[e].id,b=b.concat(aa(a)),
        a.constraintType=c,a.groups=d}else throw"regula.validate: If an elements attribute is provided, it must be an array.";else b=aa(a);return b},custom:function(a){if(!a)throw"regula.custom expects options";var b=a.name,c=a.formSpecific||!1,d=a.validator,e=a.params||[],a=a.defaultMessage||"";if(b){if("string"!=typeof b)throw"regula.custom expects the name attribute in the options argument to be a string";if(0==b.replace(/\s/g,"").length)throw"regula.custom cannot accept an empty string for the name attribute in the options argument";
}else throw"regula.custom expects a name attribute in the options argument";if("boolean"!=typeof c)throw"regula.custom expects the formSpecific attribute in the options argument to be a boolean";if(d){if("function"!=typeof d)throw"regula.custom expects the validator attribute in the options argument to be a function";}else throw"regula.custom expects a validator attribute in the options argument";if(0>e.constructor.toString().indexOf("Array"))throw"regula.custom expects the params attribute in the options argument to be an array";
    if("string"!=typeof a)throw"regula.custom expects the defaultMessage attribute in the options argument to be a string";if(h[b])throw"There is already a constraint called "+b+". If you wish to override this constraint, use regula.override";o[b]=E;q[E++]=b;h[b]={formSpecific:c,validator:d,constraintType:o[b],custom:!0,compound:!1,params:e,defaultMessage:a}},compound:function(a){if(!a)throw"regula.compound expects options";var b=a.name,c=a.constraints||[],d=a.formSpecific||!1,e=a.defaultMessage||"",
    f=a.params||[],a="undefined"===typeof a.reportAsSingleViolation?!1:a.reportAsSingleViolation;if(!b)throw"regula.compound expects a name attribute in the options argument";if("string"!=typeof b)throw"regula.compound expects name to be a string parameter";if(0>f.constructor.toString().indexOf("Array"))throw"regula.compound expects the params attribute in the options argument to be an array";if(0==c.length)throw"regula.compound expects an array of composing constraints under a constraints attribute in the options argument";
    if(h[b])throw"regula.compound: There is already a constraint called "+b+". If you wish to override this constraint, use regula.override";Y(b,c,f);o[b]=E;q[E++]=b;h[b]={formSpecific:d,constraintType:o[b],custom:!0,compound:!0,params:f,reportAsSingleViolation:a,composingConstraints:c,defaultMessage:e,validator:da};X(b,c)},override:function(a){if(!a)throw"regula.override expects options";if("undefined"===typeof a.constraintType)throw"regula.override expects a valid constraintType attribute in the options argument";
    var b=q[a.constraintType];if("undefined"===typeof b)throw"regula.override: I could not find the specified constraint. Perhaps it has not been defined? Function received: "+r(a);var c=h[b].formSpecific;h[b].custom&&(c="undefined"===typeof a.formSpecific?h[b].formSpecific:a.formSpecific);var d=h[b].custom&&!h[b].compound?a.validator||h[b].validator:h[b].validator,e=h[b].custom?a.params||h[b].params:h[b].params,f=a.defaultMessage||h[b].defaultMessage,i=h[b].compound,m=a.constraints||h[b].constraints;
    if("boolean"!=typeof c)throw"regula.override expects the formSpecific attribute in the options argument to be a boolean";if("function"!=typeof d)throw"regula.override expects the validator attribute in the options argument to be a function";if(!(e instanceof Array))throw"regula.override expects the params attribute in the options argument to be an array";if("string"!=typeof f)throw"regula.override expects the defaultMessage attribute in the options argument to be a string";if(i){Y(b,m,e);var j=y.clone();
        X(b,m);a=y.cycleExists(y.getNodeByType(a.constraintType));if(a.cycleExists)throw y.setRoot(j),"regula.override: The overriding composing-constraints you have specified have created a cyclic composition: "+a.path;}h[b]={formSpecific:c,constraintType:o[b],custom:!0,compound:i,params:e,composingConstraints:m,defaultMessage:f,validator:d}},Constraint:o,Group:v,DateFormat:{DMY:"DMY",MDY:"MDY",YMD:"YMD"}}}();
/*! Hammer.JS - v1.0.5 - 2013-04-07
 * http://eightmedia.github.com/hammer.js
 *
 * Copyright (c) 2013 Jorik Tangelder <j.tangelder@gmail.com>;
 * Licensed under the MIT license */

(function(t,e){"use strict";function n(){if(!i.READY){i.event.determineEventTypes();for(var t in i.gestures)i.gestures.hasOwnProperty(t)&&i.detection.register(i.gestures[t]);i.event.onTouch(i.DOCUMENT,i.EVENT_MOVE,i.detection.detect),i.event.onTouch(i.DOCUMENT,i.EVENT_END,i.detection.detect),i.READY=!0}}var i=function(t,e){return new i.Instance(t,e||{})};i.defaults={stop_browser_behavior:{userSelect:"none",touchAction:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},i.HAS_POINTEREVENTS=navigator.pointerEnabled||navigator.msPointerEnabled,i.HAS_TOUCHEVENTS="ontouchstart"in t,i.MOBILE_REGEX=/mobile|tablet|ip(ad|hone|od)|android/i,i.NO_MOUSEEVENTS=i.HAS_TOUCHEVENTS&&navigator.userAgent.match(i.MOBILE_REGEX),i.EVENT_TYPES={},i.DIRECTION_DOWN="down",i.DIRECTION_LEFT="left",i.DIRECTION_UP="up",i.DIRECTION_RIGHT="right",i.POINTER_MOUSE="mouse",i.POINTER_TOUCH="touch",i.POINTER_PEN="pen",i.EVENT_START="start",i.EVENT_MOVE="move",i.EVENT_END="end",i.DOCUMENT=document,i.plugins={},i.READY=!1,i.Instance=function(t,e){var r=this;return n(),this.element=t,this.enabled=!0,this.options=i.utils.extend(i.utils.extend({},i.defaults),e||{}),this.options.stop_browser_behavior&&i.utils.stopDefaultBrowserBehavior(this.element,this.options.stop_browser_behavior),i.event.onTouch(t,i.EVENT_START,function(t){r.enabled&&i.detection.startDetect(r,t)}),this},i.Instance.prototype={on:function(t,e){for(var n=t.split(" "),i=0;n.length>i;i++)this.element.addEventListener(n[i],e,!1);return this},off:function(t,e){for(var n=t.split(" "),i=0;n.length>i;i++)this.element.removeEventListener(n[i],e,!1);return this},trigger:function(t,e){var n=i.DOCUMENT.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e;var r=this.element;return i.utils.hasParent(e.target,r)&&(r=e.target),r.dispatchEvent(n),this},enable:function(t){return this.enabled=t,this}};var r=null,o=!1,s=!1;i.event={bindDom:function(t,e,n){for(var i=e.split(" "),r=0;i.length>r;r++)t.addEventListener(i[r],n,!1)},onTouch:function(t,e,n){var a=this;this.bindDom(t,i.EVENT_TYPES[e],function(c){var u=c.type.toLowerCase();if(!u.match(/mouse/)||!s){(u.match(/touch/)||u.match(/pointerdown/)||u.match(/mouse/)&&1===c.which)&&(o=!0),u.match(/touch|pointer/)&&(s=!0);var h=0;o&&(i.HAS_POINTEREVENTS&&e!=i.EVENT_END?h=i.PointerEvent.updatePointer(e,c):u.match(/touch/)?h=c.touches.length:s||(h=u.match(/up/)?0:1),h>0&&e==i.EVENT_END?e=i.EVENT_MOVE:h||(e=i.EVENT_END),h||null===r?r=c:c=r,n.call(i.detection,a.collectEventData(t,e,c)),i.HAS_POINTEREVENTS&&e==i.EVENT_END&&(h=i.PointerEvent.updatePointer(e,c))),h||(r=null,o=!1,s=!1,i.PointerEvent.reset())}})},determineEventTypes:function(){var t;t=i.HAS_POINTEREVENTS?i.PointerEvent.getEvents():i.NO_MOUSEEVENTS?["touchstart","touchmove","touchend touchcancel"]:["touchstart mousedown","touchmove mousemove","touchend touchcancel mouseup"],i.EVENT_TYPES[i.EVENT_START]=t[0],i.EVENT_TYPES[i.EVENT_MOVE]=t[1],i.EVENT_TYPES[i.EVENT_END]=t[2]},getTouchList:function(t){return i.HAS_POINTEREVENTS?i.PointerEvent.getTouchList():t.touches?t.touches:[{identifier:1,pageX:t.pageX,pageY:t.pageY,target:t.target}]},collectEventData:function(t,e,n){var r=this.getTouchList(n,e),o=i.POINTER_TOUCH;return(n.type.match(/mouse/)||i.PointerEvent.matchType(i.POINTER_MOUSE,n))&&(o=i.POINTER_MOUSE),{center:i.utils.getCenter(r),timeStamp:(new Date).getTime(),target:n.target,touches:r,eventType:e,pointerType:o,srcEvent:n,preventDefault:function(){this.srcEvent.preventManipulation&&this.srcEvent.preventManipulation(),this.srcEvent.preventDefault&&this.srcEvent.preventDefault()},stopPropagation:function(){this.srcEvent.stopPropagation()},stopDetect:function(){return i.detection.stopDetect()}}}},i.PointerEvent={pointers:{},getTouchList:function(){var t=this,e=[];return Object.keys(t.pointers).sort().forEach(function(n){e.push(t.pointers[n])}),e},updatePointer:function(t,e){return t==i.EVENT_END?this.pointers={}:(e.identifier=e.pointerId,this.pointers[e.pointerId]=e),Object.keys(this.pointers).length},matchType:function(t,e){if(!e.pointerType)return!1;var n={};return n[i.POINTER_MOUSE]=e.pointerType==e.MSPOINTER_TYPE_MOUSE||e.pointerType==i.POINTER_MOUSE,n[i.POINTER_TOUCH]=e.pointerType==e.MSPOINTER_TYPE_TOUCH||e.pointerType==i.POINTER_TOUCH,n[i.POINTER_PEN]=e.pointerType==e.MSPOINTER_TYPE_PEN||e.pointerType==i.POINTER_PEN,n[t]},getEvents:function(){return["pointerdown MSPointerDown","pointermove MSPointerMove","pointerup pointercancel MSPointerUp MSPointerCancel"]},reset:function(){this.pointers={}}},i.utils={extend:function(t,n,i){for(var r in n)t[r]!==e&&i||(t[r]=n[r]);return t},hasParent:function(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1},getCenter:function(t){for(var e=[],n=[],i=0,r=t.length;r>i;i++)e.push(t[i].pageX),n.push(t[i].pageY);return{pageX:(Math.min.apply(Math,e)+Math.max.apply(Math,e))/2,pageY:(Math.min.apply(Math,n)+Math.max.apply(Math,n))/2}},getVelocity:function(t,e,n){return{x:Math.abs(e/t)||0,y:Math.abs(n/t)||0}},getAngle:function(t,e){var n=e.pageY-t.pageY,i=e.pageX-t.pageX;return 180*Math.atan2(n,i)/Math.PI},getDirection:function(t,e){var n=Math.abs(t.pageX-e.pageX),r=Math.abs(t.pageY-e.pageY);return n>=r?t.pageX-e.pageX>0?i.DIRECTION_LEFT:i.DIRECTION_RIGHT:t.pageY-e.pageY>0?i.DIRECTION_UP:i.DIRECTION_DOWN},getDistance:function(t,e){var n=e.pageX-t.pageX,i=e.pageY-t.pageY;return Math.sqrt(n*n+i*i)},getScale:function(t,e){return t.length>=2&&e.length>=2?this.getDistance(e[0],e[1])/this.getDistance(t[0],t[1]):1},getRotation:function(t,e){return t.length>=2&&e.length>=2?this.getAngle(e[1],e[0])-this.getAngle(t[1],t[0]):0},isVertical:function(t){return t==i.DIRECTION_UP||t==i.DIRECTION_DOWN},stopDefaultBrowserBehavior:function(t,e){var n,i=["webkit","khtml","moz","ms","o",""];if(e&&t.style){for(var r=0;i.length>r;r++)for(var o in e)e.hasOwnProperty(o)&&(n=o,i[r]&&(n=i[r]+n.substring(0,1).toUpperCase()+n.substring(1)),t.style[n]=e[o]);"none"==e.userSelect&&(t.onselectstart=function(){return!1})}}},i.detection={gestures:[],current:null,previous:null,stopped:!1,startDetect:function(t,e){this.current||(this.stopped=!1,this.current={inst:t,startEvent:i.utils.extend({},e),lastEvent:!1,name:""},this.detect(e))},detect:function(t){if(this.current&&!this.stopped){t=this.extendEventData(t);for(var e=this.current.inst.options,n=0,r=this.gestures.length;r>n;n++){var o=this.gestures[n];if(!this.stopped&&e[o.name]!==!1&&o.handler.call(o,t,this.current.inst)===!1){this.stopDetect();break}}return this.current&&(this.current.lastEvent=t),t.eventType==i.EVENT_END&&!t.touches.length-1&&this.stopDetect(),t}},stopDetect:function(){this.previous=i.utils.extend({},this.current),this.current=null,this.stopped=!0},extendEventData:function(t){var e=this.current.startEvent;if(e&&(t.touches.length!=e.touches.length||t.touches===e.touches)){e.touches=[];for(var n=0,r=t.touches.length;r>n;n++)e.touches.push(i.utils.extend({},t.touches[n]))}var o=t.timeStamp-e.timeStamp,s=t.center.pageX-e.center.pageX,a=t.center.pageY-e.center.pageY,c=i.utils.getVelocity(o,s,a);return i.utils.extend(t,{deltaTime:o,deltaX:s,deltaY:a,velocityX:c.x,velocityY:c.y,distance:i.utils.getDistance(e.center,t.center),angle:i.utils.getAngle(e.center,t.center),direction:i.utils.getDirection(e.center,t.center),scale:i.utils.getScale(e.touches,t.touches),rotation:i.utils.getRotation(e.touches,t.touches),startEvent:e}),t},register:function(t){var n=t.defaults||{};return n[t.name]===e&&(n[t.name]=!0),i.utils.extend(i.defaults,n,!0),t.index=t.index||1e3,this.gestures.push(t),this.gestures.sort(function(t,e){return t.index<e.index?-1:t.index>e.index?1:0}),this.gestures}},i.gestures=i.gestures||{},i.gestures.Hold={name:"hold",index:10,defaults:{hold_timeout:500,hold_threshold:1},timer:null,handler:function(t,e){switch(t.eventType){case i.EVENT_START:clearTimeout(this.timer),i.detection.current.name=this.name,this.timer=setTimeout(function(){"hold"==i.detection.current.name&&e.trigger("hold",t)},e.options.hold_timeout);break;case i.EVENT_MOVE:t.distance>e.options.hold_threshold&&clearTimeout(this.timer);break;case i.EVENT_END:clearTimeout(this.timer)}}},i.gestures.Tap={name:"tap",index:100,defaults:{tap_max_touchtime:250,tap_max_distance:10,tap_always:!0,doubletap_distance:20,doubletap_interval:300},handler:function(t,e){if(t.eventType==i.EVENT_END){var n=i.detection.previous,r=!1;if(t.deltaTime>e.options.tap_max_touchtime||t.distance>e.options.tap_max_distance)return;n&&"tap"==n.name&&t.timeStamp-n.lastEvent.timeStamp<e.options.doubletap_interval&&t.distance<e.options.doubletap_distance&&(e.trigger("doubletap",t),r=!0),(!r||e.options.tap_always)&&(i.detection.current.name="tap",e.trigger(i.detection.current.name,t))}}},i.gestures.Swipe={name:"swipe",index:40,defaults:{swipe_max_touches:1,swipe_velocity:.7},handler:function(t,e){if(t.eventType==i.EVENT_END){if(e.options.swipe_max_touches>0&&t.touches.length>e.options.swipe_max_touches)return;(t.velocityX>e.options.swipe_velocity||t.velocityY>e.options.swipe_velocity)&&(e.trigger(this.name,t),e.trigger(this.name+t.direction,t))}}},i.gestures.Drag={name:"drag",index:50,defaults:{drag_min_distance:10,drag_max_touches:1,drag_block_horizontal:!1,drag_block_vertical:!1,drag_lock_to_axis:!1,drag_lock_min_distance:25},triggered:!1,handler:function(t,n){if(i.detection.current.name!=this.name&&this.triggered)return n.trigger(this.name+"end",t),this.triggered=!1,e;if(!(n.options.drag_max_touches>0&&t.touches.length>n.options.drag_max_touches))switch(t.eventType){case i.EVENT_START:this.triggered=!1;break;case i.EVENT_MOVE:if(t.distance<n.options.drag_min_distance&&i.detection.current.name!=this.name)return;i.detection.current.name=this.name,(i.detection.current.lastEvent.drag_locked_to_axis||n.options.drag_lock_to_axis&&n.options.drag_lock_min_distance<=t.distance)&&(t.drag_locked_to_axis=!0);var r=i.detection.current.lastEvent.direction;t.drag_locked_to_axis&&r!==t.direction&&(t.direction=i.utils.isVertical(r)?0>t.deltaY?i.DIRECTION_UP:i.DIRECTION_DOWN:0>t.deltaX?i.DIRECTION_LEFT:i.DIRECTION_RIGHT),this.triggered||(n.trigger(this.name+"start",t),this.triggered=!0),n.trigger(this.name,t),n.trigger(this.name+t.direction,t),(n.options.drag_block_vertical&&i.utils.isVertical(t.direction)||n.options.drag_block_horizontal&&!i.utils.isVertical(t.direction))&&t.preventDefault();break;case i.EVENT_END:this.triggered&&n.trigger(this.name+"end",t),this.triggered=!1}}},i.gestures.Transform={name:"transform",index:45,defaults:{transform_min_scale:.01,transform_min_rotation:1,transform_always_block:!1},triggered:!1,handler:function(t,n){if(i.detection.current.name!=this.name&&this.triggered)return n.trigger(this.name+"end",t),this.triggered=!1,e;if(!(2>t.touches.length))switch(n.options.transform_always_block&&t.preventDefault(),t.eventType){case i.EVENT_START:this.triggered=!1;break;case i.EVENT_MOVE:var r=Math.abs(1-t.scale),o=Math.abs(t.rotation);if(n.options.transform_min_scale>r&&n.options.transform_min_rotation>o)return;i.detection.current.name=this.name,this.triggered||(n.trigger(this.name+"start",t),this.triggered=!0),n.trigger(this.name,t),o>n.options.transform_min_rotation&&n.trigger("rotate",t),r>n.options.transform_min_scale&&(n.trigger("pinch",t),n.trigger("pinch"+(1>t.scale?"in":"out"),t));break;case i.EVENT_END:this.triggered&&n.trigger(this.name+"end",t),this.triggered=!1}}},i.gestures.Touch={name:"touch",index:-1/0,defaults:{prevent_default:!1,prevent_mouseevents:!1},handler:function(t,n){return n.options.prevent_mouseevents&&t.pointerType==i.POINTER_MOUSE?(t.stopDetect(),e):(n.options.prevent_default&&t.preventDefault(),t.eventType==i.EVENT_START&&n.trigger(this.name,t),e)}},i.gestures.Release={name:"release",index:1/0,handler:function(t,e){t.eventType==i.EVENT_END&&e.trigger(this.name,t)}},"object"==typeof module&&"object"==typeof module.exports?module.exports=i:(t.Hammer=i,"function"==typeof t.define&&t.define.amd&&t.define("hammer",[],function(){return i}))})(this),function(t,e){"use strict";t!==e&&(Hammer.event.bindDom=function(n,i,r){t(n).on(i,function(t){var n=t.originalEvent||t;n.pageX===e&&(n.pageX=t.pageX,n.pageY=t.pageY),n.target||(n.target=t.target),n.which===e&&(n.which=n.button),n.preventDefault||(n.preventDefault=t.preventDefault),n.stopPropagation||(n.stopPropagation=t.stopPropagation),r.call(this,n)})},Hammer.Instance.prototype.on=function(e,n){return t(this.element).on(e,n)},Hammer.Instance.prototype.off=function(e,n){return t(this.element).off(e,n)},Hammer.Instance.prototype.trigger=function(e,n){var i=t(this.element);return i.has(n.target).length&&(i=t(n.target)),i.trigger({type:e,gesture:n})},t.fn.hammer=function(e){return this.each(function(){var n=t(this),i=n.data("hammer");i?i&&e&&Hammer.utils.extend(i.options,e):n.data("hammer",new Hammer(this,e||{}))})})}(window.jQuery||window.Zepto);
/* ===========================================================
 * bootstrap-inputmask.js j2
 * http://twitter.github.com/bootstrap/javascript.html#tooltips
 * Based on Masked Input plugin by Josh Bush (digitalbush.com)
 * ===========================================================
 * Copyright 2012 Jasny BV, Netherlands.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!function ($) {

    "use strict"; // jshint ;_;

    var isIphone = (window.orientation !== undefined),
        isAndroid = navigator.userAgent.toLowerCase().indexOf("android") > -1


    /* INPUTMASK PUBLIC CLASS DEFINITION
     * ================================= */

    var Inputmask = function (element, options) {
        if (isAndroid) return // No support because caret positioning doesn't work on Android

        this.$element = $(element)
        this.options = $.extend({}, $.fn.inputmask.defaults, options)
        this.mask = String(options.mask)

        this.init()
        this.listen()

        this.checkVal() //Perform initial check for existing values
    }

    Inputmask.prototype = {

        init: function() {
            var defs = this.options.definitions
            var len = this.mask.length

            this.tests = []
            this.partialPosition = this.mask.length
            this.firstNonMaskPos = null

            $.each(this.mask.split(""), $.proxy(function(i, c) {
                if (c == '?') {
                    len--
                    this.partialPosition = i
                } else if (defs[c]) {
                    this.tests.push(new RegExp(defs[c]))
                    if(this.firstNonMaskPos === null)
                        this.firstNonMaskPos =  this.tests.length - 1
                } else {
                    this.tests.push(null)
                }
            }, this))

            this.buffer = $.map(this.mask.split(""), $.proxy(function(c, i) {
                if (c != '?') return defs[c] ? this.options.placeholder : c
            }, this))

            this.focusText = this.$element.val()

            this.$element.data("rawMaskFn", $.proxy(function() {
                return $.map(this.buffer, function(c, i) {
                    return this.tests[i] && c != this.options.placeholder ? c : null
                }).join('')
            }, this))
        },

        listen: function() {
            if (this.$element.attr("readonly")) return

            var pasteEventName = (navigator.userAgent.match(/msie/i) ? 'paste' : 'input') + ".mask"

            this.$element
                .on("unmask", $.proxy(this.unmask, this))

                .on("focus.mask", $.proxy(this.focusEvent, this))
                .on("blur.mask", $.proxy(this.blurEvent, this))

                .on("keydown.mask", $.proxy(this.keydownEvent, this))
                .on("keypress.mask", $.proxy(this.keypressEvent, this))

                .on(pasteEventName, $.proxy(this.pasteEvent, this))
        },

        //Helper Function for Caret positioning
        caret: function(begin, end) {
            if (this.$element.length === 0) return
            if (typeof begin == 'number') {
                end = (typeof end == 'number') ? end : begin
                return this.$element.each(function() {
                    if (this.setSelectionRange) {
                        this.setSelectionRange(begin, end)
                    } else if (this.createTextRange) {
                        var range = this.createTextRange()
                        range.collapse(true)
                        range.moveEnd('character', end)
                        range.moveStart('character', begin)
                        range.select()
                    }
                })
            } else {
                if (this.$element[0].setSelectionRange) {
                    begin = this.$element[0].selectionStart
                    end = this.$element[0].selectionEnd
                } else if (document.selection && document.selection.createRange) {
                    var range = document.selection.createRange()
                    begin = 0 - range.duplicate().moveStart('character', -100000)
                    end = begin + range.text.length
                }
                return {
                    begin: begin,
                    end: end
                }
            }
        },

        seekNext: function(pos) {
            var len = this.mask.length
            while (++pos <= len && !this.tests[pos]);

            return pos
        },

        seekPrev: function(pos) {
            while (--pos >= 0 && !this.tests[pos]);

            return pos
        },

        shiftL: function(begin,end) {
            var len = this.mask.length

            if(begin<0) return

            for (var i = begin,j = this.seekNext(end); i < len; i++) {
                if (this.tests[i]) {
                    if (j < len && this.tests[i].test(this.buffer[j])) {
                        this.buffer[i] = this.buffer[j]
                        this.buffer[j] = this.options.placeholder
                    } else
                        break
                    j = this.seekNext(j)
                }
            }
            this.writeBuffer()
            this.caret(Math.max(this.firstNonMaskPos, begin))
        },

        shiftR: function(pos) {
            var len = this.mask.length

            for (var i = pos, c = this.options.placeholder; i < len; i++) {
                if (this.tests[i]) {
                    var j = this.seekNext(i)
                    var t = this.buffer[i]
                    this.buffer[i] = c
                    if (j < len && this.tests[j].test(t))
                        c = t
                    else
                        break
                }
            }
        },

        unmask: function() {
            this.$element
                .unbind(".mask")
                .removeData("inputmask")
        },

        focusEvent: function() {
            this.focusText = this.$element.val()
            var len = this.mask.length
            var pos = this.checkVal()
            this.writeBuffer()

            var that = this
            var moveCaret = function() {
                if (pos == len)
                    that.caret(0, pos)
                else
                    that.caret(pos)
            }

            if ($.browser.msie)
                moveCaret()
            else
                setTimeout(moveCaret, 0)
        },

        blurEvent: function() {
            this.checkVal()
            if (this.$element.val() != this.focusText)
                this.$element.trigger('change')
        },

        keydownEvent: function(e) {
            var k=e.which

            //backspace, delete, and escape get special treatment
            if (k == 8 || k == 46 || (isIphone && k == 127)) {
                var pos = this.caret(),
                    begin = pos.begin,
                    end = pos.end

                if (end-begin === 0) {
                    begin = k!=46 ? this.seekPrev(begin) : (end=this.seekNext(begin-1))
                    end = k==46 ? this.seekNext(end) : end
                }
                this.clearBuffer(begin, end)
                this.shiftL(begin,end-1)

                return false
            } else if (k == 27) {//escape
                this.$element.val(this.focusText)
                this.caret(0, this.checkVal())
                return false
            }
        },

        keypressEvent: function(e) {
            var len = this.mask.length

            var k = e.which,
                pos = this.caret()

            if (e.ctrlKey || e.altKey || e.metaKey || k<32)  {//Ignore
                return true
            } else if (k) {
                if (pos.end - pos.begin !== 0) {
                    this.clearBuffer(pos.begin, pos.end)
                    this.shiftL(pos.begin, pos.end-1)
                }

                var p = this.seekNext(pos.begin - 1)
                if (p < len) {
                    var c = String.fromCharCode(k)
                    if (this.tests[p].test(c)) {
                        this.shiftR(p)
                        this.buffer[p] = c
                        this.writeBuffer()
                        var next = this.seekNext(p)
                        this.caret(next)
                    }
                }
                return false
            }
        },

        pasteEvent: function() {
            var that = this

            setTimeout(function() {
                that.caret(that.checkVal(true))
            }, 0)
        },

        clearBuffer: function(start, end) {
            var len = this.mask.length

            for (var i = start; i < end && i < len; i++) {
                if (this.tests[i])
                    this.buffer[i] = this.options.placeholder
            }
        },

        writeBuffer: function() {
            return this.$element.val(this.buffer.join('')).val()
        },

        checkVal: function(allow) {
            var len = this.mask.length
            //try to place characters where they belong
            var test = this.$element.val()
            var lastMatch = -1

            for (var i = 0, pos = 0; i < len; i++) {
                if (this.tests[i]) {
                    this.buffer[i] = this.options.placeholder
                    while (pos++ < test.length) {
                        var c = test.charAt(pos - 1)
                        if (this.tests[i].test(c)) {
                            this.buffer[i] = c
                            lastMatch = i
                            break
                        }
                    }
                    if (pos > test.length)
                        break
                } else if (this.buffer[i] == test.charAt(pos) && i != this.partialPosition) {
                    pos++
                    lastMatch = i
                }
            }
            if (!allow && lastMatch + 1 < this.partialPosition) {
                this.$element.val("")
                this.clearBuffer(0, len)
            } else if (allow || lastMatch + 1 >= this.partialPosition) {
                this.writeBuffer()
                if (!allow) this.$element.val(this.$element.val().substring(0, lastMatch + 1))
            }
            return (this.partialPosition ? i : this.firstNonMaskPos)
        }
    }


    /* INPUTMASK PLUGIN DEFINITION
     * =========================== */

    $.fn.inputmask = function (options) {
        return this.each(function () {
            var $this = $(this)
                , data = $this.data('inputmask')
            if (!data) $this.data('inputmask', (data = new Inputmask(this, options)))
        })
    }

    $.fn.inputmask.defaults = {
        mask: "",
        placeholder: "_",
        definitions: {
            '9': "[0-9]",
            'a': "[A-Za-z]",
            '?': "[A-Za-z0-9]",
            '*': "."
        }
    }

    $.fn.inputmask.Constructor = Inputmask


    /* INPUTMASK DATA-API
     * ================== */

    $(document).on('focus.inputmask.data-api', '[data-mask]', function (e) {
        var $this = $(this)
        if ($this.data('inputmask')) return
        e.preventDefault()
        $this.inputmask($this.data())
    })

}(window.jQuery);
/* =========================================================
 * bootstrap-datepicker.js
 * Repo: https://github.com/eternicode/bootstrap-datepicker/
 * Demo: http://eternicode.github.io/bootstrap-datepicker/
 * Docs: http://bootstrap-datepicker.readthedocs.org/
 * Forked from http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Started by Stefan Petre; improvements by Andrew Rowls + contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

(function( $ ) {

    var $window = $(window);

    function UTCDate(){
        return new Date(Date.UTC.apply(Date, arguments));
    }
    function UTCToday(){
        var today = new Date();
        return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());
    }


    // Picker object

    var Datepicker = function(element, options) {
        var that = this;

        this._process_options(options);

        this.element = $(element);
        this.isInline = false;
        this.isInput = this.element.is('input');
        this.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;
        this.hasInput = this.component && this.element.find('input').length;
        if(this.component && this.component.length === 0)
            this.component = false;

        this.picker = $(DPGlobal.template);
        this._buildEvents();
        this._attachEvents();

        if(this.isInline) {
            this.picker.addClass('datepicker-inline').appendTo(this.element);
        } else {
            this.picker.addClass('datepicker-dropdown dropdown-menu');
        }

        if (this.o.rtl){
            this.picker.addClass('datepicker-rtl');
            this.picker.find('.prev i, .next i')
                .toggleClass('icon-arrow-left icon-arrow-right');
        }


        this.viewMode = this.o.startView;

        if (this.o.calendarWeeks)
            this.picker.find('tfoot th.today')
                .attr('colspan', function(i, val){
                    return parseInt(val) + 1;
                });

        this._allow_update = false;

        this.setStartDate(this._o.startDate);
        this.setEndDate(this._o.endDate);
        this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);

        this.fillDow();
        this.fillMonths();

        this._allow_update = true;

        this.update();
        this.showMode();

        if(this.isInline) {
            this.show();
        }
    };

    Datepicker.prototype = {
        constructor: Datepicker,

        _process_options: function(opts){
            // Store raw options for reference
            this._o = $.extend({}, this._o, opts);
            // Processed options
            var o = this.o = $.extend({}, this._o);

            // Check if "de-DE" style date is available, if not language should
            // fallback to 2 letter code eg "de"
            var lang = o.language;
            if (!dates[lang]) {
                lang = lang.split('-')[0];
                if (!dates[lang])
                    lang = defaults.language;
            }
            o.language = lang;

            switch(o.startView){
                case 2:
                case 'decade':
                    o.startView = 2;
                    break;
                case 1:
                case 'year':
                    o.startView = 1;
                    break;
                default:
                    o.startView = 0;
            }

            switch (o.minViewMode) {
                case 1:
                case 'months':
                    o.minViewMode = 1;
                    break;
                case 2:
                case 'years':
                    o.minViewMode = 2;
                    break;
                default:
                    o.minViewMode = 0;
            }

            o.startView = Math.max(o.startView, o.minViewMode);

            o.weekStart %= 7;
            o.weekEnd = ((o.weekStart + 6) % 7);

            var format = DPGlobal.parseFormat(o.format);
            if (o.startDate !== -Infinity) {
                if (!!o.startDate) {
                    if (o.startDate instanceof Date)
                        o.startDate = this._local_to_utc(this._zero_time(o.startDate));
                    else
                        o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);
                } else {
                    o.startDate = -Infinity;
                }
            }
            if (o.endDate !== Infinity) {
                if (!!o.endDate) {
                    if (o.endDate instanceof Date)
                        o.endDate = this._local_to_utc(this._zero_time(o.endDate));
                    else
                        o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);
                } else {
                    o.endDate = Infinity;
                }
            }

            o.daysOfWeekDisabled = o.daysOfWeekDisabled||[];
            if (!$.isArray(o.daysOfWeekDisabled))
                o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);
            o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {
                return parseInt(d, 10);
            });

            var plc = String(o.orientation).toLowerCase().split(/\s+/g),
                _plc = o.orientation.toLowerCase();
            plc = $.grep(plc, function(word){
                return (/^auto|left|right|top|bottom$/).test(word);
            });
            o.orientation = {x: 'auto', y: 'auto'};
            if (!_plc || _plc === 'auto')
                ; // no action
            else if (plc.length === 1){
                switch(plc[0]){
                    case 'top':
                    case 'bottom':
                        o.orientation.y = plc[0];
                        break;
                    case 'left':
                    case 'right':
                        o.orientation.x = plc[0];
                        break;
                }
            }
            else {
                _plc = $.grep(plc, function(word){
                    return (/^left|right$/).test(word);
                });
                o.orientation.x = _plc[0] || 'auto';

                _plc = $.grep(plc, function(word){
                    return (/^top|bottom$/).test(word);
                });
                o.orientation.y = _plc[0] || 'auto';
            }
        },
        _events: [],
        _secondaryEvents: [],
        _applyEvents: function(evs){
            for (var i=0, el, ev; i<evs.length; i++){
                el = evs[i][0];
                ev = evs[i][1];
                el.on(ev);
            }
        },
        _unapplyEvents: function(evs){
            for (var i=0, el, ev; i<evs.length; i++){
                el = evs[i][0];
                ev = evs[i][1];
                el.off(ev);
            }
        },
        _buildEvents: function(){
            if (this.isInput) { // single input
                this._events = [
                    [this.element, {
                        focus: $.proxy(this.show, this),
                        keyup: $.proxy(this.update, this),
                        keydown: $.proxy(this.keydown, this)
                    }]
                ];
            }
            else if (this.component && this.hasInput){ // component: input + button
                this._events = [
                    // For components that are not readonly, allow keyboard nav
                    [this.element.find('input'), {
                        focus: $.proxy(this.show, this),
                        keyup: $.proxy(this.update, this),
                        keydown: $.proxy(this.keydown, this)
                    }],
                    [this.component, {
                        click: $.proxy(this.show, this)
                    }]
                ];
            }
            else if (this.element.is('div')) {  // inline datepicker
                this.isInline = true;
            }
            else {
                this._events = [
                    [this.element, {
                        click: $.proxy(this.show, this)
                    }]
                ];
            }

            this._secondaryEvents = [
                [this.picker, {
                    click: $.proxy(this.click, this)
                }],
                [$(window), {
                    resize: $.proxy(this.place, this)
                }],
                [$(document), {
                    'mousedown touchstart': $.proxy(function (e) {
                        // Clicked outside the datepicker, hide it
                        if (!(
                            this.element.is(e.target) ||
                            this.element.find(e.target).length ||
                            this.picker.is(e.target) ||
                            this.picker.find(e.target).length
                            )) {
                            this.hide();
                        }
                    }, this)
                }]
            ];
        },
        _attachEvents: function(){
            this._detachEvents();
            this._applyEvents(this._events);
        },
        _detachEvents: function(){
            this._unapplyEvents(this._events);
        },
        _attachSecondaryEvents: function(){
            this._detachSecondaryEvents();
            this._applyEvents(this._secondaryEvents);
        },
        _detachSecondaryEvents: function(){
            this._unapplyEvents(this._secondaryEvents);
        },
        _trigger: function(event, altdate){
            var date = altdate || this.date,
                local_date = this._utc_to_local(date);

            this.element.trigger({
                type: event,
                date: local_date,
                format: $.proxy(function(altformat){
                    var format = altformat || this.o.format;
                    return DPGlobal.formatDate(date, format, this.o.language);
                }, this)
            });
        },

        show: function(e) {
            if (!this.isInline)
                this.picker.appendTo('body');
            this.picker.show();
            this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
            this.place();
            this._attachSecondaryEvents();
            if (e) {
                e.preventDefault();
            }
            this._trigger('show');
        },

        hide: function(e){
            if(this.isInline) return;
            if (!this.picker.is(':visible')) return;
            this.picker.hide().detach();
            this._detachSecondaryEvents();
            this.viewMode = this.o.startView;
            this.showMode();

            if (
                this.o.forceParse &&
                (
                    this.isInput && this.element.val() ||
                    this.hasInput && this.element.find('input').val()
                    )
                )
                this.setValue();
            this._trigger('hide');
        },

        remove: function() {
            this.hide();
            this._detachEvents();
            this._detachSecondaryEvents();
            this.picker.remove();
            delete this.element.data().datepicker;
            if (!this.isInput) {
                delete this.element.data().date;
            }
        },

        _utc_to_local: function(utc){
            return new Date(utc.getTime() + (utc.getTimezoneOffset()*60000));
        },
        _local_to_utc: function(local){
            return new Date(local.getTime() - (local.getTimezoneOffset()*60000));
        },
        _zero_time: function(local){
            return new Date(local.getFullYear(), local.getMonth(), local.getDate());
        },
        _zero_utc_time: function(utc){
            return new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()));
        },

        getDate: function() {
            return this._utc_to_local(this.getUTCDate());
        },

        getUTCDate: function() {
            return this.date;
        },

        setDate: function(d) {
            this.setUTCDate(this._local_to_utc(d));
        },

        setUTCDate: function(d) {
            this.date = d;
            this.setValue();
        },

        setValue: function() {
            var formatted = this.getFormattedDate();
            if (!this.isInput) {
                if (this.component){
                    this.element.find('input').val(formatted).change();
                }
            } else {
                this.element.val(formatted).change();
            }
        },

        getFormattedDate: function(format) {
            if (format === undefined)
                format = this.o.format;
            return DPGlobal.formatDate(this.date, format, this.o.language);
        },

        setStartDate: function(startDate){
            this._process_options({startDate: startDate});
            this.update();
            this.updateNavArrows();
        },

        setEndDate: function(endDate){
            this._process_options({endDate: endDate});
            this.update();
            this.updateNavArrows();
        },

        setDaysOfWeekDisabled: function(daysOfWeekDisabled){
            this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});
            this.update();
            this.updateNavArrows();
        },

        place: function(){
            if(this.isInline) return;
            var calendarWidth = this.picker.outerWidth(),
                calendarHeight = this.picker.outerHeight(),
                visualPadding = 10,
                windowWidth = $window.width(),
                windowHeight = $window.height(),
                scrollTop = $window.scrollTop();

            var zIndex = parseInt(this.element.parents().filter(function() {
                return $(this).css('z-index') != 'auto';
            }).first().css('z-index'))+10;
            var offset = this.component ? this.component.parent().offset() : this.element.offset();
            var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
            var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
            var left = offset.left,
                top = offset.top;

            this.picker.removeClass(
                    'datepicker-orient-top datepicker-orient-bottom '+
                    'datepicker-orient-right datepicker-orient-left'
            );

            if (this.o.orientation.x !== 'auto') {
                this.picker.addClass('datepicker-orient-' + this.o.orientation.x);
                if (this.o.orientation.x === 'right')
                    left -= calendarWidth - width;
            }
            // auto x orientation is best-placement: if it crosses a window
            // edge, fudge it sideways
            else {
                // Default to left
                this.picker.addClass('datepicker-orient-left');
                if (offset.left < 0)
                    left -= offset.left - visualPadding;
                else if (offset.left + calendarWidth > windowWidth)
                    left = windowWidth - calendarWidth - visualPadding;
            }

            // auto y orientation is best-situation: top or bottom, no fudging,
            // decision based on which shows more of the calendar
            var yorient = this.o.orientation.y,
                top_overflow, bottom_overflow;
            if (yorient === 'auto') {
                top_overflow = -scrollTop + offset.top - calendarHeight;
                bottom_overflow = scrollTop + windowHeight - (offset.top + height + calendarHeight);
                if (Math.max(top_overflow, bottom_overflow) === bottom_overflow)
                    yorient = 'top';
                else
                    yorient = 'bottom';
            }
            this.picker.addClass('datepicker-orient-' + yorient);
            if (yorient === 'top')
                top += height;
            else
                top -= calendarHeight + parseInt(this.picker.css('padding-top'));

            this.picker.css({
                top: top,
                left: left,
                zIndex: zIndex
            });
        },

        _allow_update: true,
        update: function(){
            if (!this._allow_update) return;

            var oldDate = new Date(this.date),
                date, fromArgs = false;
            if(arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
                date = arguments[0];
                if (date instanceof Date)
                    date = this._local_to_utc(date);
                fromArgs = true;
            } else {
                date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
                delete this.element.data().date;
            }

            this.date = DPGlobal.parseDate(date, this.o.format, this.o.language);

            if (fromArgs) {
                // setting date by clicking
                this.setValue();
            } else if (date) {
                // setting date by typing
                if (oldDate.getTime() !== this.date.getTime())
                    this._trigger('changeDate');
            } else {
                // clearing date
                this._trigger('clearDate');
            }

            if (this.date < this.o.startDate) {
                this.viewDate = new Date(this.o.startDate);
                this.date = new Date(this.o.startDate);
            } else if (this.date > this.o.endDate) {
                this.viewDate = new Date(this.o.endDate);
                this.date = new Date(this.o.endDate);
            } else {
                this.viewDate = new Date(this.date);
                this.date = new Date(this.date);
            }
            this.fill();
        },

        fillDow: function(){
            var dowCnt = this.o.weekStart,
                html = '<tr>';
            if(this.o.calendarWeeks){
                var cell = '<th class="cw">&nbsp;</th>';
                html += cell;
                this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);
            }
            while (dowCnt < this.o.weekStart + 7) {
                html += '<th class="dow">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';
            }
            html += '</tr>';
            this.picker.find('.datepicker-days thead').append(html);
        },

        fillMonths: function(){
            var html = '',
                i = 0;
            while (i < 12) {
                html += '<span class="month">'+dates[this.o.language].monthsShort[i++]+'</span>';
            }
            this.picker.find('.datepicker-months td').html(html);
        },

        setRange: function(range){
            if (!range || !range.length)
                delete this.range;
            else
                this.range = $.map(range, function(d){ return d.valueOf(); });
            this.fill();
        },

        getClassNames: function(date){
            var cls = [],
                year = this.viewDate.getUTCFullYear(),
                month = this.viewDate.getUTCMonth(),
                currentDate = this.date.valueOf(),
                today = new Date();
            if (date.getUTCFullYear() < year || (date.getUTCFullYear() == year && date.getUTCMonth() < month)) {
                cls.push('old');
            } else if (date.getUTCFullYear() > year || (date.getUTCFullYear() == year && date.getUTCMonth() > month)) {
                cls.push('new');
            }
            // Compare internal UTC date with local today, not UTC today
            if (this.o.todayHighlight &&
                date.getUTCFullYear() == today.getFullYear() &&
                date.getUTCMonth() == today.getMonth() &&
                date.getUTCDate() == today.getDate()) {
                cls.push('today');
            }
            if (date.valueOf() == currentDate) {
                cls.push('active');
            }
            if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||
                $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {
                cls.push('disabled');
            }
            if (this.range){
                if (date > this.range[0] && date < this.range[this.range.length-1]){
                    cls.push('range');
                }
                if ($.inArray(date.valueOf(), this.range) != -1){
                    cls.push('selected');
                }
            }
            return cls;
        },

        fill: function() {
            var d = new Date(this.viewDate),
                year = d.getUTCFullYear(),
                month = d.getUTCMonth(),
                startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
                startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
                endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
                endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
                currentDate = this.date && this.date.valueOf(),
                tooltip;
            this.picker.find('.datepicker-days thead th.datepicker-switch')
                .text(dates[this.o.language].months[month]+' '+year);
            this.picker.find('tfoot th.today')
                .text(dates[this.o.language].today)
                .toggle(this.o.todayBtn !== false);
            this.picker.find('tfoot th.clear')
                .text(dates[this.o.language].clear)
                .toggle(this.o.clearBtn !== false);
            this.updateNavArrows();
            this.fillMonths();
            var prevMonth = UTCDate(year, month-1, 28,0,0,0,0),
                day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
            prevMonth.setUTCDate(day);
            prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);
            var nextMonth = new Date(prevMonth);
            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
            nextMonth = nextMonth.valueOf();
            var html = [];
            var clsName;
            while(prevMonth.valueOf() < nextMonth) {
                if (prevMonth.getUTCDay() == this.o.weekStart) {
                    html.push('<tr>');
                    if(this.o.calendarWeeks){
                        // ISO 8601: First week contains first thursday.
                        // ISO also states week starts on Monday, but we can be more abstract here.
                        var
                        // Start of current week: based on weekstart/current date
                            ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),
                        // Thursday of this week
                            th = new Date(+ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),
                        // First Thursday of year, year from thursday
                            yth = new Date(+(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),
                        // Calendar week: ms between thursdays, div ms per day, div 7 days
                            calWeek =  (th - yth) / 864e5 / 7 + 1;
                        html.push('<td class="cw">'+ calWeek +'</td>');

                    }
                }
                clsName = this.getClassNames(prevMonth);
                clsName.push('day');

                if (this.o.beforeShowDay !== $.noop){
                    var before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
                    if (before === undefined)
                        before = {};
                    else if (typeof(before) === 'boolean')
                        before = {enabled: before};
                    else if (typeof(before) === 'string')
                        before = {classes: before};
                    if (before.enabled === false)
                        clsName.push('disabled');
                    if (before.classes)
                        clsName = clsName.concat(before.classes.split(/\s+/));
                    if (before.tooltip)
                        tooltip = before.tooltip;
                }

                clsName = $.unique(clsName);
                html.push('<td class="'+clsName.join(' ')+'"' + (tooltip ? ' title="'+tooltip+'"' : '') + '>'+prevMonth.getUTCDate() + '</td>');
                if (prevMonth.getUTCDay() == this.o.weekEnd) {
                    html.push('</tr>');
                }
                prevMonth.setUTCDate(prevMonth.getUTCDate()+1);
            }
            this.picker.find('.datepicker-days tbody').empty().append(html.join(''));
            var currentYear = this.date && this.date.getUTCFullYear();

            var months = this.picker.find('.datepicker-months')
                .find('th:eq(1)')
                .text(year)
                .end()
                .find('span').removeClass('active');
            if (currentYear && currentYear == year) {
                months.eq(this.date.getUTCMonth()).addClass('active');
            }
            if (year < startYear || year > endYear) {
                months.addClass('disabled');
            }
            if (year == startYear) {
                months.slice(0, startMonth).addClass('disabled');
            }
            if (year == endYear) {
                months.slice(endMonth+1).addClass('disabled');
            }

            html = '';
            year = parseInt(year/10, 10) * 10;
            var yearCont = this.picker.find('.datepicker-years')
                .find('th:eq(1)')
                .text(year + '-' + (year + 9))
                .end()
                .find('td');
            year -= 1;
            for (var i = -1; i < 11; i++) {
                html += '<span class="year'+(i == -1 ? ' old' : i == 10 ? ' new' : '')+(currentYear == year ? ' active' : '')+(year < startYear || year > endYear ? ' disabled' : '')+'">'+year+'</span>';
                year += 1;
            }
            yearCont.html(html);
        },

        updateNavArrows: function() {
            if (!this._allow_update) return;

            var d = new Date(this.viewDate),
                year = d.getUTCFullYear(),
                month = d.getUTCMonth();
            switch (this.viewMode) {
                case 0:
                    if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {
                        this.picker.find('.prev').css({visibility: 'hidden'});
                    } else {
                        this.picker.find('.prev').css({visibility: 'visible'});
                    }
                    if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {
                        this.picker.find('.next').css({visibility: 'hidden'});
                    } else {
                        this.picker.find('.next').css({visibility: 'visible'});
                    }
                    break;
                case 1:
                case 2:
                    if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()) {
                        this.picker.find('.prev').css({visibility: 'hidden'});
                    } else {
                        this.picker.find('.prev').css({visibility: 'visible'});
                    }
                    if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {
                        this.picker.find('.next').css({visibility: 'hidden'});
                    } else {
                        this.picker.find('.next').css({visibility: 'visible'});
                    }
                    break;
            }
        },

        click: function(e) {
            e.preventDefault();
            var target = $(e.target).closest('span, td, th');
            if (target.length == 1) {
                switch(target[0].nodeName.toLowerCase()) {
                    case 'th':
                        switch(target[0].className) {
                            case 'datepicker-switch':
                                this.showMode(1);
                                break;
                            case 'prev':
                            case 'next':
                                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);
                                switch(this.viewMode){
                                    case 0:
                                        this.viewDate = this.moveMonth(this.viewDate, dir);
                                        this._trigger('changeMonth', this.viewDate);
                                        break;
                                    case 1:
                                    case 2:
                                        this.viewDate = this.moveYear(this.viewDate, dir);
                                        if (this.viewMode === 1)
                                            this._trigger('changeYear', this.viewDate);
                                        break;
                                }
                                this.fill();
                                break;
                            case 'today':
                                var date = new Date();
                                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);

                                this.showMode(-2);
                                var which = this.o.todayBtn == 'linked' ? null : 'view';
                                this._setDate(date, which);
                                break;
                            case 'clear':
                                var element;
                                if (this.isInput)
                                    element = this.element;
                                else if (this.component)
                                    element = this.element.find('input');
                                if (element)
                                    element.val("").change();
                                this._trigger('changeDate');
                                this.update();
                                if (this.o.autoclose)
                                    this.hide();
                                break;
                        }
                        break;
                    case 'span':
                        if (!target.is('.disabled')) {
                            this.viewDate.setUTCDate(1);
                            if (target.is('.month')) {
                                var day = 1;
                                var month = target.parent().find('span').index(target);
                                var year = this.viewDate.getUTCFullYear();
                                this.viewDate.setUTCMonth(month);
                                this._trigger('changeMonth', this.viewDate);
                                if (this.o.minViewMode === 1) {
                                    this._setDate(UTCDate(year, month, day,0,0,0,0));
                                }
                            } else {
                                var year = parseInt(target.text(), 10)||0;
                                var day = 1;
                                var month = 0;
                                this.viewDate.setUTCFullYear(year);
                                this._trigger('changeYear', this.viewDate);
                                if (this.o.minViewMode === 2) {
                                    this._setDate(UTCDate(year, month, day,0,0,0,0));
                                }
                            }
                            this.showMode(-1);
                            this.fill();
                        }
                        break;
                    case 'td':
                        if (target.is('.day') && !target.is('.disabled')){
                            var day = parseInt(target.text(), 10)||1;
                            var year = this.viewDate.getUTCFullYear(),
                                month = this.viewDate.getUTCMonth();
                            if (target.is('.old')) {
                                if (month === 0) {
                                    month = 11;
                                    year -= 1;
                                } else {
                                    month -= 1;
                                }
                            } else if (target.is('.new')) {
                                if (month == 11) {
                                    month = 0;
                                    year += 1;
                                } else {
                                    month += 1;
                                }
                            }
                            this._setDate(UTCDate(year, month, day,0,0,0,0));
                        }
                        break;
                }
            }
        },

        _setDate: function(date, which){
            if (!which || which == 'date')
                this.date = new Date(date);
            if (!which || which  == 'view')
                this.viewDate = new Date(date);
            this.fill();
            this.setValue();
            this._trigger('changeDate');
            var element;
            if (this.isInput) {
                element = this.element;
            } else if (this.component){
                element = this.element.find('input');
            }
            if (element) {
                element.change();
            }
            if (this.o.autoclose && (!which || which == 'date')) {
                this.hide();
            }
        },

        moveMonth: function(date, dir){
            if (!dir) return date;
            var new_date = new Date(date.valueOf()),
                day = new_date.getUTCDate(),
                month = new_date.getUTCMonth(),
                mag = Math.abs(dir),
                new_month, test;
            dir = dir > 0 ? 1 : -1;
            if (mag == 1){
                test = dir == -1
                    // If going back one month, make sure month is not current month
                    // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
                    ? function(){ return new_date.getUTCMonth() == month; }
                    // If going forward one month, make sure month is as expected
                    // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
                    : function(){ return new_date.getUTCMonth() != new_month; };
                new_month = month + dir;
                new_date.setUTCMonth(new_month);
                // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
                if (new_month < 0 || new_month > 11)
                    new_month = (new_month + 12) % 12;
            } else {
                // For magnitudes >1, move one month at a time...
                for (var i=0; i<mag; i++)
                    // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
                    new_date = this.moveMonth(new_date, dir);
                // ...then reset the day, keeping it in the new month
                new_month = new_date.getUTCMonth();
                new_date.setUTCDate(day);
                test = function(){ return new_month != new_date.getUTCMonth(); };
            }
            // Common date-resetting loop -- if date is beyond end of month, make it
            // end of month
            while (test()){
                new_date.setUTCDate(--day);
                new_date.setUTCMonth(new_month);
            }
            return new_date;
        },

        moveYear: function(date, dir){
            return this.moveMonth(date, dir*12);
        },

        dateWithinRange: function(date){
            return date >= this.o.startDate && date <= this.o.endDate;
        },

        keydown: function(e){
            if (this.picker.is(':not(:visible)')){
                if (e.keyCode == 27) // allow escape to hide and re-show picker
                    this.show();
                return;
            }
            var dateChanged = false,
                dir, day, month,
                newDate, newViewDate;
            switch(e.keyCode){
                case 27: // escape
                    this.hide();
                    e.preventDefault();
                    break;
                case 37: // left
                case 39: // right
                    if (!this.o.keyboardNavigation) break;
                    dir = e.keyCode == 37 ? -1 : 1;
                    if (e.ctrlKey){
                        newDate = this.moveYear(this.date, dir);
                        newViewDate = this.moveYear(this.viewDate, dir);
                        this._trigger('changeYear', this.viewDate);
                    } else if (e.shiftKey){
                        newDate = this.moveMonth(this.date, dir);
                        newViewDate = this.moveMonth(this.viewDate, dir);
                        this._trigger('changeMonth', this.viewDate);
                    } else {
                        newDate = new Date(this.date);
                        newDate.setUTCDate(this.date.getUTCDate() + dir);
                        newViewDate = new Date(this.viewDate);
                        newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);
                    }
                    if (this.dateWithinRange(newDate)){
                        this.date = newDate;
                        this.viewDate = newViewDate;
                        this.setValue();
                        this.update();
                        e.preventDefault();
                        dateChanged = true;
                    }
                    break;
                case 38: // up
                case 40: // down
                    if (!this.o.keyboardNavigation) break;
                    dir = e.keyCode == 38 ? -1 : 1;
                    if (e.ctrlKey){
                        newDate = this.moveYear(this.date, dir);
                        newViewDate = this.moveYear(this.viewDate, dir);
                        this._trigger('changeYear', this.viewDate);
                    } else if (e.shiftKey){
                        newDate = this.moveMonth(this.date, dir);
                        newViewDate = this.moveMonth(this.viewDate, dir);
                        this._trigger('changeMonth', this.viewDate);
                    } else {
                        newDate = new Date(this.date);
                        newDate.setUTCDate(this.date.getUTCDate() + dir * 7);
                        newViewDate = new Date(this.viewDate);
                        newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);
                    }
                    if (this.dateWithinRange(newDate)){
                        this.date = newDate;
                        this.viewDate = newViewDate;
                        this.setValue();
                        this.update();
                        e.preventDefault();
                        dateChanged = true;
                    }
                    break;
                case 13: // enter
                    this.hide();
                    e.preventDefault();
                    break;
                case 9: // tab
                    this.hide();
                    break;
            }
            if (dateChanged){
                this._trigger('changeDate');
                var element;
                if (this.isInput) {
                    element = this.element;
                } else if (this.component){
                    element = this.element.find('input');
                }
                if (element) {
                    element.change();
                }
            }
        },

        showMode: function(dir) {
            if (dir) {
                this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));
            }
            /*
             vitalets: fixing bug of very special conditions:
             jquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.
             Method show() does not set display css correctly and datepicker is not shown.
             Changed to .css('display', 'block') solve the problem.
             See https://github.com/vitalets/x-editable/issues/37

             In jquery 1.7.2+ everything works fine.
             */
            //this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
            this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
            this.updateNavArrows();
        }
    };

    var DateRangePicker = function(element, options){
        this.element = $(element);
        this.inputs = $.map(options.inputs, function(i){ return i.jquery ? i[0] : i; });
        delete options.inputs;

        $(this.inputs)
            .datepicker(options)
            .bind('changeDate', $.proxy(this.dateUpdated, this));

        this.pickers = $.map(this.inputs, function(i){ return $(i).data('datepicker'); });
        this.updateDates();
    };
    DateRangePicker.prototype = {
        updateDates: function(){
            this.dates = $.map(this.pickers, function(i){ return i.date; });
            this.updateRanges();
        },
        updateRanges: function(){
            var range = $.map(this.dates, function(d){ return d.valueOf(); });
            $.each(this.pickers, function(i, p){
                p.setRange(range);
            });
        },
        dateUpdated: function(e){
            var dp = $(e.target).data('datepicker'),
                new_date = dp.getUTCDate(),
                i = $.inArray(e.target, this.inputs),
                l = this.inputs.length;
            if (i == -1) return;

            if (new_date < this.dates[i]){
                // Date being moved earlier/left
                while (i>=0 && new_date < this.dates[i]){
                    this.pickers[i--].setUTCDate(new_date);
                }
            }
            else if (new_date > this.dates[i]){
                // Date being moved later/right
                while (i<l && new_date > this.dates[i]){
                    this.pickers[i++].setUTCDate(new_date);
                }
            }
            this.updateDates();
        },
        remove: function(){
            $.map(this.pickers, function(p){ p.remove(); });
            delete this.element.data().datepicker;
        }
    };

    function opts_from_el(el, prefix){
        // Derive options from element data-attrs
        var data = $(el).data(),
            out = {}, inkey,
            replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'),
            prefix = new RegExp('^' + prefix.toLowerCase());
        for (var key in data)
            if (prefix.test(key)){
                inkey = key.replace(replace, function(_,a){ return a.toLowerCase(); });
                out[inkey] = data[key];
            }
        return out;
    }

    function opts_from_locale(lang){
        // Derive options from locale plugins
        var out = {};
        // Check if "de-DE" style date is available, if not language should
        // fallback to 2 letter code eg "de"
        if (!dates[lang]) {
            lang = lang.split('-')[0]
            if (!dates[lang])
                return;
        }
        var d = dates[lang];
        $.each(locale_opts, function(i,k){
            if (k in d)
                out[k] = d[k];
        });
        return out;
    }

    var old = $.fn.datepicker;
    $.fn.datepicker = function ( option ) {
        var args = Array.apply(null, arguments);
        args.shift();
        var internal_return,
            this_return;
        this.each(function () {
            var $this = $(this),
                data = $this.data('datepicker'),
                options = typeof option == 'object' && option;
            if (!data) {
                var elopts = opts_from_el(this, 'date'),
                // Preliminary otions
                    xopts = $.extend({}, defaults, elopts, options),
                    locopts = opts_from_locale(xopts.language),
                // Options priority: js args, data-attrs, locales, defaults
                    opts = $.extend({}, defaults, locopts, elopts, options);
                if ($this.is('.input-daterange') || opts.inputs){
                    var ropts = {
                        inputs: opts.inputs || $this.find('input').toArray()
                    };
                    $this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));
                }
                else{
                    $this.data('datepicker', (data = new Datepicker(this, opts)));
                }
            }
            if (typeof option == 'string' && typeof data[option] == 'function') {
                internal_return = data[option].apply(data, args);
                if (internal_return !== undefined)
                    return false;
            }
        });
        if (internal_return !== undefined)
            return internal_return;
        else
            return this;
    };

    var defaults = $.fn.datepicker.defaults = {
        autoclose: false,
        beforeShowDay: $.noop,
        calendarWeeks: false,
        clearBtn: false,
        daysOfWeekDisabled: [],
        endDate: Infinity,
        forceParse: true,
        format: 'mm/dd/yyyy',
        keyboardNavigation: true,
        language: 'en',
        minViewMode: 0,
        orientation: "auto",
        rtl: false,
        startDate: -Infinity,
        startView: 0,
        todayBtn: false,
        todayHighlight: false,
        weekStart: 0
    };
    var locale_opts = $.fn.datepicker.locale_opts = [
        'format',
        'rtl',
        'weekStart'
    ];
    $.fn.datepicker.Constructor = Datepicker;
    var dates = $.fn.datepicker.dates = {
        en: {
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: "Today",
            clear: "Clear"
        }
    };

    var DPGlobal = {
        modes: [
            {
                clsName: 'days',
                navFnc: 'Month',
                navStep: 1
            },
            {
                clsName: 'months',
                navFnc: 'FullYear',
                navStep: 1
            },
            {
                clsName: 'years',
                navFnc: 'FullYear',
                navStep: 10
            }],
        isLeapYear: function (year) {
            return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
        },
        getDaysInMonth: function (year, month) {
            return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
        },
        validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
        nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
        parseFormat: function(format){
            // IE treats \0 as a string end in inputs (truncating the value),
            // so it's a bad format delimiter, anyway
            var separators = format.replace(this.validParts, '\0').split('\0'),
                parts = format.match(this.validParts);
            if (!separators || !separators.length || !parts || parts.length === 0){
                throw new Error("Invalid date format.");
            }
            return {separators: separators, parts: parts};
        },
        parseDate: function(date, format, language) {
            if (date instanceof Date) return date;
            if (typeof format === 'string')
                format = DPGlobal.parseFormat(format);
            if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)) {
                var part_re = /([\-+]\d+)([dmwy])/,
                    parts = date.match(/([\-+]\d+)([dmwy])/g),
                    part, dir;
                date = new Date();
                for (var i=0; i<parts.length; i++) {
                    part = part_re.exec(parts[i]);
                    dir = parseInt(part[1]);
                    switch(part[2]){
                        case 'd':
                            date.setUTCDate(date.getUTCDate() + dir);
                            break;
                        case 'm':
                            date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);
                            break;
                        case 'w':
                            date.setUTCDate(date.getUTCDate() + dir * 7);
                            break;
                        case 'y':
                            date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);
                            break;
                    }
                }
                return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);
            }
            var parts = date && date.match(this.nonpunctuation) || [],
                date = new Date(),
                parsed = {},
                setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
                setters_map = {
                    yyyy: function(d,v){ return d.setUTCFullYear(v); },
                    yy: function(d,v){ return d.setUTCFullYear(2000+v); },
                    m: function(d,v){
                        if (isNaN(d))
                            return d;
                        v -= 1;
                        while (v<0) v += 12;
                        v %= 12;
                        d.setUTCMonth(v);
                        while (d.getUTCMonth() != v)
                            d.setUTCDate(d.getUTCDate()-1);
                        return d;
                    },
                    d: function(d,v){ return d.setUTCDate(v); }
                },
                val, filtered, part;
            setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
            setters_map['dd'] = setters_map['d'];
            date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
            var fparts = format.parts.slice();
            // Remove noop parts
            if (parts.length != fparts.length) {
                fparts = $(fparts).filter(function(i,p){
                    return $.inArray(p, setters_order) !== -1;
                }).toArray();
            }
            // Process remainder
            if (parts.length == fparts.length) {
                for (var i=0, cnt = fparts.length; i < cnt; i++) {
                    val = parseInt(parts[i], 10);
                    part = fparts[i];
                    if (isNaN(val)) {
                        switch(part) {
                            case 'MM':
                                filtered = $(dates[language].months).filter(function(){
                                    var m = this.slice(0, parts[i].length),
                                        p = parts[i].slice(0, m.length);
                                    return m == p;
                                });
                                val = $.inArray(filtered[0], dates[language].months) + 1;
                                break;
                            case 'M':
                                filtered = $(dates[language].monthsShort).filter(function(){
                                    var m = this.slice(0, parts[i].length),
                                        p = parts[i].slice(0, m.length);
                                    return m == p;
                                });
                                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
                                break;
                        }
                    }
                    parsed[part] = val;
                }
                for (var i=0, _date, s; i<setters_order.length; i++){
                    s = setters_order[i];
                    if (s in parsed && !isNaN(parsed[s])){
                        _date = new Date(date);
                        setters_map[s](_date, parsed[s]);
                        if (!isNaN(_date))
                            date = _date;
                    }
                }
            }
            return date;
        },
        formatDate: function(date, format, language){
            if (typeof format === 'string')
                format = DPGlobal.parseFormat(format);
            var val = {
                d: date.getUTCDate(),
                D: dates[language].daysShort[date.getUTCDay()],
                DD: dates[language].days[date.getUTCDay()],
                m: date.getUTCMonth() + 1,
                M: dates[language].monthsShort[date.getUTCMonth()],
                MM: dates[language].months[date.getUTCMonth()],
                yy: date.getUTCFullYear().toString().substring(2),
                yyyy: date.getUTCFullYear()
            };
            val.dd = (val.d < 10 ? '0' : '') + val.d;
            val.mm = (val.m < 10 ? '0' : '') + val.m;
            var date = [],
                seps = $.extend([], format.separators);
            for (var i=0, cnt = format.parts.length; i <= cnt; i++) {
                if (seps.length)
                    date.push(seps.shift());
                date.push(val[format.parts[i]]);
            }
            return date.join('');
        },
        headTemplate: '<thead>'+
            '<tr>'+
            '<th class="prev">&laquo;</th>'+
            '<th colspan="5" class="datepicker-switch"></th>'+
            '<th class="next">&raquo;</th>'+
            '</tr>'+
            '</thead>',
        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
        footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
    };
    DPGlobal.template = '<div class="datepicker">'+
        '<div class="datepicker-days">'+
        '<table class=" table-condensed">'+
        DPGlobal.headTemplate+
        '<tbody></tbody>'+
        DPGlobal.footTemplate+
        '</table>'+
        '</div>'+
        '<div class="datepicker-months">'+
        '<table class="table-condensed">'+
        DPGlobal.headTemplate+
        DPGlobal.contTemplate+
        DPGlobal.footTemplate+
        '</table>'+
        '</div>'+
        '<div class="datepicker-years">'+
        '<table class="table-condensed">'+
        DPGlobal.headTemplate+
        DPGlobal.contTemplate+
        DPGlobal.footTemplate+
        '</table>'+
        '</div>'+
        '</div>';

    $.fn.datepicker.DPGlobal = DPGlobal;


    /* DATEPICKER NO CONFLICT
     * =================== */

    $.fn.datepicker.noConflict = function(){
        $.fn.datepicker = old;
        return this;
    };


    /* DATEPICKER DATA-API
     * ================== */

    $(document).on(
        'focus.datepicker.data-api click.datepicker.data-api',
        '[data-provide="datepicker"]',
        function(e){
            var $this = $(this);
            if ($this.data('datepicker')) return;
            e.preventDefault();
            // component click requires us to explicitly show it
            $this.datepicker('show');
        }
    );
    $(function(){
        $('[data-provide="datepicker-inline"]').datepicker();
    });

}( window.jQuery ));
/*!
 * jQuery Migrate - v1.2.1 - 2013-05-08
 * https://github.com/jquery/jquery-migrate
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors; Licensed MIT
 */
(function( jQuery, window, undefined ) {
// See http://bugs.jquery.com/ticket/13335
// "use strict";


    var warnedAbout = {};

// List of warnings already given; public read only
    jQuery.migrateWarnings = [];

// Set to true to prevent console output; migrateWarnings still maintained
// jQuery.migrateMute = false;

// Show a message on the console so devs know we're active
    if ( !jQuery.migrateMute && window.console && window.console.log ) {
        window.console.log("JQMIGRATE: Logging is active");
    }

// Set to false to disable traces that appear with warnings
    if ( jQuery.migrateTrace === undefined ) {
        jQuery.migrateTrace = true;
    }

// Forget any warnings we've already given; public
    jQuery.migrateReset = function() {
        warnedAbout = {};
        jQuery.migrateWarnings.length = 0;
    };

    function migrateWarn( msg) {
        var console = window.console;
        if ( !warnedAbout[ msg ] ) {
            warnedAbout[ msg ] = true;
            jQuery.migrateWarnings.push( msg );
            if ( console && console.warn && !jQuery.migrateMute ) {
                console.warn( "JQMIGRATE: " + msg );
                if ( jQuery.migrateTrace && console.trace ) {
                    console.trace();
                }
            }
        }
    }

    function migrateWarnProp( obj, prop, value, msg ) {
        if ( Object.defineProperty ) {
            // On ES5 browsers (non-oldIE), warn if the code tries to get prop;
            // allow property to be overwritten in case some other plugin wants it
            try {
                Object.defineProperty( obj, prop, {
                    configurable: true,
                    enumerable: true,
                    get: function() {
                        migrateWarn( msg );
                        return value;
                    },
                    set: function( newValue ) {
                        migrateWarn( msg );
                        value = newValue;
                    }
                });
                return;
            } catch( err ) {
                // IE8 is a dope about Object.defineProperty, can't warn there
            }
        }

        // Non-ES5 (or broken) browser; just set the property
        jQuery._definePropertyBroken = true;
        obj[ prop ] = value;
    }

    if ( document.compatMode === "BackCompat" ) {
        // jQuery has never supported or tested Quirks Mode
        migrateWarn( "jQuery is not compatible with Quirks Mode" );
    }


    var attrFn = jQuery( "<input/>", { size: 1 } ).attr("size") && jQuery.attrFn,
        oldAttr = jQuery.attr,
        valueAttrGet = jQuery.attrHooks.value && jQuery.attrHooks.value.get ||
            function() { return null; },
        valueAttrSet = jQuery.attrHooks.value && jQuery.attrHooks.value.set ||
            function() { return undefined; },
        rnoType = /^(?:input|button)$/i,
        rnoAttrNodeType = /^[238]$/,
        rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
        ruseDefault = /^(?:checked|selected)$/i;

// jQuery.attrFn
    migrateWarnProp( jQuery, "attrFn", attrFn || {}, "jQuery.attrFn is deprecated" );

    jQuery.attr = function( elem, name, value, pass ) {
        var lowerName = name.toLowerCase(),
            nType = elem && elem.nodeType;

        if ( pass ) {
            // Since pass is used internally, we only warn for new jQuery
            // versions where there isn't a pass arg in the formal params
            if ( oldAttr.length < 4 ) {
                migrateWarn("jQuery.fn.attr( props, pass ) is deprecated");
            }
            if ( elem && !rnoAttrNodeType.test( nType ) &&
                (attrFn ? name in attrFn : jQuery.isFunction(jQuery.fn[name])) ) {
                return jQuery( elem )[ name ]( value );
            }
        }

        // Warn if user tries to set `type`, since it breaks on IE 6/7/8; by checking
        // for disconnected elements we don't warn on $( "<button>", { type: "button" } ).
        if ( name === "type" && value !== undefined && rnoType.test( elem.nodeName ) && elem.parentNode ) {
            migrateWarn("Can't change the 'type' of an input or button in IE 6/7/8");
        }

        // Restore boolHook for boolean property/attribute synchronization
        if ( !jQuery.attrHooks[ lowerName ] && rboolean.test( lowerName ) ) {
            jQuery.attrHooks[ lowerName ] = {
                get: function( elem, name ) {
                    // Align boolean attributes with corresponding properties
                    // Fall back to attribute presence where some booleans are not supported
                    var attrNode,
                        property = jQuery.prop( elem, name );
                    return property === true || typeof property !== "boolean" &&
                        ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?

                        name.toLowerCase() :
                        undefined;
                },
                set: function( elem, value, name ) {
                    var propName;
                    if ( value === false ) {
                        // Remove boolean attributes when set to false
                        jQuery.removeAttr( elem, name );
                    } else {
                        // value is true since we know at this point it's type boolean and not false
                        // Set boolean attributes to the same name and set the DOM property
                        propName = jQuery.propFix[ name ] || name;
                        if ( propName in elem ) {
                            // Only set the IDL specifically if it already exists on the element
                            elem[ propName ] = true;
                        }

                        elem.setAttribute( name, name.toLowerCase() );
                    }
                    return name;
                }
            };

            // Warn only for attributes that can remain distinct from their properties post-1.9
            if ( ruseDefault.test( lowerName ) ) {
                migrateWarn( "jQuery.fn.attr('" + lowerName + "') may use property instead of attribute" );
            }
        }

        return oldAttr.call( jQuery, elem, name, value );
    };

// attrHooks: value
    jQuery.attrHooks.value = {
        get: function( elem, name ) {
            var nodeName = ( elem.nodeName || "" ).toLowerCase();
            if ( nodeName === "button" ) {
                return valueAttrGet.apply( this, arguments );
            }
            if ( nodeName !== "input" && nodeName !== "option" ) {
                migrateWarn("jQuery.fn.attr('value') no longer gets properties");
            }
            return name in elem ?
                elem.value :
                null;
        },
        set: function( elem, value ) {
            var nodeName = ( elem.nodeName || "" ).toLowerCase();
            if ( nodeName === "button" ) {
                return valueAttrSet.apply( this, arguments );
            }
            if ( nodeName !== "input" && nodeName !== "option" ) {
                migrateWarn("jQuery.fn.attr('value', val) no longer sets properties");
            }
            // Does not return so that setAttribute is also used
            elem.value = value;
        }
    };


    var matched, browser,
        oldInit = jQuery.fn.init,
        oldParseJSON = jQuery.parseJSON,
    // Note: XSS check is done below after string is trimmed
        rquickExpr = /^([^<]*)(<[\w\W]+>)([^>]*)$/;

// $(html) "looks like html" rule change
    jQuery.fn.init = function( selector, context, rootjQuery ) {
        var match;

        if ( selector && typeof selector === "string" && !jQuery.isPlainObject( context ) &&
            (match = rquickExpr.exec( jQuery.trim( selector ) )) && match[ 0 ] ) {
            // This is an HTML string according to the "old" rules; is it still?
            if ( selector.charAt( 0 ) !== "<" ) {
                migrateWarn("$(html) HTML strings must start with '<' character");
            }
            if ( match[ 3 ] ) {
                migrateWarn("$(html) HTML text after last tag is ignored");
            }
            // Consistently reject any HTML-like string starting with a hash (#9521)
            // Note that this may break jQuery 1.6.x code that otherwise would work.
            if ( match[ 0 ].charAt( 0 ) === "#" ) {
                migrateWarn("HTML string cannot start with a '#' character");
                jQuery.error("JQMIGRATE: Invalid selector string (XSS)");
            }
            // Now process using loose rules; let pre-1.8 play too
            if ( context && context.context ) {
                // jQuery object as context; parseHTML expects a DOM object
                context = context.context;
            }
            if ( jQuery.parseHTML ) {
                return oldInit.call( this, jQuery.parseHTML( match[ 2 ], context, true ),
                    context, rootjQuery );
            }
        }
        return oldInit.apply( this, arguments );
    };
    jQuery.fn.init.prototype = jQuery.fn;

// Let $.parseJSON(falsy_value) return null
    jQuery.parseJSON = function( json ) {
        if ( !json && json !== null ) {
            migrateWarn("jQuery.parseJSON requires a valid JSON string");
            return null;
        }
        return oldParseJSON.apply( this, arguments );
    };

    jQuery.uaMatch = function( ua ) {
        ua = ua.toLowerCase();

        var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
            /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
            /(msie) ([\w.]+)/.exec( ua ) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
            [];

        return {
            browser: match[ 1 ] || "",
            version: match[ 2 ] || "0"
        };
    };

// Don't clobber any existing jQuery.browser in case it's different
    if ( !jQuery.browser ) {
        matched = jQuery.uaMatch( navigator.userAgent );
        browser = {};

        if ( matched.browser ) {
            browser[ matched.browser ] = true;
            browser.version = matched.version;
        }

        // Chrome is Webkit, but Webkit is also Safari.
        if ( browser.chrome ) {
            browser.webkit = true;
        } else if ( browser.webkit ) {
            browser.safari = true;
        }

        jQuery.browser = browser;
    }

// Warn if the code tries to get jQuery.browser
    migrateWarnProp( jQuery, "browser", jQuery.browser, "jQuery.browser is deprecated" );

    jQuery.sub = function() {
        function jQuerySub( selector, context ) {
            return new jQuerySub.fn.init( selector, context );
        }
        jQuery.extend( true, jQuerySub, this );
        jQuerySub.superclass = this;
        jQuerySub.fn = jQuerySub.prototype = this();
        jQuerySub.fn.constructor = jQuerySub;
        jQuerySub.sub = this.sub;
        jQuerySub.fn.init = function init( selector, context ) {
            if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
                context = jQuerySub( context );
            }

            return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
        };
        jQuerySub.fn.init.prototype = jQuerySub.fn;
        var rootjQuerySub = jQuerySub(document);
        migrateWarn( "jQuery.sub() is deprecated" );
        return jQuerySub;
    };


// Ensure that $.ajax gets the new parseJSON defined in core.js
    jQuery.ajaxSetup({
        converters: {
            "text json": jQuery.parseJSON
        }
    });


    var oldFnData = jQuery.fn.data;

    jQuery.fn.data = function( name ) {
        var ret, evt,
            elem = this[0];

        // Handles 1.7 which has this behavior and 1.8 which doesn't
        if ( elem && name === "events" && arguments.length === 1 ) {
            ret = jQuery.data( elem, name );
            evt = jQuery._data( elem, name );
            if ( ( ret === undefined || ret === evt ) && evt !== undefined ) {
                migrateWarn("Use of jQuery.fn.data('events') is deprecated");
                return evt;
            }
        }
        return oldFnData.apply( this, arguments );
    };


    var rscriptType = /\/(java|ecma)script/i,
        oldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;

    jQuery.fn.andSelf = function() {
        migrateWarn("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()");
        return oldSelf.apply( this, arguments );
    };

// Since jQuery.clean is used internally on older versions, we only shim if it's missing
    if ( !jQuery.clean ) {
        jQuery.clean = function( elems, context, fragment, scripts ) {
            // Set context per 1.8 logic
            context = context || document;
            context = !context.nodeType && context[0] || context;
            context = context.ownerDocument || context;

            migrateWarn("jQuery.clean() is deprecated");

            var i, elem, handleScript, jsTags,
                ret = [];

            jQuery.merge( ret, jQuery.buildFragment( elems, context ).childNodes );

            // Complex logic lifted directly from jQuery 1.8
            if ( fragment ) {
                // Special handling of each script element
                handleScript = function( elem ) {
                    // Check if we consider it executable
                    if ( !elem.type || rscriptType.test( elem.type ) ) {
                        // Detach the script and store it in the scripts array (if provided) or the fragment
                        // Return truthy to indicate that it has been handled
                        return scripts ?
                            scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
                            fragment.appendChild( elem );
                    }
                };

                for ( i = 0; (elem = ret[i]) != null; i++ ) {
                    // Check if we're done after handling an executable script
                    if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
                        // Append to fragment and handle embedded scripts
                        fragment.appendChild( elem );
                        if ( typeof elem.getElementsByTagName !== "undefined" ) {
                            // handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
                            jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

                            // Splice the scripts into ret after their former ancestor and advance our index beyond them
                            ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
                            i += jsTags.length;
                        }
                    }
                }
            }

            return ret;
        };
    }

    var eventAdd = jQuery.event.add,
        eventRemove = jQuery.event.remove,
        eventTrigger = jQuery.event.trigger,
        oldToggle = jQuery.fn.toggle,
        oldLive = jQuery.fn.live,
        oldDie = jQuery.fn.die,
        ajaxEvents = "ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",
        rajaxEvent = new RegExp( "\\b(?:" + ajaxEvents + ")\\b" ),
        rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
        hoverHack = function( events ) {
            if ( typeof( events ) !== "string" || jQuery.event.special.hover ) {
                return events;
            }
            if ( rhoverHack.test( events ) ) {
                migrateWarn("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'");
            }
            return events && events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
        };

// Event props removed in 1.9, put them back if needed; no practical way to warn them
    if ( jQuery.event.props && jQuery.event.props[ 0 ] !== "attrChange" ) {
        jQuery.event.props.unshift( "attrChange", "attrName", "relatedNode", "srcElement" );
    }

// Undocumented jQuery.event.handle was "deprecated" in jQuery 1.7
    if ( jQuery.event.dispatch ) {
        migrateWarnProp( jQuery.event, "handle", jQuery.event.dispatch, "jQuery.event.handle is undocumented and deprecated" );
    }

// Support for 'hover' pseudo-event and ajax event warnings
    jQuery.event.add = function( elem, types, handler, data, selector ){
        if ( elem !== document && rajaxEvent.test( types ) ) {
            migrateWarn( "AJAX events should be attached to document: " + types );
        }
        eventAdd.call( this, elem, hoverHack( types || "" ), handler, data, selector );
    };
    jQuery.event.remove = function( elem, types, handler, selector, mappedTypes ){
        eventRemove.call( this, elem, hoverHack( types ) || "", handler, selector, mappedTypes );
    };

    jQuery.fn.error = function() {
        var args = Array.prototype.slice.call( arguments, 0);
        migrateWarn("jQuery.fn.error() is deprecated");
        args.splice( 0, 0, "error" );
        if ( arguments.length ) {
            return this.bind.apply( this, args );
        }
        // error event should not bubble to window, although it does pre-1.7
        this.triggerHandler.apply( this, args );
        return this;
    };

    jQuery.fn.toggle = function( fn, fn2 ) {

        // Don't mess with animation or css toggles
        if ( !jQuery.isFunction( fn ) || !jQuery.isFunction( fn2 ) ) {
            return oldToggle.apply( this, arguments );
        }
        migrateWarn("jQuery.fn.toggle(handler, handler...) is deprecated");

        // Save reference to arguments for access in closure
        var args = arguments,
            guid = fn.guid || jQuery.guid++,
            i = 0,
            toggler = function( event ) {
                // Figure out which function to execute
                var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
                jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

                // Make sure that clicks stop
                event.preventDefault();

                // and execute the function
                return args[ lastToggle ].apply( this, arguments ) || false;
            };

        // link all the functions, so any of them can unbind this click handler
        toggler.guid = guid;
        while ( i < args.length ) {
            args[ i++ ].guid = guid;
        }

        return this.click( toggler );
    };

    jQuery.fn.live = function( types, data, fn ) {
        migrateWarn("jQuery.fn.live() is deprecated");
        if ( oldLive ) {
            return oldLive.apply( this, arguments );
        }
        jQuery( this.context ).on( types, this.selector, data, fn );
        return this;
    };

    jQuery.fn.die = function( types, fn ) {
        migrateWarn("jQuery.fn.die() is deprecated");
        if ( oldDie ) {
            return oldDie.apply( this, arguments );
        }
        jQuery( this.context ).off( types, this.selector || "**", fn );
        return this;
    };

// Turn global events into document-triggered events
    jQuery.event.trigger = function( event, data, elem, onlyHandlers  ){
        if ( !elem && !rajaxEvent.test( event ) ) {
            migrateWarn( "Global events are undocumented and deprecated" );
        }
        return eventTrigger.call( this,  event, data, elem || document, onlyHandlers  );
    };
    jQuery.each( ajaxEvents.split("|"),
        function( _, name ) {
            jQuery.event.special[ name ] = {
                setup: function() {
                    var elem = this;

                    // The document needs no shimming; must be !== for oldIE
                    if ( elem !== document ) {
                        jQuery.event.add( document, name + "." + jQuery.guid, function() {
                            jQuery.event.trigger( name, null, elem, true );
                        });
                        jQuery._data( this, name, jQuery.guid++ );
                    }
                    return false;
                },
                teardown: function() {
                    if ( this !== document ) {
                        jQuery.event.remove( document, name + "." + jQuery._data( this, name ) );
                    }
                    return false;
                }
            };
        }
    );


})( jQuery, window );

var BrowserDetect =
{
    init: function ()
    {
        this.browser = this.searchString(this.dataBrowser) || "Other";
        this.version = this.searchVersion(navigator.userAgent) ||       this.searchVersion(navigator.appVersion) || "Unknown";
    },

    searchString: function (data)
    {
        for (var i=0 ; i < data.length ; i++)
        {
            var dataString = data[i].string;
            this.versionSearchString = data[i].subString;

            if (dataString.indexOf(data[i].subString) != -1)
            {
                return data[i].identity;
            }
        }
    },

    searchVersion: function (dataString)
    {
        var index = dataString.indexOf(this.versionSearchString);
        if (index == -1) return;
        return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
    },

    dataBrowser:
        [
            { string: navigator.userAgent, subString: "Chrome",  identity: "Chrome" },
            { string: navigator.userAgent, subString: "MSIE",    identity: "Explorer" },
            { string: navigator.userAgent, subString: "Firefox", identity: "Firefox" },
            { string: navigator.userAgent, subString: "Safari",  identity: "Safari" },
            { string: navigator.userAgent, subString: "Opera",   identity: "Opera" }
        ]

};
BrowserDetect.init();
/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
(function() {
    var initializing = false, fnTest = /xyz/.test(function(){
        xyz;
    }) ? /\b_super\b/ : /.*/;
    // The base Class implementation (does nothing)
    this.Class = function(){};
    // Create a new Class that inherits from this class
    Class.extend = function(prop) {
        var _super = this.prototype;
        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = true;
        var prototype = new this();
        initializing = false;
        // Copy the properties over onto the new prototype
        for (var name in prop) {
            // Check if we're overwriting an existing function
            prototype[name] = typeof prop[name] == "function" &&
                typeof _super[name] == "function" && fnTest.test(prop[name]) ?
                (function(name, fn){
                    return function() {
                        var tmp = this._super;
                        // Add a new ._super() method that is the same method
                        // but on the super-class
                        this._super = _super[name];
                        // The method only need to be bound temporarily, so we
                        // remove it when we're done executing
                        var ret = fn.apply(this, arguments);
                        this._super = tmp;

                        return ret;
                    };
                })(name, prop[name]) :
                prop[name];
        }
        // The dummy class constructor
        function Class() {
            // All construction is actually done in the init method
            if ( !initializing && this.init )
                this.init.apply(this, arguments);
        }
        // Populate our constructed prototype object
        Class.prototype = prototype;
        // Enforce the constructor to be what we expect
        Class.prototype.constructor = Class;
        // And make this class extendable
        Class.extend = arguments.callee;
        return Class;
    };
})();
/*
 HTML5 Shiv v3.7.0 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
 */
(function(l,f){function m(){var a=e.elements;return"string"==typeof a?a.split(" "):a}function i(a){var b=n[a[o]];b||(b={},h++,a[o]=h,n[h]=b);return b}function p(a,b,c){b||(b=f);if(g)return b.createElement(a);c||(c=i(b));b=c.cache[a]?c.cache[a].cloneNode():r.test(a)?(c.cache[a]=c.createElem(a)).cloneNode():c.createElem(a);return b.canHaveChildren&&!s.test(a)?c.frag.appendChild(b):b}function t(a,b){if(!b.cache)b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag();
    a.createElement=function(c){return!e.shivMethods?b.createElem(c):p(c,a,b)};a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+m().join().replace(/[\w\-]+/g,function(a){b.createElem(a);b.frag.createElement(a);return'c("'+a+'")'})+");return n}")(e,b.frag)}function q(a){a||(a=f);var b=i(a);if(e.shivCSS&&!j&&!b.hasCSS){var c,d=a;c=d.createElement("p");d=d.getElementsByTagName("head")[0]||d.documentElement;c.innerHTML="x<style>article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}</style>";
    c=d.insertBefore(c.lastChild,d.firstChild);b.hasCSS=!!c}g||t(a,b);return a}var k=l.html5||{},s=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,r=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,j,o="_html5shiv",h=0,n={},g;(function(){try{var a=f.createElement("a");a.innerHTML="<xyz></xyz>";j="hidden"in a;var b;if(!(b=1==a.childNodes.length)){f.createElement("a");var c=f.createDocumentFragment();b="undefined"==typeof c.cloneNode||
    "undefined"==typeof c.createDocumentFragment||"undefined"==typeof c.createElement}g=b}catch(d){g=j=!0}})();var e={elements:k.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:"3.7.0",shivCSS:!1!==k.shivCSS,supportsUnknownElements:g,shivMethods:!1!==k.shivMethods,type:"default",shivDocument:q,createElement:p,createDocumentFragment:function(a,b){a||(a=f);
    if(g)return a.createDocumentFragment();for(var b=b||i(a),c=b.frag.cloneNode(),d=0,e=m(),h=e.length;d<h;d++)c.createElement(e[d]);return c}};l.html5=e;q(f)})(this,document);
var NS = (function (global) {
    "use strict";

    // empty object to verify namespaced objects
    function Namespace() {}

    return function (namespace) {
        var chunks = namespace.split('.'),
            lastObjRef = global,
            node = null,
            i;

        // iterate over chunks
        for (i = 0; i < chunks.length; ++i) {
            // set current
            node = chunks[i];

            // exist?
            if (typeof lastObjRef[node] !== 'undefined') {
                // must be a namespace
                if (lastObjRef[node] instanceof Namespace === false) {
                    throw new Error('Non Namespace Object exists, cannot create namespace.');
                }

                // assign
                lastObjRef = lastObjRef[node];
                // next iteration
                continue;
            }

            // create new object
            lastObjRef[node] = new Namespace();

            // assign new last object reference
            lastObjRef = lastObjRef[node];
        }

        // return reference to prevent double typing
        return lastObjRef;
    };

}(this));
NS('shc.pd.base.fx').Easing = (function () {
    'use strict';
    return {
        /**
         * Quadratic Easing
         * @param {number} t Tick mark
         * @param {number} b Base (current position)
         * @param {number} e Delta of new position and base position
         * @param {number} d Target destination of the Tick mark
         * @return {number}
         */
        quadraticEnd: function (t, b, e, d) {
            return (~e + 1) * (t /= d) * (t - 2) + b;
        }
    };
}());
/*
 * @class Translate3d
 * Manipulate Translate3d - partial support (only x axis)
 */
NS('shc.pd.base.fx').Translate3d = Class.extend(function () {
    'use strict';

    /** @const */
    var FPS = 77, // frames per second
        BASE = 1000, // 1 second

        /** @private {number} */
        frameRate = BASE / FPS,
        /** @private {mixed} */
        staticGetPoint = null,
        /** @private {mixed} */
        staticCssProperty = null;

    /**
     * Resolves prefix for transform
     * @private
     * @return {void}
     */
    function resolveVendorPrefix() {
        var div = $('<div />'),
            i,
            list = ['transform', 'msTransform', 'MozTransform', 'WebkitTransform', 'OTransform'];

        for (i = 0; i < list.length; ++i) {
            if (typeof div[0].style[list[i]] !== 'undefined') {
                staticCssProperty = list[i];
                return; // stop any further execution
            }
        }

        // default
        staticCssProperty = list[0];
    }

    return {
        /**
         * @constructor
         * @param {jQuery} node Reference to object
         */
        init: function (node) {
            // set vendor prefix resolver
            if (staticCssProperty === null) {
                resolveVendorPrefix();
            }

            // property definitions
            this.node = node;
            this.timer = new shc.pd.base.util.Timer(frameRate);

            this.eventOnFinish = function () {};
            // set default values
            this.node.translate3d = {
                // store current position
                x: 0,
                y: 0,
                z: 0
            };

            // reference to calculating point on a curve
            staticGetPoint = shc.pd.base.fx.Easing.quadraticEnd;
        },
        /**
         * Set X axis
         * @param {number} x
         * @param {string} unit
         * @return {void}
         */
        setX: function (x, unit) {
            this.node[0].style[staticCssProperty] = 'translate3d(' + x + unit + ',0,0)';
            // save
            this.node.translate3d.x = x;
        },
        /**
         * Animate over the X axis using translate3d
         * @param {number} destination
         * @param {string} unit
         * @param {number} duration (milliseconds)
         * @param {Function} callback
         * @return {void}
         */
        animateX: function (destination, unit, duration, callback) {
            if (typeof duration === 'undefined') {
                throw new Error('`duration` argument not supplied');
            }

            var n = 0,
            // determine when to stop N from incrementing
                nLimit = Math.round(duration / BASE * FPS),
            // current position
                xCurrent = this.node.translate3d.x,
            // desired position
                xDestination = destination,
            // delta of new and future position
                xDelta = xDestination - xCurrent,
            // reference to instance
                _this = this;

            // no queue-ing allowed! (looks bad on UX anyways)
            this.stop(true);

            // set callback (used if `stop` is invoked)
            this.eventOnFinish = callback || this.eventOnFinish;

            // set tick action (executed per iteration)
            this.timer.setTickAction(function () {
                // get new X from easing method
                _this.setX(staticGetPoint(++n, xCurrent, xDelta, nLimit), unit);
                // stop animation yet?
                if (n >= nLimit) {
                    // clean up mathmatical remainders
                    _this.setX(xDestination, unit);
                    // stop timer
                    _this.stop();
                }
            });

            // begin animation
            this.timer.start();
        },
        /**
         * Stop animation
         * @param {boolean} suppressEvent
         * @return {void}
         */
        stop: function (suppressEvent) {
            this.timer.stop();
            // fire callback if allowed
            if (typeof suppressEvent === 'undefined' || suppressEvent === false) {
                this.eventOnFinish();
            }
        }
    };
}());
/*
 * @class Translate3dResolver
 * Automatically determines to use jQuery.animate or Translate3d.animate
 * Partial Support (x axis only)
 */
NS('shc.pd.base.fx').Translate3dResolver = Class.extend(function () {
    'use strict';

    return {
        /**
         * @constructor
         * @param {jQuery} node
         * @param {string} fallbackType CSS Property
         */
        init: function (node, fallbackType) {
            this.node = node;
            this.fallbackType = fallbackType;
            // need translate3d instance?
            if (Modernizr.csstransforms3d === true) {
                // define 3d instance
                this.animator3d = new shc.pd.base.fx.Translate3d(this.node);
            }
            // define animateX
            this.lateBindAnimateX();
            this.lateBindSetX();
        },
        /**
         * Stub to be late binded - set X on translate3d or other CSS properties
         * @param {number} x
         * @param {string} unit
         * @return {void}
         */
        setX: function (x, unit) {},
        /**
         * Stub to be late binded - Animates X on translate3d or other CSS properties
         * @param {number} x
         * @param {string} unit
         * @param {number} duration in milliseconds
         * @param {Function} callback
         * @return {void}
         */
        animateX: function (x, unit, duration, callback) {},
        /**
         * Redefine `util.Translate3dResolver.animateX`
         * @return {void}
         */
        lateBindAnimateX: function () {
            // redefine `animate` method based on available feature
            if (Modernizr.csstransforms3d === true) {
                // redefine animation instance
                this.animateX = function (x, unit, duration, callback) {

                    this.animator3d.stop(true);

                    // translate3d animation
                    this.animator3d.animateX(x, unit, duration, callback || function () {});
                };
            } else {
                // redefine animation instance using basic jQuery animation
                this.animateX = function (x, unit, duration, callback) {
                    var css = {};
                    css[this.fallbackType] = x + unit;

                    this.node.stop(true, true);

                    // jQuery animation
                    this.node.animate(css, duration, callback || function () {});
                };
            }
        },
        /**
         * Redefine `util.Translate3dResolver.setX`
         * @return {void}
         */
        lateBindSetX: function () {
            // redefine `setX` method based on available feature
            if (Modernizr.csstransforms3d === true) {
                // set on translate3d instance
                this.setX = function (x, unit) {
                    // if we're setting X while animation, this should override it
                    this.animator3d.stop(true);
                    // translate3d animation
                    this.animator3d.setX(x, unit);
                };
            } else {
                // css
                this.setX = function (x, unit) {
                    var css = {};
                    css[this.fallbackType] = x + unit;
                    // jQuery style update (and stop animation)
                    this.node.stop(true, true).css(css);
                };
            }
        }
    };
}());
NS('shc.pd.base.util').Enums = (function () {
    'use strict';

    return {
        Direction: {
            Top: 0,
            Right: 1,
            Bottom: 2,
            Left: 3
        }
    };
}());
NS('shc.pd.base.util').Timer = Class.extend(function () {
    'use strict';
    return {
        /**
         * @constructor
         * @param {number} interval Number of milliseconds between each iteration
         * @param {boolean} singleUse Determines to fire one or many iterations
         */
        init: function (interval, singleUse) {
            this.interval = interval;
            this.singleUse = singleUse;
            this.session = null; // stores Interval session
            this.tickAction = function () {}; // stores executable code as a functional expression
        },
        /**
         * Starts iteration
         * @return {void}
         */
        start: function () {
            if (this.singleUse === true) {
                // single iteration
                this.session = setTimeout(this.tickAction, this.interval);
            } else {
                // multiple iterations
                this.session = setInterval(this.tickAction, this.interval);
            }
        },
        /**
         * Stop iteration
         * @param {boolean} invokeLastTickAction Fires last tick if set to true
         * @return {void}
         */
        stop: function (invokeLastTickAction) {
            // check for multiple iterations
            if (this.singleUse === true) {
                throw new Error('Cannot use `stop` on `setTimeout`s');
            }

            // set default
            invokeLastTickAction = invokeLastTickAction || false;
            // stop timer session
            clearInterval(this.session);

            // optional fire
            if (invokeLastTickAction === true) {
                this.tickAction();
            }
        },
        /**
         * Stops and starts timer
         * @return {void}
         */
        reset: function () {
            this.stop();
            this.start();
        },
        /**
         * Event that is invoked per iteration
         * @param {Function} setTickAction
         * @return {void}
         */
        setTickAction: function (setTickAction) {
            this.tickAction = setTickAction;
        }
    };
}());
NS('shc.pd.base.util');

/**
 * @type {String} Engine type
 */
shc.pd.base.util.VIEWCHANGE_ENGINE_TYPE = 'default';

/**
 * @class ViewChange
 */
shc.pd.base.util.ViewChange = (function () {
    'use strict';

    return {
        instance: null,
        /**
         * Helper function for quick window detection impls
         * @return {void}
         */
        getInstance: function () {
            if (this.instance === null) {
                // which engine type to use
                switch (shc.pd.base.util.VIEWCHANGE_ENGINE_TYPE) {
                    case 'simulator':
                    default:
                        this.instance = new shc.pd.base.render.DefaultResponsiveEngine();
                        break;
                }
            }

            return this.instance;
        },
        /**
         * @return {Number}
         */
        getWidth: function () {
            return this.getInstance().getWidth();
        }
    };
}());
var stickyItem;

stickyItem = (function() {
    function stickyItem(selector) {
        this.$set = $(selector);
        if (this.$set.length === 0) {
            this.$set = false;
        } else {
            this.setBreakPoint().setClassToggles();
        }
    }

    stickyItem;

    stickyItem.prototype.setBreakPoint = function(dir, breakpoint) {
        this.dir = dir != null ? dir : 'top';
        this.breakpoint = breakpoint != null ? breakpoint : false;
        if (this.breakpoint === false && this.$set !== false) {
            this.breakpoint = this.$set.offset()['top'];
        }
        return this;
    };

    stickyItem.prototype.setClassToggles = function(classOn, classOff) {
        this.classOn = classOn != null ? classOn : 'active';
        this.classOff = classOff != null ? classOff : 'inactive';
        return this;
    };

    stickyItem.prototype.isset = function() {
        if (this.$set !== false) {
            return true;
        } else {
            return false;
        }
    };

    stickyItem.prototype.setMaxScroll = function(maxScroll) {
        this.maxScroll = maxScroll != null ? maxScroll : false;
        return this;
    };

    stickyItem.prototype.setCallBack = function(callback) {
        if (callback == null) {
            callback = false;
        }
        if (callback !== false && typeof callback === "function") {
            return this.callback = callback;
        }
    };

    stickyItem.prototype.setOnCallback = function(onCallback) {
        this.onCallback = onCallback != null ? onCallback : false;
        return this;
    };

    stickyItem.prototype.setOffCallback = function(offCallback) {
        this.offCallback = offCallback != null ? offCallback : false;
        return this;
    };

    stickyItem.prototype.callOnCallback = function() {
        if (typeof this.onCallback === "function") {
            return this.onCallback();
        }
    };

    stickyItem.prototype.callOffCallback = function() {
        if (typeof this.offCallback === "function") {
            return this.offCallback();
        }
    };

    stickyItem.prototype.checkState = function(val) {
        var delta;
        if (this.$set !== false) {
            if (val > this.breakpoint && !this.$set.hasClass(this.classOn)) {
                this.$set.removeClass(this.classOff).addClass(this.classOn);
                this.callOnCallback();
            } else if (val <= this.breakpoint && !this.$set.hasClass(this.classOff)) {
                this.$set.removeClass(this.classOn).addClass(this.classOff);
                this.callOffCallback();
            }
            if (val > this.maxScroll) {
                delta = this.maxScroll - val;
                this.$set.css({
                    marginTop: delta
                });
            }
            if (typeof this.callback === 'function') {
                this.callback(val);
            }
        }
        return this;
    };

    return stickyItem;

})();

$(document).ready((function(_this) {
    return function() {
        var $consultBox, $footer, $modelPartListDiagram, $pgHeader, $repairNav, $scBtn, $tabReminder, consultBoxIsOnPage, consultationBreakpoint, footerDepth, heroImg, isImprovePage, isTabsHSlayout, mobileBrowser, navTopBar, railHeight, scrollDist;
        mobileBrowser = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        if (!mobileBrowser && $(window).width() > 650) {
            $modelPartListDiagram = new stickyItem('.responsivePinchImage');
            $modelPartListDiagram.setBreakPoint('top');
            $modelPartListDiagram.setClassToggles('sticky', 'unsticky');
            isTabsHSlayout = $('.heroTabsHSlayout');
            isImprovePage = $('.moduleHero');
            if (isTabsHSlayout.length) {
                navTopBar = $('.pageNavWrapper').height();
                heroImg = $('#repairHeroBlock');
                consultationBreakpoint = consultationBreakpoint = heroImg.offset()['top'] + (heroImg.height() - navTopBar);
                $repairNav = new stickyItem('#pageNavLinks');
                $scBtn = new stickyItem('.btnSchedulrShowHide');
                $tabReminder = new stickyItem('.tabSelectItems');
                $repairNav.setBreakPoint('top', consultationBreakpoint);
                $repairNav.setClassToggles('show', 'hidden');
                $tabReminder.setBreakPoint('top', consultationBreakpoint);
                $tabReminder.setClassToggles('tabsOutOfView', 'tabsInView');
                $scBtn.setBreakPoint('top', consultationBreakpoint);
                $scBtn.setClassToggles('show', 'hidden');
            } else if (isImprovePage.length) {
                navTopBar = $('.pageNavWrapper').height();
                heroImg = $('#viewHeroDefault');
                consultationBreakpoint = heroImg.offset()['top'] + heroImg.height() - navTopBar;
                $repairNav = new stickyItem('#pageNavLinks');
                $repairNav.setBreakPoint('top', consultationBreakpoint);
                $repairNav.setClassToggles('show', 'hidden');
            }
            $modelPartListDiagram.setOnCallback(function() {
                var $subMenu;
                $subMenu = $('#json_submenus_container');
                $subMenu.find('.megamenu').trigger('mouseleave');
                return $subMenu.css('height', '0px');
            });
            window.$rightRail = new stickyItem('#rightRail');
            $rightRail.setBreakPoint('top' + 21, $modelPartListDiagram.breakpoint - 21);
            $rightRail.setClassToggles('sticky', 'unsticky');
            consultBoxIsOnPage = $('#rightRail-improve');
            if (consultBoxIsOnPage.length) {
                heroImg = $('#hiLeadsheetWrap');
                navTopBar = $('#pageNav').height();
                consultationBreakpoint = heroImg.offset()['top'] + heroImg.height() - navTopBar;
                $consultBox = new stickyItem('#ihScheduleLeadButton');
                $consultBox.setBreakPoint('top', consultationBreakpoint);
                $consultBox.setClassToggles('show', 'hidden');
            }
            $footer = $('.footer_container');
            if ($footer.length === 1) {
                railHeight = $('#rightRail').height();
                footerDepth = $footer.offset()['top'];
                $modelPartListDiagram.maxScroll(footerDepth);
                $rightRail.maxScroll(footerDepth + railHeight);
            }
            $modelPartListDiagram.setCallBack(function(scrollDist) {
                var mainfooterOff, diagramSpot, stickyFootCheck;
                if (scrollDist == null) {
                    scrollDist = false;
                }
                if (scrollDist === false) {
                    return;
                }
                mainfooterOff = $('.global_footer').offset();
                if (typeof mainfooterOff === "undefined") {
                    mainfooterOff = $('#globalFooter').offset();
                }
                diagramSpot = $('.responsivePinchImage').height() + 80;
                if ($('.global_footer').length > 0) {
                    mainfooterOff = $('.global_footer').offset();
                } else {
                    stickyFootCheck = 0;
                }
                stickyFootCheck = mainfooterOff.top - (scrollDist + diagramSpot);
                if (stickyFootCheck < 0) {
                    $('.responsivePinchImage').css('margin-top', stickyFootCheck);
                } else if (stickyFootCheck >= 0) {
                    $('.responsivePinchImage.sticky').css('margin-top', 0);
                }
                if ($('.responsivePinchImage.unsticky').length) {
                    return $('.responsivePinchImage.unsticky').css('margin-top', 0);
                }
            });
            scrollDist = $(window).scrollTop();
            $modelPartListDiagram.checkState(scrollDist);
            return $(window).scroll(function() {
                scrollDist = $(window).scrollTop();
                $modelPartListDiagram.checkState(scrollDist);
            });
        }
    };
})(this));
/**
 * @class Breakpoint
 * Base class for breakpoint driven widgets
 */
NS('shc.pd.base.render').Breakpoint = Class.extend(function () {
    'use strict';

    return {
        /**
         * @constructor
         */
        init: function () {},
        /**
         * @type {boolean}
         */
        active: false,
        /**
         * @return {boolean}
         */
        isActive: function () {
            return this.active;
        },
        /**
         * @param {Boolean} active
         * @return {void}
         */
        setActive: function (active) {
            this.active = active;
        },
        /**
         * Stub method to be overrided
         * @return {void}
         */
        responsiveCallback: function () {},
        /**
         * Attachment callback stub
         * @return {void}
         */
        activate: function () {
            // Not required
        },
        /**
         * Detach callback stub
         * @return {void}
         */
        deactivate: function () {
            // Not required
        }
    };
}());
/**
 * @class BreakpointConfig
 * Config and wrapper for breakpoints. Used for {WidgetBreakpointRegistry}
 * @TODO add min/max checking
 */
NS('shc.pd.base.render').BreakpointConfig = Class.extend(function () {
    return {
        /**
         * @type {Number}
         */
        min: null,
        /**
         * @type {Number}
         */
        max: null,
        /**
         * @type {mixed|Breakpont}
         */
        obj: null,
        /**
         * @type {Number}
         */
        id: null,
        /**
         * @constructor
         */
        init: function (config) {
            var prop;

            // auto config
            for (prop in config) {
                this[prop] = config[prop];
            }
        },
        /**
         * @param {Number} min
         * @return {void}
         */
        setMin: function (min) {
            this.min = min;
        },
        /**
         * @return {Number}
         */
        getMin: function () {
            return this.min;
        },
        /**
         * @param {Number} max
         * @return {void}
         */
        setMax: function (max) {
            this.max = max;
        },
        /**
         * @return {Number}
         */
        getMax: function () {
            return this.max;
        },
        /**
         * @param {mixed|Breakpoint} obj
         * @return {void}
         */
        setObj: function (obj) {
            this.obj = obj;
        },
        /**
         * @return {mixed|Breakpoint}
         */
        getObj: function () {
            return this.obj;
        },
        /**
         * @param {Number} id
         * @return {void}
         */
        setIdentifier: function (id) {
            this.id = id;
        },
        /**
         * @return {Number}
         */
        getIdentifier: function () {
            return this.id;
        }
    };
}());
/**
 * @class ResponsiveEngineImpl
 */
NS('shc.pd.base.render').ResponsiveEngineImpl = Class.extend(function () {
    return {
        /**
         * @constructor
         *
         */
        init: function () {
            this.eventBinded = false;
        },
        /**
         * Fire specified event
         * @param {string} event Callback property name
         * @param {array} args Passed variable
         * @return {void}
         */
        fire: function (event, args) {
            try {
                var i = 0;
                // iterate over callback type list
                for (i = 0; i < this.callbacks[event].length; ++i) {
                    // property driven store
                    this.callbacks[event][i](args);
                }
            } catch (e) {
            }
        },
        /**
         * @type Object
         * Holds callback arrays
         */
        callbacks: {},
        /**
         * Stub method for entire window resize
         * @param {Function} callback
         * @return {void}
         */
        onResponsive: function (callback) {},
        /**
         * Check if events are binded
         * @return {void}
         */
        initEventBindings: function () {
            if (this.eventBinded === false) {
                this.bindEvents();
                // update property
                this.eventBinded = true;
            }
        },
        /**
         * Bind events stub
         * @return {void}
         */
        bindEvents: function () {},
        /**
         * Stub to be overrided
         * @return {Number}
         */
        getWidth: function () {}
    };
}());
/**
 * @class DefaultResponsiveEngine
 * Adds orientation and resize support
 */
NS('shc.pd.base.render').DefaultResponsiveEngine = shc.pd.base.render.ResponsiveEngineImpl.extend(function () {
    return {
        /**
         * @type {Object}
         * callbacks Stores all callbacks
         */
        callbacks: {
            resize: [],
            orientation: []
        },
        /**
         * Add callback on orientation change
         * @param {Function} callback
         * @return {void}
         */
        onResize: function (callback) {
            this.initEventBindings();
            this.callbacks.resize.push(callback);
        },
        /**
         * Add callback on orientation change
         * @param {Function} callback
         * @return {void}
         */
        onOrientationChange: function (callback) {
            this.initEventBindings();
            this.callbacks.orientation.push(callback);
        },
        /**
         * Add callback to both events
         * @param {Function} callback
         * @return {void}
         */
        onResponsive: function (callback) {
            this.initEventBindings();
            this.onResize(callback);
            this.onOrientationChange(callback);
        },
        /**
         * Bind events
         * @return {void}
         */
        bindEvents: function () {
            var _this = this,
                browser = $(window);

            // resize event
            browser.resize(function () {
                // give resize
                _this.fire('resize', [$(this).width()]);
            });

            // orientation change event
            browser.bind('orientationchange', function () {
                // if `orientation` property is undefined, default to 0
                _this.fire('orientation', [$(this).width(), window.orientation || 0]);
            });
        },
        /**
         * @return {Number}
         */
        getWidth: function () {
            return $(window).width();
        }
    };
}());
/**
 * @class WidgetBreakpointResolver
 * Data store for breakpoints and handles activation/deactivation
 */
NS('shc.pd.base.render').WidgetBreakpointRegistry = (function () {
    'use strict';

    /**
     * @type {Array}
     * Stores configurations and obj wrapper for {BreakPoint};
     */
    var registryArray = [],
        /**
         * @type {Number}
         * Unique identifier for registries
         */
        id = 0,
        /**
         * @param {Boolean}
         */
        binded = false;

    return {
        /**
         * Adds to breakpint registry
         * @param {BreakpointConfig} breakpointConfig
         * @return {void}
         */
        add: function (breakpointConfig) {
            // lazy init
            this.bind();

            // type check
            if (breakpointConfig instanceof shc.pd.base.render.BreakpointConfig === false) {
                throw new TypeError('Invalid type to add to BreakpointRegistry');
            }

            // set ID
            breakpointConfig.setIdentifier(++id);

            // add and generate ID
            registryArray.push(breakpointConfig);

            // activate or deactivate
            this.executeChangeAction(breakpointConfig, shc.pd.base.util.ViewChange.getWidth());
        },
        /**
         * Removes a registry by ID
         * @param {Number} id
         * @return {void}
         */
        remove: function (id) {
            var i;

            for (i = 0; registryArray.length > 0; ++i) {
                if (registryArray[i].getIdentifier() === id) {
                    registryArray.splice(i, 1);
                    break;
                }
            }
        },
        /**
         * @return {Array}
         */
        getAll: function () {
            return registryArray;
        },
        /**
         * Bind responsive callback
         */
        bind: function () {
            if (binded === false) {
                var _this = this;

                // event callback on resize/orientation
                shc.pd.base.util.ViewChange.getInstance().onResponsive(function (args) {
                    _this.executeChangeActions(args[0]);
                });

                binded = true;
            }
        },
        /**
         * Iterates over registry using provided parameters and inits enable/disable
         * @param {Number} width
         * @return {void}
         */
        executeChangeActions: function (width) {
            var i;

            for (i = 0; i < registryArray.length; ++i) {
                // activation creds met?
                this.executeChangeAction(registryArray[i], width);
            }
        },
        /**
         * Toggles activation
         * @param {mixed|BreakpointConfig} bpConf
         * @param {Number} width
         * @return {void}
         */
        executeChangeAction: function (bpConf, width) {
            // activation creds met?
            if (
                bpConf.getMin() <= width &&
                bpConf.getMax() >= width &&
                bpConf.getObj().isActive() === false
                ) {
                // deactivate
                bpConf.getObj().activate();

                // set active state
                bpConf.getObj().setActive(true);
            }

            // deactivation creds met?	
            if (
                (bpConf.getMin() > width || bpConf.getMax() < width) &&
                bpConf.getObj().isActive() === true
                ) {
                // activate
                bpConf.getObj().deactivate();

                // set active state 
                bpConf.getObj().setActive(false);
            }
        }
    };
}());
/**
 * @class IndexController
 * Used primarily for carousels and slideshow-like components
 */
NS('shc.pd.base.src').IndexController = Class.extend(function () {
    'use strict';
    return {
        /**
         * @constructor
         */
        init: function () {
            // default properties
            this.index = 0; // default is on 0
            this.lastIndex = 0;
            this.maxIndex = 0;
            this.isInfinite = false;
            this.onIndexChange = function () {}; // callback fired
        },
        /**
         * Proceeds to next index value going forward, invokes `setIndex`
         * Does nothing if conditions aren't met
         * @return {Boolean}
         */
        next: function () {
            if (this.index < this.maxIndex) {
                this.setIndex(this.index + 1, shc.pd.base.util.Enums.Direction.Right);
            } else if (this.isInfinite === true) {
                this.setIndex(0, shc.pd.base.util.Enums.Direction.Right);
            } else {
                return false;
            }
        },
        /**
         * Proceeds to next index value going backwards, invokes `setIndex`
         * Does nothing if conditions aren't met
         * @return {Boolean}
         */
        back: function () {
            if (this.index > 0) {
                this.setIndex(this.index - 1, shc.pd.base.util.Enums.Direction.Left);
            } else if (this.isInfinite === true) {
                this.setIndex(this.maxIndex, shc.pd.base.util.Enums.Direction.Left);
            } else {
                return false;
            }
        },
        /**
         * Sets index, defines previous index, invokes `action`
         * @param {number} index
         * @param {util.Enums.Direction} direction
         */
        setIndex: function (index, direction) {
            // set a last index for point of references in `action`
            this.lastIndex = this.index;
            // defined new index
            this.index = index;
            // invoke action which may have animation
            this.action(direction || null);
            // fire onIndexChange event
            this.onIndexChange(index, this.lastIndex);
        },
        /**
         * Return current index
         * @return {number}
         */
        getIndex: function () {
            return this.index;
        },
        /**
         * Stub, overridable method
         * @return {void}
         */
        action: function () {},
        /**
         * Set max index
         * @param {number} number
         * @return {void}
         */
        setMaxIndex: function (number) {
            this.maxIndex = number;
        },
        /**
         * Set max index
         * @param {number} number
         * @return {void}
         */
        getMaxIndex: function (number) {
            return this.maxIndex;
        },
        /**
         * Set event for on index change
         * @param {Function} event
         * @return {void}
         */
        setOnIndexChange: function (event) {
            this.onIndexChange = event;
        }
    };
}());
/**
 * @class Carousel
 */
NS('shc.pd.base.src').Carousel = shc.pd.base.src.IndexController.extend(function () {
    /**
     * @type {Number}
     */
    var ANIMATION_SPEED = 500;

    return {
        /**
         * @constructor
         * @param {jQuery} parent {HTMLElement}
         * @param {Number} itemCount
         * @param {Number} movementPx How much to move
         */
        init: function (parent, itemCount, movementPx) {
            this._super();

            // we need items, or else this should not be in use
            if ($('.carouselItemHolder', parent).length === 0) {
                throw new Error('No items to carousel');
            }

            this.callback = function () {};
            this.hasAction = true;

            // item wrapper that we move
            this.itemWrapper = $('.carouselListWrapper', parent);

            // fx handler
            this.moveFx = new shc.pd.base.fx.Translate3dResolver(this.itemWrapper, 'marginLeft');

            // detect what kind of width we're gonna use
            this.setMovementPx(movementPx);

            // maxIndex
            this.setMaxIndex(itemCount - 1);
        },
        /**
         * @Override
         * @return {void}
         */
        action: function () {
            if (this.hasAction === true) {
                this.moveFx.animateX(this.movementPx * this.index * -1, 'px', this.animationSpeedMs || ANIMATION_SPEED, this.callback);
            }
        },
        /**
         * @return {Number}
         */
        getMovementPx: function () {
            return this.movementPx;
        },
        /**
         * @return {void}
         */
        setMovementPx: function (movementPx) {
            this.movementPx = movementPx;
        },
        /**
         * Set fx callback
         * @param {Function} callback
         * @return {void}
         */
        onFxComplete: function (callback) {
            this.callback = callback;
        },
        /**
         * @return {void}
         */
        enableAction: function () {
            this.hasAction = true;
        },
        /**
         * @return {void}
         */
        disableAction: function () {
            this.hasAction = false;
        },
        /**
         * Overrides default animation
         * @param {Number} ms
         * @returns {undefined}
         */
        setAnimationSpeed: function (ms) {
            this.animationSpeedMs = ms;
        },
        /**
         * Returns animation object
         * @returns {shc.pd.base.fx.Translate3dResolver}
         */
        getFx: function () {
            return this.moveFx;
        }
    };
}());
/*global $:true, window:true, Class:true */
(function (window) {
    "use strict";
    window['SPDUtils'] = {
        /**
         * @namespace SPDUtils
         * Global utilities and helper methods
         *
         * init: On page load events to fire
         */
        init: function () {
            var self = this;

            self.getGlobalVariables();
            self.getQueryParameters();
            self.setVendorCSS();
        },
        /**
         * Retrieve and set global variables
         * @return {void}
         */
        getGlobalVariables: function () {
            var self = this;

            // Head metadata
            $('meta[name^="global-"]').each(function () {
                var newName = $(this).attr('name').replace('global-', ''),
                    newContent = $(this).attr('content');

                window[newName] = newContent;
            });
            // Template name for tracking
            window['templateName'] = $('[data-templatename]').data('templatename');
            // API path protocol fix
            if (self.validString(window['apiPath']) !== '' && self.validString(window['apiPathSecure']) !== '') {
                if (document.location.href.indexOf('https') > -1) {
                    window['apiPath'] = window['apiPathSecure'];
                }
            }
            // AJAX site path protocol fix
            window['ajaxSitePath'] = mainSitePath;
            if (self.validString(window['mainSitePath']) !== '' && self.validString(window['mainSitePathSecure']) !== '') {
                if (document.location.href.indexOf('https') > -1) {
                    window['ajaxSitePath'] = window['mainSitePathSecure'];
                }
            }
        },
        /**
         * Creates objects required by AddThis
         */
        prepareAddThis: function () {
            var self = this,
                addThisUrl = '//s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f903dd609463926',
                script = null;

            // Set global variables
            window['addthis_share'] = {
                'url': document.location.href
            };
            window['addthis_config'] = {
                'data_track_addressbar': false
            };
            // Append script to the body
            script = $('<script />');
            script.attr('src', self.getLocationDetails().protocol + addThisUrl)
                .attr('type', 'text/javascript')
                .attr('language', 'javascript');
            $('body').append(script);
        },
        /**
         * Get query string parameters
         * @return {void}
         */
        getQueryParameters: function () {
            var returnObj = {},
                query = window.location.search.substring(1),
                spaceReg = /\+/g,
                queryReg = /([^&=]+)=?([^&]*)/g,
                match,
                name = '',
                value = '';

            /* Parse values */
            while (match = queryReg.exec(query)) {
                name = decodeURIComponent(match[1].replace(spaceReg, ' '));
                value = decodeURIComponent(match[2].replace(spaceReg, ' '));
                returnObj[name] = value;
            }

            /* Create object */
            window['queryParams'] = returnObj;
        },
        /**
         * Check that an object resolves to a valid string
         * @param {object} obj Object to validate
         * @param {string} retval Optional return value
         */
        validString: function (obj, retval) {
            // Type checking ensures faster validation
            if (typeof obj === 'string') {
                return obj;
            } else if (typeof retval === 'string') {
                return retval;
            } else {
                return '';
            }
        },
        /**
         * Check that an object resolves to a valid number
         * @param {object} obj Object to validate
         * @param {number} retval Optional return value
         */
        validNumber: function (obj, retval) {
            // Type checking ensures faster validation
            // but also allow string representations through
            if (typeof obj === 'number') {
                return obj;
            } else if (isNaN(parseInt(obj, 10)) === false) {
                return parseInt(obj, 10);
            } else if (typeof retval === 'number') {
                return retval;
            } else if (isNaN(parseInt(retval, 10)) === false) {
                return parseInt(retval, 10);
            } else {
                return 0;
            }
        },
        /**
         * Check that an object resolves to a valid boolean
         * @param {object} obj Object to validate
         * @param {boolean} retval Optional return value
         */
        validBoolean: function (obj, retval) {
            // Type checking ensures faster validation
            if (typeof obj === 'boolean') {
                return obj;
            } else if (typeof obj === 'string' && (obj === 'true')) {
                return true;
            } else if (typeof obj === 'string' && (obj === 'false')) {
                return false;
            } else if (typeof obj === 'number' && (obj === 1)) {
                return true;
            } else if (typeof obj === 'number' && (obj === 0)) {
                return false;
            } else if (typeof retval === 'boolean') {
                return retval;
            } else {
                return false;
            }
        },
        /**
         * Check if the screen is currently sized at an internally-defined mobile breakpoint
         * @return {boolean} Check result
         */
        isMobileBreakpoint: function () {
            var currentWidth = parseInt($(window).width(), 10);

            if (currentWidth < 768) {
                return true;
            } else {
                return false;
            }
        },
        /**
         * Check if the screen is currently sized at an internally-defined tablet breakpoint
         * @return {boolean} Check result
         */
        isTabletBreakpoint: function () {
            var currentWidth = parseInt($(window).width(), 10);

            if (currentWidth > 767 && currentWidth < 1025) {
                return true;
            } else {
                return false;
            }
        },
        isMobileBrowser: function() {
            return ('ontouchstart' in document.documentElement);
        },
        /**
         * Retrieve the current protocol, host name and path
         * @return {object}
         */
        getLocationDetails: function () {
            var details = {
                protocol: document.location.protocol,
                hostName: document.location.hostname,
                port: document.location.port,
                fullAddress: document.location.protocol + '//' + document.location.hostname + (document.location.port !== '' ? ':' + document.location.port : '') + '/'
            };
            return details;
        },
        /**
         * Handles responsive input help text
         * @param {object} el jQuery element to check
         * @param {boolean} edit Optional boolean denoting the user is about to edit
         */
        checkInput: function (el, edit) {
            var self = window.SPDUtils,
                value = el.attr('value'),
                helpText = el.data('inputhelp'),
                helpTextMobile = el.data('inputhelpmobile'),
                newValue = '';

            // Check attribute values
            if (self.validString(helpTextMobile) !== '' && self.isMobileBreakpoint() === true) {
                newValue = helpTextMobile;
            } else if (self.validString(helpText) !== '') {
                newValue = helpText;
            }
            // Determine what to display
            if ((value === helpText || value === helpTextMobile) && edit === true) {
                // Edit mode, value is help text
                el.attr('value', '');
            } else if ((value === '' || value === helpText || value === helpTextMobile) && edit !== true) {
                // Not edit mode, value is empty
                el.attr('value', newValue);
            }
        },
        /**
         * Handles responsive link text
         * @param {object} el jQuery element to check
         */
        checkLink: function (el) {
            var self = window.SPDUtils,
                value = el.text(),
                helpText = el.data('texthelp'),
                helpTextMobile = el.data('texthelpmobile'),
                newValue = value;

            // Check attribute values
            if (self.validString(helpTextMobile) !== '' && self.isMobileBreakpoint() === true) {
                newValue = helpTextMobile;
            } else if (self.validString(helpText) !== '') {
                newValue = helpText;
            }
            // Change if you need to
            if (value !== newValue) {
                el.text(newValue);
            }
        },
        /**
         * Generates a GUID
         * @return {string}
         */
        s4: function () {
            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        },
        getGUID: function () {
            var su = window.SPDUtils;

            return su.s4() + su.s4() + su.s4() + su.s4() + su.s4() + su.s4() + su.s4() + su.s4();
        },
        /**
         * Sets a domain-level cookie
         * @param {string} name Name of cookie to create
         * @param {string} val Value of cookie to create
         * @param {number} days Optional number of days to expire in
         */
        setCookie: function (name, value, days) {
            var self = this,
                expireDate = new Date(),
                cookieValue = '';

            // Set the expiration date
            if (self.validNumber(days, 0) === 0) {
                days = 1000;
            }
            expireDate.setDate(expireDate.getDate() + days);
            // Format the cookie value
            cookieValue = escape(value) + '; expires=' + expireDate.toGMTString() + '; path=/';
            // Store the cookie
            document.cookie = name + '=' + cookieValue;
        },
        /**
         * Gets the value of a cookie
         * @param {string} name Name of the cookie to retrieve
         * @param {string} retval Optional default return value
         * @return {string} Value of cookie
         */
        getCookie: function (name, retval) {
            var su = this,
                allCookies = document.cookie.split(';'),
                i = 0,
                cookieName = '',
                cookieValue = '';

            // Set initial return value
            retval = su.validString(retval, '');

            // Parse cookie items
            for (i = 0; i < allCookies.length; i = i + 1) {
                if (typeof allCookies[i] === 'string') {
                    try {
                        cookieName = allCookies[i].split('=')[0].trim();
                    } catch (e) {
                        cookieName = su.validString(allCookies[i].split('=')[0]);
                    }
                    try {
                        cookieValue = allCookies[i].split('=')[1].trim();
                    } catch (e) {
                        cookieValue = su.validString(allCookies[i].split('=')[1]);
                    }

                    if (cookieName.toLowerCase() === name.toLowerCase()) {
                        retval = cookieValue;
                        break;
                    }
                }
            }

            return retval;
        },
        /**
         * Tokenize a string into an array of user-defined objects
         * @param {string} input The original string to split
         * @param {object} template Template object to return
         * @param {string} delimiter The delimit to split against
         */
        tokenize: function (input, template, delimiter) {
            var su = this,
                obj = {},
                items = input.split(delimiter),
                output = new Array(),
                length = template.length,
                modulus = 0,
                i = 0;

            if (items.length >= length) {
                for (i = 0; i < items.length; i = i + 1) {
                    modulus = i % length;

                    // New instance
                    if (i % length === 0) {
                        obj = {};
                    }
                    // Update properties
                    obj[template[modulus]] = items[i];
                    // Push instance
                    if ((modulus === (length - 1)) || ((i + 1) === items.length)) {
                        output.push(obj);
                    }
                }
            }

            return output;
        },
        /**
         * Attempt tracking call
         * @param {object} params Parameters to pass to the CQ record method if it exists
         * @param {string} componentName The name of the component to track
         * @return {void}
         */
        trackEvent: function (params, componentName) {
            var self = this;
            // Grab the page title
            params.values.pageTitle = $('title').text();

            // Component name is complicated
            componentName = self.validString(componentName);
            if (componentName !== '' && self.validString(window['templateName']) !== '') {
                componentName = componentName.replace('#templateName', templateName);
            }
            params.values.componentName = componentName;

            // Check tracking is available
            if (typeof CQ_Analytics.record === 'function') {
                CQ_Analytics.record(params);
            }
        },
        /**
         * Sets vendor-specific CSS properties for CSS3 techniques
         * @return {void}
         */
        setVendorCSS: function () {
            var div = $('<div />'),
                i = 0,
                transforms = ['transform', 'msTransform', 'MozTransform', 'WebkitTransform', 'OTransform'];

            for (i = 0; i < transforms.length; ++i) {
                if (typeof div[0].style[transforms[i]] !== 'undefined') {
                    window['CSSTransform'] = transforms[i];
                }
            }
        }
    };
    window.SPDUtils.init();
}(window));
/*global $:true, window:true, document:true, Class:true */
(function (window) {
    "use strict";
    /**
     * Global functionality instantiation
     */
    shc.pd.base.util.ViewChange.getInstance().onResponsive(function () {
        /**
         * Input help text listeners
         */
        $('[data-inputhelp]').each(function () {
            // Check in case the breakpoint is different
            window.SPDUtils.checkInput($(this));
        });
        /**
         * Link help text listeners
         */
        $('[data-texthelp]').each(function () {
            // Check in case the breakpoint is different
            window.SPDUtils.checkLink($(this));
        });
    });
}(window));
/*!
 * jQuery JavaScript Library v1.9.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-1-14
 */
(function( window, undefined ) {
    "use strict";
    var
    // A central reference to the root jQuery(document)
        rootjQuery,

    // The deferred used on DOM ready
        readyList,

    // Use the correct document accordingly with window argument (sandbox)
        document = window.document,
        location = window.location,

    // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,

    // Map over the $ in case of overwrite
        _$ = window.$,

    // [[Class]] -> type pairs
        class2type = {},

    // List of deleted data cache ids, so we can reuse them
        core_deletedIds = [],

        core_version = "1.9.0",

    // Save a reference to some core methods
        core_concat = core_deletedIds.concat,
        core_push = core_deletedIds.push,
        core_slice = core_deletedIds.slice,
        core_indexOf = core_deletedIds.indexOf,
        core_toString = class2type.toString,
        core_hasOwn = class2type.hasOwnProperty,
        core_trim = core_version.trim,

    // Define a local copy of jQuery
        jQuery = function( selector, context ) {
            // The jQuery object is actually just the init constructor 'enhanced'
            return new jQuery.fn.init( selector, context, rootjQuery );
        },

    // Used for matching numbers
        core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

    // Used for splitting on whitespace
        core_rnotwhite = /\S+/g,

    // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
        rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

    // Match a standalone tag
        rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

    // JSON RegExp
        rvalidchars = /^[\],:{}\s]*$/,
        rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
        rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
        rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

    // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,

    // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function( all, letter ) {
            return letter.toUpperCase();
        },

    // The ready event handler and self cleanup method
        DOMContentLoaded = function() {
            if ( document.addEventListener ) {
                document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
                jQuery.ready();
            } else if ( document.readyState === "complete" ) {
                // we're here because readyState === "complete" in oldIE
                // which is good enough for us to call the dom ready!
                document.detachEvent( "onreadystatechange", DOMContentLoaded );
                jQuery.ready();
            }
        };

    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: core_version,

        constructor: jQuery,
        init: function( selector, context, rootjQuery ) {
            var match, elem;

            // HANDLE: $(""), $(null), $(undefined), $(false)
            if ( !selector ) {
                return this;
            }

            // Handle HTML strings
            if ( typeof selector === "string" ) {
                if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [ null, selector, null ];

                } else {
                    match = rquickExpr.exec( selector );
                }

                // Match html or make sure no context is specified for #id
                if ( match && (match[1] || !context) ) {

                    // HANDLE: $(html) -> $(array)
                    if ( match[1] ) {
                        context = context instanceof jQuery ? context[0] : context;

                        // scripts is true for back-compat
                        jQuery.merge( this, jQuery.parseHTML(
                            match[1],
                                context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ) );

                        // HANDLE: $(html, props)
                        if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                            for ( match in context ) {
                                // Properties of context are called as methods if possible
                                if ( jQuery.isFunction( this[ match ] ) ) {
                                    this[ match ]( context[ match ] );

                                    // ...and otherwise set as attributes
                                } else {
                                    this.attr( match, context[ match ] );
                                }
                            }
                        }

                        return this;

                        // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById( match[2] );

                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if ( elem && elem.parentNode ) {
                            // Handle the case where IE and Opera return items
                            // by name instead of ID
                            if ( elem.id !== match[2] ) {
                                return rootjQuery.find( selector );
                            }

                            // Otherwise, we inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }

                        this.context = document;
                        this.selector = selector;
                        return this;
                    }

                    // HANDLE: $(expr, $(...))
                } else if ( !context || context.jquery ) {
                    return ( context || rootjQuery ).find( selector );

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor( context ).find( selector );
                }

                // HANDLE: $(DOMElement)
            } else if ( selector.nodeType ) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;

                // HANDLE: $(function)
                // Shortcut for document ready
            } else if ( jQuery.isFunction( selector ) ) {
                return rootjQuery.ready( selector );
            }

            if ( selector.selector !== undefined ) {
                this.selector = selector.selector;
                this.context = selector.context;
            }

            return jQuery.makeArray( selector, this );
        },

        // Start with an empty selector
        selector: "",

        // The default length of a jQuery object is 0
        length: 0,

        // The number of elements contained in the matched element set
        size: function() {
            return this.length;
        },

        toArray: function() {
            return core_slice.call( this );
        },

        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function( num ) {
            return num == null ?

                // Return a 'clean' array
                this.toArray() :

                // Return just the object
                ( num < 0 ? this[ this.length + num ] : this[ num ] );
        },

        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function( elems ) {

            // Build a new jQuery matched element set
            var ret = jQuery.merge( this.constructor(), elems );

            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;

            // Return the newly-formed element set
            return ret;
        },

        // Execute a callback for every element in the matched set.
        // (You can seed the arguments with an array of args, but this is
        // only used internally.)
        each: function( callback, args ) {
            return jQuery.each( this, callback, args );
        },

        ready: function( fn ) {
            // Add the callback
            jQuery.ready.promise().done( fn );

            return this;
        },

        slice: function() {
            return this.pushStack( core_slice.apply( this, arguments ) );
        },

        first: function() {
            return this.eq( 0 );
        },

        last: function() {
            return this.eq( -1 );
        },

        eq: function( i ) {
            var len = this.length,
                j = +i + ( i < 0 ? len : 0 );
            return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
        },

        map: function( callback ) {
            return this.pushStack( jQuery.map(this, function( elem, i ) {
                return callback.call( elem, i, elem );
            }));
        },

        end: function() {
            return this.prevObject || this.constructor(null);
        },

        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };

// Give the init function the jQuery prototype for later instantiation
    jQuery.fn.init.prototype = jQuery.fn;

    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if ( typeof target === "boolean" ) {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
            target = {};
        }

        // extend jQuery itself if only one argument is passed
        if ( length === i ) {
            target = this;
            --i;
        }

        for ( ; i < length; i++ ) {
            // Only deal with non-null/undefined values
            if ( (options = arguments[ i ]) != null ) {
                // Extend the base object
                for ( name in options ) {
                    src = target[ name ];
                    copy = options[ name ];

                    // Prevent never-ending loop
                    if ( target === copy ) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                        if ( copyIsArray ) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];

                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }

                        // Never move original objects, clone them
                        target[ name ] = jQuery.extend( deep, clone, copy );

                        // Don't bring in undefined values
                    } else if ( copy !== undefined ) {
                        target[ name ] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    };

    jQuery.extend({
        noConflict: function( deep ) {
            if ( window.$ === jQuery ) {
                window.$ = _$;
            }

            if ( deep && window.jQuery === jQuery ) {
                window.jQuery = _jQuery;
            }

            return jQuery;
        },

        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,

        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,

        // Hold (or release) the ready event
        holdReady: function( hold ) {
            if ( hold ) {
                jQuery.readyWait++;
            } else {
                jQuery.ready( true );
            }
        },

        // Handle when the DOM is ready
        ready: function( wait ) {

            // Abort if there are pending holds or we're already ready
            if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
                return;
            }

            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
            if ( !document.body ) {
                return setTimeout( jQuery.ready );
            }

            // Remember that the DOM is ready
            jQuery.isReady = true;

            // If a normal DOM Ready event fired, decrement, and wait if need be
            if ( wait !== true && --jQuery.readyWait > 0 ) {
                return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith( document, [ jQuery ] );

            // Trigger any bound ready events
            if ( jQuery.fn.trigger ) {
                jQuery( document ).trigger("ready").off("ready");
            }
        },

        // See test/unit/core.js for details concerning isFunction.
        // Since version 1.3, DOM methods and functions like alert
        // aren't supported. They return false on IE (#2968).
        isFunction: function( obj ) {
            return jQuery.type(obj) === "function";
        },

        isArray: Array.isArray || function( obj ) {
            return jQuery.type(obj) === "array";
        },

        isWindow: function( obj ) {
            return obj != null && obj == obj.window;
        },

        isNumeric: function( obj ) {
            return !isNaN( parseFloat(obj) ) && isFinite( obj );
        },

        type: function( obj ) {
            if ( obj == null ) {
                return String( obj );
            }
            return typeof obj === "object" || typeof obj === "function" ?
                class2type[ core_toString.call(obj) ] || "object" :
                typeof obj;
        },

        isPlainObject: function( obj ) {
            // Must be an Object.
            // Because of IE, we also have to check the presence of the constructor property.
            // Make sure that DOM nodes and window objects don't pass through, as well
            if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
                return false;
            }

            try {
                // Not own constructor property must be Object
                if ( obj.constructor &&
                    !core_hasOwn.call(obj, "constructor") &&
                    !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
                    return false;
                }
            } catch ( e ) {
                // IE8,9 Will throw exceptions on certain host objects #9897
                return false;
            }

            // Own properties are enumerated firstly, so to speed up,
            // if last one is own, then all properties are own.

            var key;
            for ( key in obj ) {}

            return key === undefined || core_hasOwn.call( obj, key );
        },

        isEmptyObject: function( obj ) {
            var name;
            for ( name in obj ) {
                return false;
            }
            return true;
        },

        error: function( msg ) {
            throw new Error( msg );
        },

        // data: string of html
        // context (optional): If specified, the fragment will be created in this context, defaults to document
        // keepScripts (optional): If true, will include scripts passed in the html string
        parseHTML: function( data, context, keepScripts ) {
            if ( !data || typeof data !== "string" ) {
                return null;
            }
            if ( typeof context === "boolean" ) {
                keepScripts = context;
                context = false;
            }
            context = context || document;

            var parsed = rsingleTag.exec( data ),
                scripts = !keepScripts && [];

            // Single tag
            if ( parsed ) {
                return [ context.createElement( parsed[1] ) ];
            }

            parsed = jQuery.buildFragment( [ data ], context, scripts );
            if ( scripts ) {
                jQuery( scripts ).remove();
            }
            return jQuery.merge( [], parsed.childNodes );
        },

        parseJSON: function( data ) {
            // Attempt to parse using the native JSON parser first
            if ( window.JSON && window.JSON.parse ) {
                return window.JSON.parse( data );
            }

            if ( data === null ) {
                return data;
            }

            if ( typeof data === "string" ) {

                // Make sure leading/trailing whitespace is removed (IE can't handle it)
                data = jQuery.trim( data );

                if ( data ) {
                    // Make sure the incoming data is actual JSON
                    // Logic borrowed from http://json.org/json2.js
                    if ( rvalidchars.test( data.replace( rvalidescape, "@" )
                        .replace( rvalidtokens, "]" )
                        .replace( rvalidbraces, "")) ) {

                        return ( new Function( "return " + data ) )();
                    }
                }
            }

            jQuery.error( "Invalid JSON: " + data );
        },

        // Cross-browser xml parsing
        parseXML: function( data ) {
            var xml, tmp;
            if ( !data || typeof data !== "string" ) {
                return null;
            }
            try {
                if ( window.DOMParser ) { // Standard
                    tmp = new DOMParser();
                    xml = tmp.parseFromString( data , "text/xml" );
                } else { // IE
                    xml = new ActiveXObject( "Microsoft.XMLDOM" );
                    xml.async = "false";
                    xml.loadXML( data );
                }
            } catch( e ) {
                xml = undefined;
            }
            if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
                jQuery.error( "Invalid XML: " + data );
            }
            return xml;
        },

        noop: function() {},

        // Evaluates a script in a global context
        // Workarounds based on findings by Jim Driscoll
        // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
        globalEval: function( data ) {
            if ( data && jQuery.trim( data ) ) {
                // We use execScript on Internet Explorer
                // We use an anonymous function so that context is window
                // rather than jQuery in Firefox
                ( window.execScript || function( data ) {
                    window[ "eval" ].call( window, data );
                } )( data );
            }
        },

        // Convert dashed to camelCase; used by the css and data modules
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function( string ) {
            return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
        },

        nodeName: function( elem, name ) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },

        // args is for internal usage only
        each: function( obj, callback, args ) {
            var value,
                i = 0,
                length = obj.length,
                isArray = isArraylike( obj );

            if ( args ) {
                if ( isArray ) {
                    for ( ; i < length; i++ ) {
                        value = callback.apply( obj[ i ], args );

                        if ( value === false ) {
                            break;
                        }
                    }
                } else {
                    for ( i in obj ) {
                        value = callback.apply( obj[ i ], args );

                        if ( value === false ) {
                            break;
                        }
                    }
                }

                // A special, fast, case for the most common use of each
            } else {
                if ( isArray ) {
                    for ( ; i < length; i++ ) {
                        value = callback.call( obj[ i ], i, obj[ i ] );

                        if ( value === false ) {
                            break;
                        }
                    }
                } else {
                    for ( i in obj ) {
                        value = callback.call( obj[ i ], i, obj[ i ] );

                        if ( value === false ) {
                            break;
                        }
                    }
                }
            }

            return obj;
        },

        // Use native String.trim function wherever possible
        trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
            function( text ) {
                return text == null ?
                    "" :
                    core_trim.call( text );
            } :

            // Otherwise use our own trimming functionality
            function( text ) {
                return text == null ?
                    "" :
                    ( text + "" ).replace( rtrim, "" );
            },

        // results is for internal usage only
        makeArray: function( arr, results ) {
            var ret = results || [];

            if ( arr != null ) {
                if ( isArraylike( Object(arr) ) ) {
                    jQuery.merge( ret,
                            typeof arr === "string" ?
                            [ arr ] : arr
                    );
                } else {
                    core_push.call( ret, arr );
                }
            }

            return ret;
        },

        inArray: function( elem, arr, i ) {
            var len;

            if ( arr ) {
                if ( core_indexOf ) {
                    return core_indexOf.call( arr, elem, i );
                }

                len = arr.length;
                i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

                for ( ; i < len; i++ ) {
                    // Skip accessing in sparse arrays
                    if ( i in arr && arr[ i ] === elem ) {
                        return i;
                    }
                }
            }

            return -1;
        },

        merge: function( first, second ) {
            var l = second.length,
                i = first.length,
                j = 0;

            if ( typeof l === "number" ) {
                for ( ; j < l; j++ ) {
                    first[ i++ ] = second[ j ];
                }
            } else {
                while ( second[j] !== undefined ) {
                    first[ i++ ] = second[ j++ ];
                }
            }

            first.length = i;

            return first;
        },

        grep: function( elems, callback, inv ) {
            var retVal,
                ret = [],
                i = 0,
                length = elems.length;
            inv = !!inv;

            // Go through the array, only saving the items
            // that pass the validator function
            for ( ; i < length; i++ ) {
                retVal = !!callback( elems[ i ], i );
                if ( inv !== retVal ) {
                    ret.push( elems[ i ] );
                }
            }

            return ret;
        },

        // arg is for internal usage only
        map: function( elems, callback, arg ) {
            var value,
                i = 0,
                length = elems.length,
                isArray = isArraylike( elems ),
                ret = [];

            // Go through the array, translating each of the items to their
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback( elems[ i ], i, arg );

                    if ( value != null ) {
                        ret[ ret.length ] = value;
                    }
                }

                // Go through every key on the object,
            } else {
                for ( i in elems ) {
                    value = callback( elems[ i ], i, arg );

                    if ( value != null ) {
                        ret[ ret.length ] = value;
                    }
                }
            }

            // Flatten any nested arrays
            return core_concat.apply( [], ret );
        },

        // A global GUID counter for objects
        guid: 1,

        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function( fn, context ) {
            var tmp, args, proxy;

            if ( typeof context === "string" ) {
                tmp = fn[ context ];
                context = fn;
                fn = tmp;
            }

            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if ( !jQuery.isFunction( fn ) ) {
                return undefined;
            }

            // Simulated bind
            args = core_slice.call( arguments, 2 );
            proxy = function() {
                return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
            };

            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;

            return proxy;
        },

        // Multifunctional method to get and set values of a collection
        // The value/s can optionally be executed if it's a function
        access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
            var i = 0,
                length = elems.length,
                bulk = key == null;

            // Sets many values
            if ( jQuery.type( key ) === "object" ) {
                chainable = true;
                for ( i in key ) {
                    jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
                }

                // Sets one value
            } else if ( value !== undefined ) {
                chainable = true;

                if ( !jQuery.isFunction( value ) ) {
                    raw = true;
                }

                if ( bulk ) {
                    // Bulk operations run against the entire set
                    if ( raw ) {
                        fn.call( elems, value );
                        fn = null;

                        // ...except when executing function values
                    } else {
                        bulk = fn;
                        fn = function( elem, key, value ) {
                            return bulk.call( jQuery( elem ), value );
                        };
                    }
                }

                if ( fn ) {
                    for ( ; i < length; i++ ) {
                        fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
                    }
                }
            }

            return chainable ?
                elems :

                // Gets
                bulk ?
                    fn.call( elems ) :
                    length ? fn( elems[0], key ) : emptyGet;
        },

        now: function() {
            return ( new Date() ).getTime();
        }
    });

    jQuery.ready.promise = function( obj ) {
        if ( !readyList ) {

            readyList = jQuery.Deferred();

            // Catch cases where $(document).ready() is called after the browser event has already occurred.
            // we once tried to use readyState "interactive" here, but it caused issues like the one
            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
            if ( document.readyState === "complete" ) {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                setTimeout( jQuery.ready );

                // Standards-based browsers support DOMContentLoaded
            } else if ( document.addEventListener ) {
                // Use the handy event callback
                document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

                // A fallback to window.onload, that will always work
                window.addEventListener( "load", jQuery.ready, false );

                // If IE event model is used
            } else {
                // Ensure firing before onload, maybe late but safe also for iframes
                document.attachEvent( "onreadystatechange", DOMContentLoaded );

                // A fallback to window.onload, that will always work
                window.attachEvent( "onload", jQuery.ready );

                // If IE and not a frame
                // continually check to see if the document is ready
                var top = false;

                try {
                    top = window.frameElement == null && document.documentElement;
                } catch(e) {}

                if ( top && top.doScroll ) {
                    (function doScrollCheck() {
                        if ( !jQuery.isReady ) {

                            try {
                                // Use the trick by Diego Perini
                                // http://javascript.nwbox.com/IEContentLoaded/
                                top.doScroll("left");
                            } catch(e) {
                                return setTimeout( doScrollCheck, 50 );
                            }

                            // and execute any waiting functions
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise( obj );
    };

// Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type[ "[object " + name + "]" ] = name.toLowerCase();
    });

    function isArraylike( obj ) {
        var length = obj.length,
            type = jQuery.type( obj );

        if ( jQuery.isWindow( obj ) ) {
            return false;
        }

        if ( obj.nodeType === 1 && length ) {
            return true;
        }

        return type === "array" || type !== "function" &&
            ( length === 0 ||
                typeof length === "number" && length > 0 && ( length - 1 ) in obj );
    }

// All jQuery objects should point back to these
    rootjQuery = jQuery(document);
// String to Object options format cache
    var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions( options ) {
        var object = optionsCache[ options ] = {};
        jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
            object[ flag ] = true;
        });
        return object;
    }

    /*
     * Create a callback list using the following parameters:
     *
     *  options: an optional list of space-separated options that will change how
     *      the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *  once:     will ensure the callback list can only be fired once (like a Deferred)
     *
     *  memory:     will keep track of previous values and will call any callback added
     *          after the list has been fired right away with the latest "memorized"
     *          values (like a Deferred)
     *
     *  unique:     will ensure a callback can only be added once (no duplicate in the list)
     *
     *  stopOnFalse:  interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function( options ) {

        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            ( optionsCache[ options ] || createOptions( options ) ) :
            jQuery.extend( {}, options );

        var // Last fire value (for non-forgettable lists)
            memory,
        // Flag to know if list was already fired
            fired,
        // Flag to know if list is currently firing
            firing,
        // First callback to fire (used internally by add and fireWith)
            firingStart,
        // End of the loop when firing
            firingLength,
        // Index of currently firing callback (modified by remove if needed)
            firingIndex,
        // Actual callback list
            list = [],
        // Stack of fire calls for repeatable lists
            stack = !options.once && [],
        // Fire callbacks
            fire = function( data ) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                    if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                        memory = false; // To prevent further calls using add
                        break;
                    }
                }
                firing = false;
                if ( list ) {
                    if ( stack ) {
                        if ( stack.length ) {
                            fire( stack.shift() );
                        }
                    } else if ( memory ) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            },
        // Actual Callbacks object
            self = {
                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if ( list ) {
                        // First, we save the current length
                        var start = list.length;
                        (function add( args ) {
                            jQuery.each( args, function( _, arg ) {
                                var type = jQuery.type( arg );
                                if ( type === "function" ) {
                                    if ( !options.unique || !self.has( arg ) ) {
                                        list.push( arg );
                                    }
                                } else if ( arg && arg.length && type !== "string" ) {
                                    // Inspect recursively
                                    add( arg );
                                }
                            });
                        })( arguments );
                        // Do we need to add the callbacks to the
                        // current firing batch?
                        if ( firing ) {
                            firingLength = list.length;
                            // With memory, if we're not firing then
                            // we should call right away
                        } else if ( memory ) {
                            firingStart = start;
                            fire( memory );
                        }
                    }
                    return this;
                },
                // Remove a callback from the list
                remove: function() {
                    if ( list ) {
                        jQuery.each( arguments, function( _, arg ) {
                            var index;
                            while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                                list.splice( index, 1 );
                                // Handle firing indexes
                                if ( firing ) {
                                    if ( index <= firingLength ) {
                                        firingLength--;
                                    }
                                    if ( index <= firingIndex ) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                // Control if a given callback is in the list
                has: function( fn ) {
                    return jQuery.inArray( fn, list ) > -1;
                },
                // Remove all callbacks from the list
                empty: function() {
                    list = [];
                    return this;
                },
                // Have the list do nothing anymore
                disable: function() {
                    list = stack = memory = undefined;
                    return this;
                },
                // Is it disabled?
                disabled: function() {
                    return !list;
                },
                // Lock the list in its current state
                lock: function() {
                    stack = undefined;
                    if ( !memory ) {
                        self.disable();
                    }
                    return this;
                },
                // Is it locked?
                locked: function() {
                    return !stack;
                },
                // Call all callbacks with the given context and arguments
                fireWith: function( context, args ) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if ( list && ( !fired || stack ) ) {
                        if ( firing ) {
                            stack.push( args );
                        } else {
                            fire( args );
                        }
                    }
                    return this;
                },
                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith( this, arguments );
                    return this;
                },
                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };

        return self;
    };
    jQuery.extend({

        Deferred: function( func ) {
            var tuples = [
                    // action, add listener, listener list, final state
                    [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                    [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                    [ "notify", "progress", jQuery.Callbacks("memory") ]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done( arguments ).fail( arguments );
                        return this;
                    },
                    then: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
                        return jQuery.Deferred(function( newDefer ) {
                            jQuery.each( tuples, function( i, tuple ) {
                                var action = tuple[ 0 ],
                                    fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                                deferred[ tuple[1] ](function() {
                                    var returned = fn && fn.apply( this, arguments );
                                    if ( returned && jQuery.isFunction( returned.promise ) ) {
                                        returned.promise()
                                            .done( newDefer.resolve )
                                            .fail( newDefer.reject )
                                            .progress( newDefer.notify );
                                    } else {
                                        newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function( obj ) {
                        return obj != null ? jQuery.extend( obj, promise ) : promise;
                    }
                },
                deferred = {};

            // Keep pipe for back-compat
            promise.pipe = promise.then;

            // Add list-specific methods
            jQuery.each( tuples, function( i, tuple ) {
                var list = tuple[ 2 ],
                    stateString = tuple[ 3 ];

                // promise[ done | fail | progress ] = list.add
                promise[ tuple[1] ] = list.add;

                // Handle state
                if ( stateString ) {
                    list.add(function() {
                        // state = [ resolved | rejected ]
                        state = stateString;

                        // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
                }

                // deferred[ resolve | reject | notify ]
                deferred[ tuple[0] ] = function() {
                    deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
                    return this;
                };
                deferred[ tuple[0] + "With" ] = list.fireWith;
            });

            // Make the deferred a promise
            promise.promise( deferred );

            // Call given func if any
            if ( func ) {
                func.call( deferred, deferred );
            }

            // All done!
            return deferred;
        },

        // Deferred helper
        when: function( subordinate /* , ..., subordinateN */ ) {
            var i = 0,
                resolveValues = core_slice.call( arguments ),
                length = resolveValues.length,

            // the count of uncompleted subordinates
                remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

            // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

            // Update function for both resolve and progress values
                updateFunc = function( i, contexts, values ) {
                    return function( value ) {
                        contexts[ i ] = this;
                        values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
                        if( values === progressValues ) {
                            deferred.notifyWith( contexts, values );
                        } else if ( !( --remaining ) ) {
                            deferred.resolveWith( contexts, values );
                        }
                    };
                },

                progressValues, progressContexts, resolveContexts;

            // add listeners to Deferred subordinates; treat others as resolved
            if ( length > 1 ) {
                progressValues = new Array( length );
                progressContexts = new Array( length );
                resolveContexts = new Array( length );
                for ( ; i < length; i++ ) {
                    if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
                        resolveValues[ i ].promise()
                            .done( updateFunc( i, resolveContexts, resolveValues ) )
                            .fail( deferred.reject )
                            .progress( updateFunc( i, progressContexts, progressValues ) );
                    } else {
                        --remaining;
                    }
                }
            }

            // if we're not waiting on anything, resolve the master
            if ( !remaining ) {
                deferred.resolveWith( resolveContexts, resolveValues );
            }

            return deferred.promise();
        }
    });
    jQuery.support = (function() {

        var support, all, a, select, opt, input, fragment, eventName, isSupported, i,
            div = document.createElement("div");

        // Setup
        div.setAttribute( "className", "t" );
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

        // Support tests won't run in some limited or non-browser environments
        all = div.getElementsByTagName("*");
        a = div.getElementsByTagName("a")[ 0 ];
        if ( !all || !a || !all.length ) {
            return {};
        }

        // First batch of tests
        select = document.createElement("select");
        opt = select.appendChild( document.createElement("option") );
        input = div.getElementsByTagName("input")[ 0 ];

        a.style.cssText = "top:1px;float:left;opacity:.5";
        support = {
            // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
            getSetAttribute: div.className !== "t",

            // IE strips leading whitespace when .innerHTML is used
            leadingWhitespace: div.firstChild.nodeType === 3,

            // Make sure that tbody elements aren't automatically inserted
            // IE will insert them into empty tables
            tbody: !div.getElementsByTagName("tbody").length,

            // Make sure that link elements get serialized correctly by innerHTML
            // This requires a wrapper element in IE
            htmlSerialize: !!div.getElementsByTagName("link").length,

            // Get the style information from getAttribute
            // (IE uses .cssText instead)
            style: /top/.test( a.getAttribute("style") ),

            // Make sure that URLs aren't manipulated
            // (IE normalizes it by default)
            hrefNormalized: a.getAttribute("href") === "/a",

            // Make sure that element opacity exists
            // (IE uses filter instead)
            // Use a regex to work around a WebKit issue. See #5145
            opacity: /^0.5/.test( a.style.opacity ),

            // Verify style float existence
            // (IE uses styleFloat instead of cssFloat)
            cssFloat: !!a.style.cssFloat,

            // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
            checkOn: !!input.value,

            // Make sure that a selected-by-default option has a working selected property.
            // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
            optSelected: opt.selected,

            // Tests for enctype support on a form (#6743)
            enctype: !!document.createElement("form").enctype,

            // Makes sure cloning an html5 element does not cause problems
            // Where outerHTML is undefined, this still works
            html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

            // jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
            boxModel: document.compatMode === "CSS1Compat",

            // Will be defined later
            deleteExpando: true,
            noCloneEvent: true,
            inlineBlockNeedsLayout: false,
            shrinkWrapBlocks: false,
            reliableMarginRight: true,
            boxSizingReliable: true,
            pixelPosition: false
        };

        // Make sure checked status is properly cloned
        input.checked = true;
        support.noCloneChecked = input.cloneNode( true ).checked;

        // Make sure that the options inside disabled selects aren't marked as disabled
        // (WebKit marks them as disabled)
        select.disabled = true;
        support.optDisabled = !opt.disabled;

        // Support: IE<9
        try {
            delete div.test;
        } catch( e ) {
            support.deleteExpando = false;
        }

        // Check if we can trust getAttribute("value")
        input = document.createElement("input");
        input.setAttribute( "value", "" );
        support.input = input.getAttribute( "value" ) === "";

        // Check if an input maintains its value after becoming a radio
        input.value = "t";
        input.setAttribute( "type", "radio" );
        support.radioValue = input.value === "t";

        // #11217 - WebKit loses check when the name is after the checked attribute
        input.setAttribute( "checked", "t" );
        input.setAttribute( "name", "t" );

        fragment = document.createDocumentFragment();
        fragment.appendChild( input );

        // Check if a disconnected checkbox will retain its checked
        // value of true after appended to the DOM (IE6/7)
        support.appendChecked = input.checked;

        // WebKit doesn't clone checked state correctly in fragments
        support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

        // Support: IE<9
        // Opera does not clone events (and typeof div.attachEvent === undefined).
        // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
        if ( div.attachEvent ) {
            div.attachEvent( "onclick", function() {
                support.noCloneEvent = false;
            });

            div.cloneNode( true ).click();
        }

        // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
        // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
        for ( i in { submit: true, change: true, focusin: true }) {
            div.setAttribute( eventName = "on" + i, "t" );

            support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
        }

        div.style.backgroundClip = "content-box";
        div.cloneNode( true ).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";

        // Run tests that need a body at doc ready
        jQuery(function() {
            var container, marginDiv, tds,
                divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
                body = document.getElementsByTagName("body")[0];

            if ( !body ) {
                // Return for frameset docs that don't have a body
                return;
            }

            container = document.createElement("div");
            container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

            body.appendChild( container ).appendChild( div );

            // Support: IE8
            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
            isSupported = ( tds[ 0 ].offsetHeight === 0 );

            tds[ 0 ].style.display = "";
            tds[ 1 ].style.display = "none";

            // Support: IE8
            // Check if empty table cells still have offsetWidth/Height
            support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

            // Check box-sizing and margin behavior
            div.innerHTML = "";
            div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
            support.boxSizing = ( div.offsetWidth === 4 );
            support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

            // Use window.getComputedStyle because jsdom on node.js will break without it.
            if ( window.getComputedStyle ) {
                support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
                support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. (#3333)
                // Fails in WebKit before Feb 2011 nightlies
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                marginDiv = div.appendChild( document.createElement("div") );
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";

                support.reliableMarginRight =
                    !parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
            }

            if ( typeof div.style.zoom !== "undefined" ) {
                // Support: IE<8
                // Check if natively block-level elements act like inline-block
                // elements when setting their display to 'inline' and giving
                // them layout
                div.innerHTML = "";
                div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

                // Support: IE6
                // Check if elements with layout shrink-wrap their children
                div.style.display = "block";
                div.innerHTML = "<div></div>";
                div.firstChild.style.width = "5px";
                support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

                // Prevent IE 6 from affecting layout for positioned elements #11048
                // Prevent IE from shrinking the body in IE 7 mode #12869
                body.style.zoom = 1;
            }

            body.removeChild( container );

            // Null elements to avoid leaks in IE
            container = div = tds = marginDiv = null;
        });

        // Null elements to avoid leaks in IE
        all = select = fragment = opt = a = input = null;

        return support;
    })();

    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
        rmultiDash = /([A-Z])/g;

    function internalData( elem, name, data, pvt /* Internal Use Only */ ){
        if ( !jQuery.acceptData( elem ) ) {
            return;
        }

        var thisCache, ret,
            internalKey = jQuery.expando,
            getByName = typeof name === "string",

        // We have to handle DOM nodes and JS objects differently because IE6-7
        // can't GC object references properly across the DOM-JS boundary
            isNode = elem.nodeType,

        // Only DOM nodes need the global jQuery cache; JS object data is
        // attached directly to the object so GC can occur automatically
            cache = isNode ? jQuery.cache : elem,

        // Only defining an ID for JS objects if its cache already exists allows
        // the code to shortcut on the same path as a DOM node with no cache
            id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

        // Avoid doing any more work than we need to when trying to get data on an
        // object that has no data at all
        if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
            return;
        }

        if ( !id ) {
            // Only DOM nodes need a new unique ID for each element since their data
            // ends up in the global cache
            if ( isNode ) {
                elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
            } else {
                id = internalKey;
            }
        }

        if ( !cache[ id ] ) {
            cache[ id ] = {};

            // Avoids exposing jQuery metadata on plain JS objects when the object
            // is serialized using JSON.stringify
            if ( !isNode ) {
                cache[ id ].toJSON = jQuery.noop;
            }
        }

        // An object can be passed to jQuery.data instead of a key/value pair; this gets
        // shallow copied over onto the existing cache
        if ( typeof name === "object" || typeof name === "function" ) {
            if ( pvt ) {
                cache[ id ] = jQuery.extend( cache[ id ], name );
            } else {
                cache[ id ].data = jQuery.extend( cache[ id ].data, name );
            }
        }

        thisCache = cache[ id ];

        // jQuery data() is stored in a separate object inside the object's internal data
        // cache in order to avoid key collisions between internal data and user-defined
        // data.
        if ( !pvt ) {
            if ( !thisCache.data ) {
                thisCache.data = {};
            }

            thisCache = thisCache.data;
        }

        if ( data !== undefined ) {
            thisCache[ jQuery.camelCase( name ) ] = data;
        }

        // Check for both converted-to-camel and non-converted data property names
        // If a data property was specified
        if ( getByName ) {

            // First Try to find as-is property data
            ret = thisCache[ name ];

            // Test for null|undefined property data
            if ( ret == null ) {

                // Try to find the camelCased property
                ret = thisCache[ jQuery.camelCase( name ) ];
            }
        } else {
            ret = thisCache;
        }

        return ret;
    }

    function internalRemoveData( elem, name, pvt /* For internal use only */ ){
        if ( !jQuery.acceptData( elem ) ) {
            return;
        }

        var thisCache, i, l,

            isNode = elem.nodeType,

        // See jQuery.data for more information
            cache = isNode ? jQuery.cache : elem,
            id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

        // If there is already no cache entry for this object, there is no
        // purpose in continuing
        if ( !cache[ id ] ) {
            return;
        }

        if ( name ) {

            thisCache = pvt ? cache[ id ] : cache[ id ].data;

            if ( thisCache ) {

                // Support array or space separated string names for data keys
                if ( !jQuery.isArray( name ) ) {

                    // try the string as a key before any manipulation
                    if ( name in thisCache ) {
                        name = [ name ];
                    } else {

                        // split the camel cased version by spaces unless a key with the spaces exists
                        name = jQuery.camelCase( name );
                        if ( name in thisCache ) {
                            name = [ name ];
                        } else {
                            name = name.split(" ");
                        }
                    }
                } else {
                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = name.concat( jQuery.map( name, jQuery.camelCase ) );
                }

                for ( i = 0, l = name.length; i < l; i++ ) {
                    delete thisCache[ name[i] ];
                }

                // If there is no data left in the cache, we want to continue
                // and let the cache object itself get destroyed
                if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
                    return;
                }
            }
        }

        // See jQuery.data for more information
        if ( !pvt ) {
            delete cache[ id ].data;

            // Don't destroy the parent cache unless the internal data object
            // had been the only thing left in it
            if ( !isEmptyDataObject( cache[ id ] ) ) {
                return;
            }
        }

        // Destroy the cache
        if ( isNode ) {
            jQuery.cleanData( [ elem ], true );

            // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
        } else if ( jQuery.support.deleteExpando || cache != cache.window ) {
            delete cache[ id ];

            // When all else fails, null
        } else {
            cache[ id ] = null;
        }
    }

    jQuery.extend({
        cache: {},

        // Unique for each copy of jQuery on the page
        // Non-digits removed to match rinlinejQuery
        expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

        // The following elements throw uncatchable exceptions if you
        // attempt to add expando properties to them.
        noData: {
            "embed": true,
            // Ban all objects except for Flash (which handle expandos)
            "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            "applet": true
        },

        hasData: function( elem ) {
            elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
            return !!elem && !isEmptyDataObject( elem );
        },

        data: function( elem, name, data ) {
            return internalData( elem, name, data, false );
        },

        removeData: function( elem, name ) {
            return internalRemoveData( elem, name, false );
        },

        // For internal use only.
        _data: function( elem, name, data ) {
            return internalData( elem, name, data, true );
        },

        _removeData: function( elem, name ) {
            return internalRemoveData( elem, name, true );
        },

        // A method for determining if a DOM node can handle the data expando
        acceptData: function( elem ) {
            var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

            // nodes accept data unless otherwise specified; rejection can be conditional
            return !noData || noData !== true && elem.getAttribute("classid") === noData;
        }
    });

    jQuery.fn.extend({
        data: function( key, value ) {
            var attrs, name,
                elem = this[0],
                i = 0,
                data = null;

            // Gets all values
            if ( key === undefined ) {
                if ( this.length ) {
                    data = jQuery.data( elem );

                    if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
                        attrs = elem.attributes;
                        for ( ; i < attrs.length; i++ ) {
                            name = attrs[i].name;

                            if ( !name.indexOf( "data-" ) ) {
                                name = jQuery.camelCase( name.substring(5) );

                                dataAttr( elem, name, data[ name ] );
                            }
                        }
                        jQuery._data( elem, "parsedAttrs", true );
                    }
                }

                return data;
            }

            // Sets multiple values
            if ( typeof key === "object" ) {
                return this.each(function() {
                    jQuery.data( this, key );
                });
            }

            return jQuery.access( this, function( value ) {

                if ( value === undefined ) {
                    // Try to fetch any internally stored data first
                    return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
                }

                this.each(function() {
                    jQuery.data( this, key, value );
                });
            }, null, value, arguments.length > 1, null, true );
        },

        removeData: function( key ) {
            return this.each(function() {
                jQuery.removeData( this, key );
            });
        }
    });

    function dataAttr( elem, key, data ) {
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if ( data === undefined && elem.nodeType === 1 ) {

            var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

            data = elem.getAttribute( name );

            if ( typeof data === "string" ) {
                try {
                    data = data === "true" ? true :
                            data === "false" ? false :
                            data === "null" ? null :
                        // Only convert to a number if it doesn't change the string
                            +data + "" === data ? +data :
                        rbrace.test( data ) ? jQuery.parseJSON( data ) :
                            data;
                } catch( e ) {}

                // Make sure we set the data so it isn't changed later
                jQuery.data( elem, key, data );

            } else {
                data = undefined;
            }
        }

        return data;
    }

// checks a cache object for emptiness
    function isEmptyDataObject( obj ) {
        var name;
        for ( name in obj ) {

            // if the public data object is empty, the private is still empty
            if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
                continue;
            }
            if ( name !== "toJSON" ) {
                return false;
            }
        }

        return true;
    }
    jQuery.extend({
        queue: function( elem, type, data ) {
            var queue;

            if ( elem ) {
                type = ( type || "fx" ) + "queue";
                queue = jQuery._data( elem, type );

                // Speed up dequeue by getting out quickly if this is just a lookup
                if ( data ) {
                    if ( !queue || jQuery.isArray(data) ) {
                        queue = jQuery._data( elem, type, jQuery.makeArray(data) );
                    } else {
                        queue.push( data );
                    }
                }
                return queue || [];
            }
        },

        dequeue: function( elem, type ) {
            type = type || "fx";

            var queue = jQuery.queue( elem, type ),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks( elem, type ),
                next = function() {
                    jQuery.dequeue( elem, type );
                };

            // If the fx queue is dequeued, always remove the progress sentinel
            if ( fn === "inprogress" ) {
                fn = queue.shift();
                startLength--;
            }

            hooks.cur = fn;
            if ( fn ) {

                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if ( type === "fx" ) {
                    queue.unshift( "inprogress" );
                }

                // clear up the last queue stop function
                delete hooks.stop;
                fn.call( elem, next, hooks );
            }

            if ( !startLength && hooks ) {
                hooks.empty.fire();
            }
        },

        // not intended for public consumption - generates a queueHooks object, or returns the current one
        _queueHooks: function( elem, type ) {
            var key = type + "queueHooks";
            return jQuery._data( elem, key ) || jQuery._data( elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData( elem, type + "queue" );
                    jQuery._removeData( elem, key );
                })
            });
        }
    });

    jQuery.fn.extend({
        queue: function( type, data ) {
            var setter = 2;

            if ( typeof type !== "string" ) {
                data = type;
                type = "fx";
                setter--;
            }

            if ( arguments.length < setter ) {
                return jQuery.queue( this[0], type );
            }

            return data === undefined ?
                this :
                this.each(function() {
                    var queue = jQuery.queue( this, type, data );

                    // ensure a hooks for this queue
                    jQuery._queueHooks( this, type );

                    if ( type === "fx" && queue[0] !== "inprogress" ) {
                        jQuery.dequeue( this, type );
                    }
                });
        },
        dequeue: function( type ) {
            return this.each(function() {
                jQuery.dequeue( this, type );
            });
        },
        // Based off of the plugin by Clint Helfers, with permission.
        // http://blindsignals.com/index.php/2009/07/jquery-delay/
        delay: function( time, type ) {
            time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
            type = type || "fx";

            return this.queue( type, function( next, hooks ) {
                var timeout = setTimeout( next, time );
                hooks.stop = function() {
                    clearTimeout( timeout );
                };
            });
        },
        clearQueue: function( type ) {
            return this.queue( type || "fx", [] );
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function( type, obj ) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if ( !( --count ) ) {
                        defer.resolveWith( elements, [ elements ] );
                    }
                };

            if ( typeof type !== "string" ) {
                obj = type;
                type = undefined;
            }
            type = type || "fx";

            while( i-- ) {
                tmp = jQuery._data( elements[ i ], type + "queueHooks" );
                if ( tmp && tmp.empty ) {
                    count++;
                    tmp.empty.add( resolve );
                }
            }
            resolve();
            return defer.promise( obj );
        }
    });
    var nodeHook, boolHook,
        rclass = /[\t\r\n]/g,
        rreturn = /\r/g,
        rfocusable = /^(?:input|select|textarea|button|object)$/i,
        rclickable = /^(?:a|area)$/i,
        rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
        ruseDefault = /^(?:checked|selected)$/i,
        getSetAttribute = jQuery.support.getSetAttribute,
        getSetInput = jQuery.support.input;

    jQuery.fn.extend({
        attr: function( name, value ) {
            return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
        },

        removeAttr: function( name ) {
            return this.each(function() {
                jQuery.removeAttr( this, name );
            });
        },

        prop: function( name, value ) {
            return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
        },

        removeProp: function( name ) {
            name = jQuery.propFix[ name ] || name;
            return this.each(function() {
                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[ name ] = undefined;
                    delete this[ name ];
                } catch( e ) {}
            });
        },

        addClass: function( value ) {
            var classes, elem, cur, clazz, j,
                i = 0,
                len = this.length,
                proceed = typeof value === "string" && value;

            if ( jQuery.isFunction( value ) ) {
                return this.each(function( j ) {
                    jQuery( this ).addClass( value.call( this, j, this.className ) );
                });
            }

            if ( proceed ) {
                // The disjunction here is for better compressibility (see removeClass)
                classes = ( value || "" ).match( core_rnotwhite ) || [];

                for ( ; i < len; i++ ) {
                    elem = this[ i ];
                    cur = elem.nodeType === 1 && ( elem.className ?
                        ( " " + elem.className + " " ).replace( rclass, " " ) :
                        " "
                        );

                    if ( cur ) {
                        j = 0;
                        while ( (clazz = classes[j++]) ) {
                            if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                                cur += clazz + " ";
                            }
                        }
                        elem.className = jQuery.trim( cur );

                    }
                }
            }

            return this;
        },

        removeClass: function( value ) {
            var classes, elem, cur, clazz, j,
                i = 0,
                len = this.length,
                proceed = arguments.length === 0 || typeof value === "string" && value;

            if ( jQuery.isFunction( value ) ) {
                return this.each(function( j ) {
                    jQuery( this ).removeClass( value.call( this, j, this.className ) );
                });
            }
            if ( proceed ) {
                classes = ( value || "" ).match( core_rnotwhite ) || [];

                for ( ; i < len; i++ ) {
                    elem = this[ i ];
                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && ( elem.className ?
                        ( " " + elem.className + " " ).replace( rclass, " " ) :
                        ""
                        );

                    if ( cur ) {
                        j = 0;
                        while ( (clazz = classes[j++]) ) {
                            // Remove *all* instances
                            while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
                                cur = cur.replace( " " + clazz + " ", " " );
                            }
                        }
                        elem.className = value ? jQuery.trim( cur ) : "";
                    }
                }
            }

            return this;
        },

        toggleClass: function( value, stateVal ) {
            var type = typeof value,
                isBool = typeof stateVal === "boolean";

            if ( jQuery.isFunction( value ) ) {
                return this.each(function( i ) {
                    jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
                });
            }

            return this.each(function() {
                if ( type === "string" ) {
                    // toggle individual class names
                    var className,
                        i = 0,
                        self = jQuery( this ),
                        state = stateVal,
                        classNames = value.match( core_rnotwhite ) || [];

                    while ( (className = classNames[ i++ ]) ) {
                        // check each className given, space separated list
                        state = isBool ? state : !self.hasClass( className );
                        self[ state ? "addClass" : "removeClass" ]( className );
                    }

                    // Toggle whole class name
                } else if ( type === "undefined" || type === "boolean" ) {
                    if ( this.className ) {
                        // store className if set
                        jQuery._data( this, "__className__", this.className );
                    }

                    // If the element has a class name or if we're passed "false",
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
                }
            });
        },

        hasClass: function( selector ) {
            var className = " " + selector + " ",
                i = 0,
                l = this.length;
            for ( ; i < l; i++ ) {
                if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
                    return true;
                }
            }

            return false;
        },

        val: function( value ) {
            var hooks, ret, isFunction,
                elem = this[0];

            if ( !arguments.length ) {
                if ( elem ) {
                    hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

                    if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
                        return ret;
                    }

                    ret = elem.value;

                    return typeof ret === "string" ?
                        // handle most common string cases
                        ret.replace(rreturn, "") :
                        // handle cases where value is null/undef or number
                            ret == null ? "" : ret;
                }

                return;
            }

            isFunction = jQuery.isFunction( value );

            return this.each(function( i ) {
                var val,
                    self = jQuery(this);

                if ( this.nodeType !== 1 ) {
                    return;
                }

                if ( isFunction ) {
                    val = value.call( this, i, self.val() );
                } else {
                    val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if ( val == null ) {
                    val = "";
                } else if ( typeof val === "number" ) {
                    val += "";
                } else if ( jQuery.isArray( val ) ) {
                    val = jQuery.map(val, function ( value ) {
                        return value == null ? "" : value + "";
                    });
                }

                hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

                // If set returns undefined, fall back to normal setting
                if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
                    this.value = val;
                }
            });
        }
    });

    jQuery.extend({
        valHooks: {
            option: {
                get: function( elem ) {
                    // attributes.value is undefined in Blackberry 4.7 but
                    // uses .value. See #6932
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text;
                }
            },
            select: {
                get: function( elem ) {
                    var value, option,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one" || index < 0,
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ?
                            max :
                            one ? index : 0;

                    // Loop through all the selected options
                    for ( ; i < max; i++ ) {
                        option = options[ i ];

                        // oldIE doesn't update selected after form reset (#2551)
                        if ( ( option.selected || i === index ) &&
                            // Don't return options that are disabled or in a disabled optgroup
                            ( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
                            ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

                            // Get the specific value for the option
                            value = jQuery( option ).val();

                            // We don't need an array for one selects
                            if ( one ) {
                                return value;
                            }

                            // Multi-Selects return an array
                            values.push( value );
                        }
                    }

                    return values;
                },

                set: function( elem, value ) {
                    var values = jQuery.makeArray( value );

                    jQuery(elem).find("option").each(function() {
                        this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
                    });

                    if ( !values.length ) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },

        attr: function( elem, name, value ) {
            var ret, hooks, notxml,
                nType = elem.nodeType;

            // don't get/set attributes on text, comment and attribute nodes
            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }

            // Fallback to prop when attributes are not supported
            if ( typeof elem.getAttribute === "undefined" ) {
                return jQuery.prop( elem, name, value );
            }

            notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if ( notxml ) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
            }

            if ( value !== undefined ) {

                if ( value === null ) {
                    jQuery.removeAttr( elem, name );

                } else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                    return ret;

                } else {
                    elem.setAttribute( name, value + "" );
                    return value;
                }

            } else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
                return ret;

            } else {

                // In IE9+, Flash objects don't have .getAttribute (#12945)
                // Support: IE9+
                if ( typeof elem.getAttribute !== "undefined" ) {
                    ret =  elem.getAttribute( name );
                }

                // Non-existent attributes return null, we normalize to undefined
                return ret == null ?
                    undefined :
                    ret;
            }
        },

        removeAttr: function( elem, value ) {
            var name, propName,
                i = 0,
                attrNames = value && value.match( core_rnotwhite );

            if ( attrNames && elem.nodeType === 1 ) {
                while ( (name = attrNames[i++]) ) {
                    propName = jQuery.propFix[ name ] || name;

                    // Boolean attributes get special treatment (#10870)
                    if ( rboolean.test( name ) ) {
                        // Set corresponding property to false for boolean attributes
                        // Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
                        if ( !getSetAttribute && ruseDefault.test( name ) ) {
                            elem[ jQuery.camelCase( "default-" + name ) ] =
                                elem[ propName ] = false;
                        } else {
                            elem[ propName ] = false;
                        }

                        // See #9699 for explanation of this approach (setting first, then removal)
                    } else {
                        jQuery.attr( elem, name, "" );
                    }

                    elem.removeAttribute( getSetAttribute ? name : propName );
                }
            }
        },

        attrHooks: {
            type: {
                set: function( elem, value ) {
                    if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
                        // Setting the type on a radio button after the value resets the value in IE6-9
                        // Reset value to default in case type is set after value during creation
                        var val = elem.value;
                        elem.setAttribute( "type", value );
                        if ( val ) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },

        propFix: {
            tabindex: "tabIndex",
            readonly: "readOnly",
            "for": "htmlFor",
            "class": "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder",
            contenteditable: "contentEditable"
        },

        prop: function( elem, name, value ) {
            var ret, hooks, notxml,
                nType = elem.nodeType;

            // don't get/set properties on text, comment and attribute nodes
            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }

            notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

            if ( notxml ) {
                // Fix name and attach hooks
                name = jQuery.propFix[ name ] || name;
                hooks = jQuery.propHooks[ name ];
            }

            if ( value !== undefined ) {
                if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                    return ret;

                } else {
                    return ( elem[ name ] = value );
                }

            } else {
                if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
                    return ret;

                } else {
                    return elem[ name ];
                }
            }
        },

        propHooks: {
            tabIndex: {
                get: function( elem ) {
                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    var attributeNode = elem.getAttributeNode("tabindex");

                    return attributeNode && attributeNode.specified ?
                        parseInt( attributeNode.value, 10 ) :
                            rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
                        0 :
                        undefined;
                }
            }
        }
    });

// Hook for boolean attributes
    boolHook = {
        get: function( elem, name ) {
            var
            // Use .prop to determine if this attribute is understood as boolean
                prop = jQuery.prop( elem, name ),

            // Fetch it accordingly
                attr = typeof prop === "boolean" && elem.getAttribute( name ),
                detail = typeof prop === "boolean" ?

                        getSetInput && getSetAttribute ?
                    attr != null :
                    // oldIE fabricates an empty string for missing boolean attributes
                    // and conflates checked/selected into attroperties
                    ruseDefault.test( name ) ?
                        elem[ jQuery.camelCase( "default-" + name ) ] :
                        !!attr :

                    // fetch an attribute node for properties not recognized as boolean
                    elem.getAttributeNode( name );

            return detail && detail.value !== false ?
                name.toLowerCase() :
                undefined;
        },
        set: function( elem, value, name ) {
            if ( value === false ) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr( elem, name );
            } else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
                // IE<8 needs the *property* name
                elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

                // Use defaultChecked and defaultSelected for oldIE
            } else {
                elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
            }

            return name;
        }
    };

// fix oldIE value attroperty
    if ( !getSetInput || !getSetAttribute ) {
        jQuery.attrHooks.value = {
            get: function( elem, name ) {
                var ret = elem.getAttributeNode( name );
                return jQuery.nodeName( elem, "input" ) ?

                    // Ignore the value *property* by using defaultValue
                    elem.defaultValue :

                        ret && ret.specified ? ret.value : undefined;
            },
            set: function( elem, value, name ) {
                if ( jQuery.nodeName( elem, "input" ) ) {
                    // Does not return so that setAttribute is also used
                    elem.defaultValue = value;
                } else {
                    // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                    return nodeHook && nodeHook.set( elem, value, name );
                }
            }
        };
    }

// IE6/7 do not support getting/setting some attributes with get/setAttribute
    if ( !getSetAttribute ) {

        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = jQuery.valHooks.button = {
            get: function( elem, name ) {
                var ret = elem.getAttributeNode( name );
                return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
                    ret.value :
                    undefined;
            },
            set: function( elem, value, name ) {
                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode( name );
                if ( !ret ) {
                    elem.setAttributeNode(
                        (ret = elem.ownerDocument.createAttribute( name ))
                    );
                }

                ret.value = value += "";

                // Break association with cloned elements by also using setAttribute (#9646)
                return name === "value" || value === elem.getAttribute( name ) ?
                    value :
                    undefined;
            }
        };

        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            get: nodeHook.get,
            set: function( elem, value, name ) {
                nodeHook.set( elem, value === "" ? false : value, name );
            }
        };

        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each([ "width", "height" ], function( i, name ) {
            jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
                set: function( elem, value ) {
                    if ( value === "" ) {
                        elem.setAttribute( name, "auto" );
                        return value;
                    }
                }
            });
        });
    }


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if ( !jQuery.support.hrefNormalized ) {
        jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
            jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
                get: function( elem ) {
                    var ret = elem.getAttribute( name, 2 );
                    return ret == null ? undefined : ret;
                }
            });
        });

        // href/src property should get the full normalized URL (#10299/#12915)
        jQuery.each([ "href", "src" ], function( i, name ) {
            jQuery.propHooks[ name ] = {
                get: function( elem ) {
                    return elem.getAttribute( name, 4 );
                }
            };
        });
    }

    if ( !jQuery.support.style ) {
        jQuery.attrHooks.style = {
            get: function( elem ) {
                // Return undefined in the case of empty string
                // Note: IE uppercases css property names, but if we were to .toLowerCase()
                // .cssText, that would destroy case senstitivity in URL's, like in "background"
                return elem.style.cssText || undefined;
            },
            set: function( elem, value ) {
                return ( elem.style.cssText = value + "" );
            }
        };
    }

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
    if ( !jQuery.support.optSelected ) {
        jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
            get: function( elem ) {
                var parent = elem.parentNode;

                if ( parent ) {
                    parent.selectedIndex;

                    // Make sure that it also works with optgroups, see #5701
                    if ( parent.parentNode ) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        });
    }

// IE6/7 call enctype encoding
    if ( !jQuery.support.enctype ) {
        jQuery.propFix.enctype = "encoding";
    }

// Radios and checkboxes getter/setter
    if ( !jQuery.support.checkOn ) {
        jQuery.each([ "radio", "checkbox" ], function() {
            jQuery.valHooks[ this ] = {
                get: function( elem ) {
                    // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
                    return elem.getAttribute("value") === null ? "on" : elem.value;
                }
            };
        });
    }
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
            set: function( elem, value ) {
                if ( jQuery.isArray( value ) ) {
                    return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
                }
            }
        });
    });
    var rformElems = /^(?:input|select|textarea)$/i,
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {

        global: {},

        add: function( elem, types, handler, data, selector ) {

            var handleObjIn, eventHandle, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
            // Don't attach events to noData or text/comment nodes (but allow plain objects)
                elemData = elem.nodeType !== 3 && elem.nodeType !== 8 && jQuery._data( elem );

            if ( !elemData ) {
                return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if ( handler.handler ) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if ( !handler.guid ) {
                handler.guid = jQuery.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            if ( !(events = elemData.events) ) {
                events = elemData.events = {};
            }
            if ( !(eventHandle = elemData.handle) ) {
                eventHandle = elemData.handle = function( e ) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
                        jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
                        undefined;
                };
                // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                eventHandle.elem = elem;
            }

            // Handle multiple events separated by a space
            // jQuery(...).bind("mouseover mouseout", fn);
            types = ( types || "" ).match( core_rnotwhite ) || [""];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[t] ) || [];
                type = origType = tmp[1];
                namespaces = ( tmp[2] || "" ).split( "." ).sort();

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[ type ] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = ( selector ? special.delegateType : special.bindType ) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[ type ] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                    namespace: namespaces.join(".")
                }, handleObjIn );

                // Init the event handler queue if we're the first
                if ( !(handlers = events[ type ]) ) {
                    handlers = events[ type ] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener/attachEvent if the special events handler returns false
                    if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
                        // Bind the global event handler to the element
                        if ( elem.addEventListener ) {
                            elem.addEventListener( type, eventHandle, false );

                        } else if ( elem.attachEvent ) {
                            elem.attachEvent( "on" + type, eventHandle );
                        }
                    }
                }

                if ( special.add ) {
                    special.add.call( elem, handleObj );

                    if ( !handleObj.handler.guid ) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if ( selector ) {
                    handlers.splice( handlers.delegateCount++, 0, handleObj );
                } else {
                    handlers.push( handleObj );
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[ type ] = true;
            }

            // Nullify elem to prevent memory leaks in IE
            elem = null;
        },

        // Detach an event or set of events from an element
        remove: function( elem, types, handler, selector, mappedTypes ) {

            var j, origCount, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = jQuery.hasData( elem ) && jQuery._data( elem );

            if ( !elemData || !(events = elemData.events) ) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = ( types || "" ).match( core_rnotwhite ) || [""];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[t] ) || [];
                type = origType = tmp[1];
                namespaces = ( tmp[2] || "" ).split( "." ).sort();

                // Unbind all events (on this namespace, if provided) for the element
                if ( !type ) {
                    for ( type in events ) {
                        jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                    }
                    continue;
                }

                special = jQuery.event.special[ type ] || {};
                type = ( selector ? special.delegateType : special.bindType ) || type;
                handlers = events[ type ] || [];
                tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

                // Remove matching events
                origCount = j = handlers.length;
                while ( j-- ) {
                    handleObj = handlers[ j ];

                    if ( ( mappedTypes || origType === handleObj.origType ) &&
                        ( !handler || handler.guid === handleObj.guid ) &&
                        ( !tmp || tmp.test( handleObj.namespace ) ) &&
                        ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
                        handlers.splice( j, 1 );

                        if ( handleObj.selector ) {
                            handlers.delegateCount--;
                        }
                        if ( special.remove ) {
                            special.remove.call( elem, handleObj );
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if ( origCount && !handlers.length ) {
                    if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
                        jQuery.removeEvent( elem, type, elemData.handle );
                    }

                    delete events[ type ];
                }
            }

            // Remove the expando if it's no longer used
            if ( jQuery.isEmptyObject( events ) ) {
                delete elemData.handle;

                // removeData also checks for emptiness and clears the expando if empty
                // so use it instead of delete
                jQuery._removeData( elem, "events" );
            }
        },

        trigger: function( event, data, elem, onlyHandlers ) {

            var i, cur, tmp, bubbleType, ontype, handle, special,
                eventPath = [ elem || document ],
                type = event.type || event,
                namespaces = event.namespace ? event.namespace.split(".") : [];

            cur = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
                return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
                return;
            }

            if ( type.indexOf(".") >= 0 ) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;

            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[ jQuery.expando ] ?
                event :
                new jQuery.Event( type, typeof event === "object" && event );

            event.isTrigger = true;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ?
                new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
                null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if ( !event.target ) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ?
                [ event ] :
                jQuery.makeArray( data, [ event ] );

            // Allow special events to draw outside the lines
            special = jQuery.event.special[ type ] || {};
            if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

                bubbleType = special.delegateType || type;
                if ( !rfocusMorph.test( bubbleType + type ) ) {
                    cur = cur.parentNode;
                }
                for ( ; cur; cur = cur.parentNode ) {
                    eventPath.push( cur );
                    tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if ( tmp === (elem.ownerDocument || document) ) {
                    eventPath.push( tmp.defaultView || tmp.parentWindow || window );
                }
            }

            // Fire handlers on the event path
            i = 0;
            while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;

                // jQuery handler
                handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
                if ( handle ) {
                    handle.apply( cur, data );
                }

                // Native handler
                handle = ontype && cur[ ontype ];
                if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
                    event.preventDefault();
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if ( !onlyHandlers && !event.isDefaultPrevented() ) {

                if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
                    !(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

                    // Call a native DOM method on the target with the same name name as the event.
                    // Can't use an .isFunction() check here because IE6/7 fails that test.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ ontype ];

                        if ( tmp ) {
                            elem[ ontype ] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        try {
                            elem[ type ]();
                        } catch ( e ) {
                            // IE<9 dies on focus/blur to hidden element (#1486,#12518)
                            // only reproducible on winXP IE8 native, not IE9 in IE8 mode
                        }
                        jQuery.event.triggered = undefined;

                        if ( tmp ) {
                            elem[ ontype ] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },

        dispatch: function( event ) {

            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix( event );

            var i, j, ret, matched, handleObj,
                handlerQueue = [],
                args = core_slice.call( arguments ),
                handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
                special = jQuery.event.special[ event.type ] || {};

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
                return;
            }

            // Determine handlers
            handlerQueue = jQuery.event.handlers.call( this, event, handlers );

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
                event.currentTarget = matched.elem;

                j = 0;
                while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

                    // Triggered event must either 1) have no namespace, or
                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                    if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                            .apply( matched.elem, args );

                        if ( ret !== undefined ) {
                            if ( (event.result = ret) === false ) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if ( special.postDispatch ) {
                special.postDispatch.call( this, event );
            }

            return event.result;
        },

        handlers: function( event, handlers ) {
            var i, matches, sel, handleObj,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            // Avoid non-left-click bubbling in Firefox (#3861)
            if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

                for ( ; cur != this; cur = cur.parentNode || this ) {

                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if ( cur.disabled !== true || event.type !== "click" ) {
                        matches = [];
                        for ( i = 0; i < delegateCount; i++ ) {
                            handleObj = handlers[ i ];

                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";

                            if ( matches[ sel ] === undefined ) {
                                matches[ sel ] = handleObj.needsContext ?
                                    jQuery( sel, this ).index( cur ) >= 0 :
                                    jQuery.find( sel, this, null, [ cur ] ).length;
                            }
                            if ( matches[ sel ] ) {
                                matches.push( handleObj );
                            }
                        }
                        if ( matches.length ) {
                            handlerQueue.push({ elem: cur, handlers: matches });
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            if ( delegateCount < handlers.length ) {
                handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
            }

            return handlerQueue;
        },

        fix: function( event ) {
            if ( event[ jQuery.expando ] ) {
                return event;
            }

            // Create a writable copy of the event object and normalize some properties
            var i, prop,
                originalEvent = event,
                fixHook = jQuery.event.fixHooks[ event.type ] || {},
                copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

            event = new jQuery.Event( originalEvent );

            i = copy.length;
            while ( i-- ) {
                prop = copy[ i ];
                event[ prop ] = originalEvent[ prop ];
            }

            // Support: IE<9
            // Fix target property (#1925)
            if ( !event.target ) {
                event.target = originalEvent.srcElement || document;
            }

            // Support: Chrome 23+, Safari?
            // Target should not be a text node (#504, #13143)
            if ( event.target.nodeType === 3 ) {
                event.target = event.target.parentNode;
            }

            // Support: IE<9
            // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
            event.metaKey = !!event.metaKey;

            return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
        },

        // Includes some event props shared by KeyEvent and MouseEvent
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

        fixHooks: {},

        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function( event, original ) {

                // Add which for key events
                if ( event.which == null ) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }

                return event;
            }
        },

        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function( event, original ) {
                var eventDoc, doc, body,
                    button = original.button,
                    fromElement = original.fromElement;

                // Calculate pageX/Y if missing and clientX/Y available
                if ( event.pageX == null && original.clientX != null ) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;

                    event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                    event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
                }

                // Add relatedTarget, if necessary
                if ( !event.relatedTarget && fromElement ) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }

                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if ( !event.which && button !== undefined ) {
                    event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
                }

                return event;
            }
        },

        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
                        this.click();
                        return false;
                    }
                }
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if ( this !== document.activeElement && this.focus ) {
                        try {
                            this.focus();
                            return false;
                        } catch ( e ) {
                            // Support: IE<9
                            // If we error on focus to hidden element (#1486, #12518),
                            // let .trigger() run the handlers
                        }
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if ( this === document.activeElement && this.blur ) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },

            beforeunload: {
                postDispatch: function( event ) {

                    // Even when returnValue equals to undefined Firefox will still show alert
                    if ( event.result !== undefined ) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },

        simulate: function( type, elem, event, bubble ) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(
                new jQuery.Event(),
                event,
                { type: type,
                    isSimulated: true,
                    originalEvent: {}
                }
            );
            if ( bubble ) {
                jQuery.event.trigger( e, null, elem );
            } else {
                jQuery.event.dispatch.call( elem, e );
            }
            if ( e.isDefaultPrevented() ) {
                event.preventDefault();
            }
        }
    };

    jQuery.removeEvent = document.removeEventListener ?
        function( elem, type, handle ) {
            if ( elem.removeEventListener ) {
                elem.removeEventListener( type, handle, false );
            }
        } :
        function( elem, type, handle ) {
            var name = "on" + type;

            if ( elem.detachEvent ) {

                // #8545, #7054, preventing memory leaks for custom events in IE6-8
                // detachEvent needed property on element, by name of that event, to properly expose it to GC
                if ( typeof elem[ name ] === "undefined" ) {
                    elem[ name ] = null;
                }

                elem.detachEvent( name, handle );
            }
        };

    jQuery.Event = function( src, props ) {
        // Allow instantiation without the 'new' keyword
        if ( !(this instanceof jQuery.Event) ) {
            return new jQuery.Event( src, props );
        }

        // Event object
        if ( src && src.type ) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
                src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

            // Event type
        } else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if ( props ) {
            jQuery.extend( this, props );
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();

        // Mark it as fixed
        this[ jQuery.expando ] = true;
    };

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,

        preventDefault: function() {
            var e = this.originalEvent;

            this.isDefaultPrevented = returnTrue;
            if ( !e ) {
                return;
            }

            // If preventDefault exists, run it on the original event
            if ( e.preventDefault ) {
                e.preventDefault();

                // Support: IE
                // Otherwise set the returnValue property of the original event to false
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;

            this.isPropagationStopped = returnTrue;
            if ( !e ) {
                return;
            }
            // If stopPropagation exists, run it on the original event
            if ( e.stopPropagation ) {
                e.stopPropagation();
            }

            // Support: IE
            // Set the cancelBubble property of the original event to true
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };

// Create mouseenter/leave events using mouseover/out and event-time checks
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function( orig, fix ) {
        jQuery.event.special[ orig ] = {
            delegateType: fix,
            bindType: fix,

            handle: function( event ) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply( this, arguments );
                    event.type = fix;
                }
                return ret;
            }
        };
    });

// IE submit delegation
    if ( !jQuery.support.submitBubbles ) {

        jQuery.event.special.submit = {
            setup: function() {
                // Only need this for delegated form submit events
                if ( jQuery.nodeName( this, "form" ) ) {
                    return false;
                }

                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target,
                        form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
                    if ( form && !jQuery._data( form, "submitBubbles" ) ) {
                        jQuery.event.add( form, "submit._submit", function( event ) {
                            event._submit_bubble = true;
                        });
                        jQuery._data( form, "submitBubbles", true );
                    }
                });
                // return undefined since we don't need an event listener
            },

            postDispatch: function( event ) {
                // If form was submitted by the user, bubble the event up the tree
                if ( event._submit_bubble ) {
                    delete event._submit_bubble;
                    if ( this.parentNode && !event.isTrigger ) {
                        jQuery.event.simulate( "submit", this.parentNode, event, true );
                    }
                }
            },

            teardown: function() {
                // Only need this for delegated form submit events
                if ( jQuery.nodeName( this, "form" ) ) {
                    return false;
                }

                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove( this, "._submit" );
            }
        };
    }

// IE change delegation and checkbox/radio fix
    if ( !jQuery.support.changeBubbles ) {

        jQuery.event.special.change = {

            setup: function() {

                if ( rformElems.test( this.nodeName ) ) {
                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if ( this.type === "checkbox" || this.type === "radio" ) {
                        jQuery.event.add( this, "propertychange._change", function( event ) {
                            if ( event.originalEvent.propertyName === "checked" ) {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add( this, "click._change", function( event ) {
                            if ( this._just_changed && !event.isTrigger ) {
                                this._just_changed = false;
                            }
                            // Allow triggered, simulated change events (#11500)
                            jQuery.event.simulate( "change", this, event, true );
                        });
                    }
                    return false;
                }
                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add( this, "beforeactivate._change", function( e ) {
                    var elem = e.target;

                    if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
                        jQuery.event.add( elem, "change._change", function( event ) {
                            if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
                                jQuery.event.simulate( "change", this.parentNode, event, true );
                            }
                        });
                        jQuery._data( elem, "changeBubbles", true );
                    }
                });
            },

            handle: function( event ) {
                var elem = event.target;

                // Swallow native change events from checkbox/radio, we already triggered them above
                if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
                    return event.handleObj.handler.apply( this, arguments );
                }
            },

            teardown: function() {
                jQuery.event.remove( this, "._change" );

                return !rformElems.test( this.nodeName );
            }
        };
    }

// Create "bubbling" focus and blur events
    if ( !jQuery.support.focusinBubbles ) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

            // Attach a single capturing handler while someone wants focusin/focusout
            var attaches = 0,
                handler = function( event ) {
                    jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
                };

            jQuery.event.special[ fix ] = {
                setup: function() {
                    if ( attaches++ === 0 ) {
                        document.addEventListener( orig, handler, true );
                    }
                },
                teardown: function() {
                    if ( --attaches === 0 ) {
                        document.removeEventListener( orig, handler, true );
                    }
                }
            };
        });
    }

    jQuery.fn.extend({

        on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
            var origFn, type;

            // Types can be a map of types/handlers
            if ( typeof types === "object" ) {
                // ( types-Object, selector, data )
                if ( typeof selector !== "string" ) {
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for ( type in types ) {
                    this.on( type, selector, data, types[ type ], one );
                }
                return this;
            }

            if ( data == null && fn == null ) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if ( fn == null ) {
                if ( typeof selector === "string" ) {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if ( fn === false ) {
                fn = returnFalse;
            } else if ( !fn ) {
                return this;
            }

            if ( one === 1 ) {
                origFn = fn;
                fn = function( event ) {
                    // Can use an empty set, since event contains the info
                    jQuery().off( event );
                    return origFn.apply( this, arguments );
                };
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
            }
            return this.each( function() {
                jQuery.event.add( this, types, fn, data, selector );
            });
        },
        one: function( types, selector, data, fn ) {
            return this.on( types, selector, data, fn, 1 );
        },
        off: function( types, selector, fn ) {
            var handleObj, type;
            if ( types && types.preventDefault && types.handleObj ) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery( types.delegateTarget ).off(
                    handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if ( typeof types === "object" ) {
                // ( types-object [, selector] )
                for ( type in types ) {
                    this.off( type, selector, types[ type ] );
                }
                return this;
            }
            if ( selector === false || typeof selector === "function" ) {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if ( fn === false ) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove( this, types, fn, selector );
            });
        },

        bind: function( types, data, fn ) {
            return this.on( types, null, data, fn );
        },
        unbind: function( types, fn ) {
            return this.off( types, null, fn );
        },

        delegate: function( selector, types, data, fn ) {
            return this.on( types, selector, data, fn );
        },
        undelegate: function( selector, types, fn ) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
        },

        trigger: function( type, data ) {
            return this.each(function() {
                jQuery.event.trigger( type, data, this );
            });
        },
        triggerHandler: function( type, data ) {
            var elem = this[0];
            if ( elem ) {
                return jQuery.event.trigger( type, data, elem, true );
            }
        },

        hover: function( fnOver, fnOut ) {
            return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
        }
    });

    jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

        // Handle event binding
        jQuery.fn[ name ] = function( data, fn ) {
            return arguments.length > 0 ?
                this.on( name, null, data, fn ) :
                this.trigger( name );
        };

        if ( rkeyEvent.test( name ) ) {
            jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
        }

        if ( rmouseEvent.test( name ) ) {
            jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
        }
    });
    /*!
     * Sizzle CSS Selector Engine
     * Copyright 2012 jQuery Foundation and other contributors
     * Released under the MIT license
     * http://sizzlejs.com/
     */
    (function( window, undefined ) {

        var i,
            cachedruns,
            Expr,
            getText,
            isXML,
            compile,
            hasDuplicate,
            outermostContext,

        // Local document vars
            setDocument,
            document,
            docElem,
            documentIsXML,
            rbuggyQSA,
            rbuggyMatches,
            matches,
            contains,
            sortOrder,

        // Instance-specific data
            expando = "sizzle" + -(new Date()),
            preferredDoc = window.document,
            support = {},
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),

        // General-purpose constants
            strundefined = typeof undefined,
            MAX_NEGATIVE = 1 << 31,

        // Array methods
            arr = [],
            pop = arr.pop,
            push = arr.push,
            slice = arr.slice,
        // Use a stripped-down indexOf if we can't use a native one
            indexOf = arr.indexOf || function( elem ) {
                var i = 0,
                    len = this.length;
                for ( ; i < len; i++ ) {
                    if ( this[i] === elem ) {
                        return i;
                    }
                }
                return -1;
            },


        // Regular expressions

        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
            whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/css3-syntax/#characters
            characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
            identifier = characterEncoding.replace( "w", "w#" ),

        // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
            operators = "([*^$|!~]?=)",
            attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
                "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

        // Prefer arguments quoted,
        //   then not containing pseudos/brackets,
        //   then attribute selectors/non-parenthetical expressions,
        //   then anything else
        // These preferences are here to reduce the number of selectors
        //   needing tokenize in the PSEUDO preFilter
            pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
            rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

            rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
            rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
            rpseudo = new RegExp( pseudos ),
            ridentifier = new RegExp( "^" + identifier + "$" ),

            matchExpr = {
                "ID": new RegExp( "^#(" + characterEncoding + ")" ),
                "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
                "NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
                "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
                "ATTR": new RegExp( "^" + attributes ),
                "PSEUDO": new RegExp( "^" + pseudos ),
                "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                    "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                    "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
                // For use in libraries implementing .is()
                // We use this for POS matching in `select`
                "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                    whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
            },

            rsibling = /[\x20\t\r\n\f]*[+~]/,

            rnative = /\{\s*\[native code\]\s*\}/,

        // Easily-parseable/retrievable ID or TAG or CLASS selectors
            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,

            rescape = /'|\\/g,
            rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
            runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
            funescape = function( _, escaped ) {
                var high = "0x" + escaped - 0x10000;
                // NaN means non-codepoint
                return high !== high ?
                    escaped :
                    // BMP codepoint
                        high < 0 ?
                    String.fromCharCode( high + 0x10000 ) :
                    // Supplemental Plane codepoint (surrogate pair)
                    String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
            };

// Use a stripped-down slice if we can't use a native one
        try {
            slice.call( docElem.childNodes, 0 )[0].nodeType;
        } catch ( e ) {
            slice = function( i ) {
                var elem,
                    results = [];
                for ( ; (elem = this[i]); i++ ) {
                    results.push( elem );
                }
                return results;
            };
        }

        /**
         * For feature detection
         * @param {Function} fn The function to test for native support
         */
        function isNative( fn ) {
            return rnative.test( fn + "" );
        }

        /**
         * Create key-value caches of limited size
         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
         *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *  deleting the oldest entry
         */
        function createCache() {
            var cache,
                keys = [];

            return (cache = function( key, value ) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if ( keys.push( key += " " ) > Expr.cacheLength ) {
                    // Only keep the most recent entries
                    delete cache[ keys.shift() ];
                }
                return (cache[ key ] = value);
            });
        }

        /**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */
        function markFunction( fn ) {
            fn[ expando ] = true;
            return fn;
        }

        /**
         * Support testing using an element
         * @param {Function} fn Passed the created div and expects a boolean result
         */
        function assert( fn ) {
            var div = document.createElement("div");

            try {
                return fn( div );
            } catch (e) {
                return false;
            } finally {
                // release memory in IE
                div = null;
            }
        }

        function Sizzle( selector, context, results, seed ) {
            var match, elem, m, nodeType,
            // QSA vars
                i, groups, old, nid, newContext, newSelector;

            if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
                setDocument( context );
            }

            context = context || document;
            results = results || [];

            if ( !selector || typeof selector !== "string" ) {
                return results;
            }

            if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
                return [];
            }

            if ( !documentIsXML && !seed ) {

                // Shortcuts
                if ( (match = rquickExpr.exec( selector )) ) {
                    // Speed-up: Sizzle("#ID")
                    if ( (m = match[1]) ) {
                        if ( nodeType === 9 ) {
                            elem = context.getElementById( m );
                            // Check parentNode to catch when Blackberry 4.6 returns
                            // nodes that are no longer in the document #6963
                            if ( elem && elem.parentNode ) {
                                // Handle the case where IE, Opera, and Webkit return items
                                // by name instead of ID
                                if ( elem.id === m ) {
                                    results.push( elem );
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            // Context is not a document
                            if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                                contains( context, elem ) && elem.id === m ) {
                                results.push( elem );
                                return results;
                            }
                        }

                        // Speed-up: Sizzle("TAG")
                    } else if ( match[2] ) {
                        push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
                        return results;

                        // Speed-up: Sizzle(".CLASS")
                    } else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
                        push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
                        return results;
                    }
                }

                // QSA path
                if ( support.qsa && !rbuggyQSA.test(selector) ) {
                    old = true;
                    nid = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;

                    // qSA works strangely on Element-rooted queries
                    // We can work around this by specifying an extra ID on the root
                    // and working up from there (Thanks to Andrew Dupont for the technique)
                    // IE 8 doesn't work on object elements
                    if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                        groups = tokenize( selector );

                        if ( (old = context.getAttribute("id")) ) {
                            nid = old.replace( rescape, "\\$&" );
                        } else {
                            context.setAttribute( "id", nid );
                        }
                        nid = "[id='" + nid + "'] ";

                        i = groups.length;
                        while ( i-- ) {
                            groups[i] = nid + toSelector( groups[i] );
                        }
                        newContext = rsibling.test( selector ) && context.parentNode || context;
                        newSelector = groups.join(",");
                    }

                    if ( newSelector ) {
                        try {
                            push.apply( results, slice.call( newContext.querySelectorAll(
                                newSelector
                            ), 0 ) );
                            return results;
                        } catch(qsaError) {
                        } finally {
                            if ( !old ) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }

            // All others
            return select( selector.replace( rtrim, "$1" ), context, results, seed );
        }

        /**
         * Detect xml
         * @param {Element|Object} elem An element or a document
         */
        isXML = Sizzle.isXML = function( elem ) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };

        /**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */
        setDocument = Sizzle.setDocument = function( node ) {
            var doc = node ? node.ownerDocument || node : preferredDoc;

            // If no document and documentElement is available, return
            if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
                return document;
            }

            // Set our document
            document = doc;
            docElem = doc.documentElement;

            // Support tests
            documentIsXML = isXML( doc );

            // Check if getElementsByTagName("*") returns only elements
            support.tagNameNoComments = assert(function( div ) {
                div.appendChild( doc.createComment("") );
                return !div.getElementsByTagName("*").length;
            });

            // Check if attributes should be retrieved by attribute nodes
            support.attributes = assert(function( div ) {
                div.innerHTML = "<select></select>";
                var type = typeof div.lastChild.getAttribute("multiple");
                // IE8 returns a string for some attributes even when not present
                return type !== "boolean" && type !== "string";
            });

            // Check if getElementsByClassName can be trusted
            support.getByClassName = assert(function( div ) {
                // Opera can't find a second classname (in 9.6)
                div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
                if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
                    return false;
                }

                // Safari 3.2 caches class attributes and doesn't catch changes
                div.lastChild.className = "e";
                return div.getElementsByClassName("e").length === 2;
            });

            // Check if getElementById returns elements by name
            // Check if getElementsByName privileges form controls or returns elements by ID
            support.getByName = assert(function( div ) {
                // Inject content
                div.id = expando + 0;
                div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
                docElem.insertBefore( div, docElem.firstChild );

                // Test
                var pass = doc.getElementsByName &&
                    // buggy browsers will return fewer than the correct 2
                    doc.getElementsByName( expando ).length === 2 +
                    // buggy browsers will return more than the correct 0
                    doc.getElementsByName( expando + 0 ).length;
                support.getIdNotName = !doc.getElementById( expando );

                // Cleanup
                docElem.removeChild( div );

                return pass;
            });

            // IE6/7 return modified attributes
            Expr.attrHandle = assert(function( div ) {
                div.innerHTML = "<a href='#'></a>";
                return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
                    div.firstChild.getAttribute("href") === "#";
            }) ?
            {} :
            {
                "href": function( elem ) {
                    return elem.getAttribute( "href", 2 );
                },
                "type": function( elem ) {
                    return elem.getAttribute("type");
                }
            };

            // ID find and filter
            if ( support.getIdNotName ) {
                Expr.find["ID"] = function( id, context ) {
                    if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
                        var m = context.getElementById( id );
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        return m && m.parentNode ? [m] : [];
                    }
                };
                Expr.filter["ID"] = function( id ) {
                    var attrId = id.replace( runescape, funescape );
                    return function( elem ) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                Expr.find["ID"] = function( id, context ) {
                    if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
                        var m = context.getElementById( id );

                        return m ?
                                m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
                            [m] :
                            undefined :
                            [];
                    }
                };
                Expr.filter["ID"] =  function( id ) {
                    var attrId = id.replace( runescape, funescape );
                    return function( elem ) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }

            // Tag
            Expr.find["TAG"] = support.tagNameNoComments ?
                function( tag, context ) {
                    if ( typeof context.getElementsByTagName !== strundefined ) {
                        return context.getElementsByTagName( tag );
                    }
                } :
                function( tag, context ) {
                    var elem,
                        tmp = [],
                        i = 0,
                        results = context.getElementsByTagName( tag );

                    // Filter out possible comments
                    if ( tag === "*" ) {
                        for ( ; (elem = results[i]); i++ ) {
                            if ( elem.nodeType === 1 ) {
                                tmp.push( elem );
                            }
                        }

                        return tmp;
                    }
                    return results;
                };

            // Name
            Expr.find["NAME"] = support.getByName && function( tag, context ) {
                if ( typeof context.getElementsByName !== strundefined ) {
                    return context.getElementsByName( name );
                }
            };

            // Class
            Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
                if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
                    return context.getElementsByClassName( className );
                }
            };

            // QSA and matchesSelector support

            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];

            // qSa(:focus) reports false when true (Chrome 21),
            // no need to also add to buggyMatches since matches checks buggyQSA
            // A support test would require too much code (would include document ready)
            rbuggyQSA = [ ":focus" ];

            if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function( div ) {
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explictly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // http://bugs.jquery.com/ticket/12359
                    div.innerHTML = "<select><option selected=''></option></select>";

                    // IE8 - Some boolean attributes are not treated correctly
                    if ( !div.querySelectorAll("[selected]").length ) {
                        rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
                    }

                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if ( !div.querySelectorAll(":checked").length ) {
                        rbuggyQSA.push(":checked");
                    }
                });

                assert(function( div ) {

                    // Opera 10-12/IE8 - ^= $= *= and empty values
                    // Should not select anything
                    div.innerHTML = "<input type='hidden' i=''/>";
                    if ( div.querySelectorAll("[i^='']").length ) {
                        rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
                    }

                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if ( !div.querySelectorAll(":enabled").length ) {
                        rbuggyQSA.push( ":enabled", ":disabled" );
                    }

                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }

            if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
                docElem.mozMatchesSelector ||
                docElem.webkitMatchesSelector ||
                docElem.oMatchesSelector ||
                docElem.msMatchesSelector) )) ) {

                assert(function( div ) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    support.disconnectedMatch = matches.call( div, "div" );

                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call( div, "[s!='']:x" );
                    rbuggyMatches.push( "!=", pseudos );
                });
            }

            rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
            rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

            // Element contains another
            // Purposefully does not implement inclusive descendent
            // As in, an element does not contain itself
            contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
                function( a, b ) {
                    var adown = a.nodeType === 9 ? a.documentElement : a,
                        bup = b && b.parentNode;
                    return a === bup || !!( bup && bup.nodeType === 1 && (
                        adown.contains ?
                            adown.contains( bup ) :
                            a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
                        ));
                } :
                function( a, b ) {
                    if ( b ) {
                        while ( (b = b.parentNode) ) {
                            if ( b === a ) {
                                return true;
                            }
                        }
                    }
                    return false;
                };

            // Document order sorting
            sortOrder = docElem.compareDocumentPosition ?
                function( a, b ) {
                    var compare;

                    if ( a === b ) {
                        hasDuplicate = true;
                        return 0;
                    }

                    if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
                        if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
                            if ( a === doc || contains( preferredDoc, a ) ) {
                                return -1;
                            }
                            if ( b === doc || contains( preferredDoc, b ) ) {
                                return 1;
                            }
                            return 0;
                        }
                        return compare & 4 ? -1 : 1;
                    }

                    return a.compareDocumentPosition ? -1 : 1;
                } :
                function( a, b ) {
                    var cur,
                        i = 0,
                        aup = a.parentNode,
                        bup = b.parentNode,
                        ap = [ a ],
                        bp = [ b ];

                    // The nodes are identical, we can exit early
                    if ( a === b ) {
                        hasDuplicate = true;
                        return 0;

                        // Fallback to using sourceIndex (in IE) if it's available on both nodes
                    } else if ( a.sourceIndex && b.sourceIndex ) {
                        return ( ~b.sourceIndex || MAX_NEGATIVE ) - ( contains( preferredDoc, a ) && ~a.sourceIndex || MAX_NEGATIVE );

                        // Parentless nodes are either documents or disconnected
                    } else if ( !aup || !bup ) {
                        return a === doc ? -1 :
                                b === doc ? 1 :
                            aup ? -1 :
                                bup ? 1 :
                                    0;

                        // If the nodes are siblings, we can do a quick check
                    } else if ( aup === bup ) {
                        return siblingCheck( a, b );
                    }

                    // Otherwise we need full lists of their ancestors for comparison
                    cur = a;
                    while ( (cur = cur.parentNode) ) {
                        ap.unshift( cur );
                    }
                    cur = b;
                    while ( (cur = cur.parentNode) ) {
                        bp.unshift( cur );
                    }

                    // Walk down the tree looking for a discrepancy
                    while ( ap[i] === bp[i] ) {
                        i++;
                    }

                    return i ?
                        // Do a sibling check if the nodes have a common ancestor
                        siblingCheck( ap[i], bp[i] ) :

                        // Otherwise nodes in our document sort first
                            ap[i] === preferredDoc ? -1 :
                            bp[i] === preferredDoc ? 1 :
                        0;
                };

            // Always assume the presence of duplicates if sort doesn't
            // pass them to our comparison function (as in Google Chrome).
            hasDuplicate = false;
            [0, 0].sort( sortOrder );
            support.detectDuplicates = hasDuplicate;

            return document;
        };

        Sizzle.matches = function( expr, elements ) {
            return Sizzle( expr, null, null, elements );
        };

        Sizzle.matchesSelector = function( elem, expr ) {
            // Set document vars if needed
            if ( ( elem.ownerDocument || elem ) !== document ) {
                setDocument( elem );
            }

            // Make sure that attribute selectors are quoted
            expr = expr.replace( rattributeQuotes, "='$1']" );

            // rbuggyQSA always contains :focus, so no need for an existence check
            if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
                try {
                    var ret = matches.call( elem, expr );

                    // IE 9's matchesSelector returns false on disconnected nodes
                    if ( ret || support.disconnectedMatch ||
                        // As well, disconnected nodes are said to be in a document
                        // fragment in IE 9
                        elem.document && elem.document.nodeType !== 11 ) {
                        return ret;
                    }
                } catch(e) {}
            }

            return Sizzle( expr, document, null, [elem] ).length > 0;
        };

        Sizzle.contains = function( context, elem ) {
            // Set document vars if needed
            if ( ( context.ownerDocument || context ) !== document ) {
                setDocument( context );
            }
            return contains( context, elem );
        };

        Sizzle.attr = function( elem, name ) {
            var val;

            // Set document vars if needed
            if ( ( elem.ownerDocument || elem ) !== document ) {
                setDocument( elem );
            }

            if ( !documentIsXML ) {
                name = name.toLowerCase();
            }
            if ( (val = Expr.attrHandle[ name ]) ) {
                return val( elem );
            }
            if ( documentIsXML || support.attributes ) {
                return elem.getAttribute( name );
            }
            return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
                name :
                    val && val.specified ? val.value : null;
        };

        Sizzle.error = function( msg ) {
            throw new Error( "Syntax error, unrecognized expression: " + msg );
        };

// Document sorting and removing duplicates
        Sizzle.uniqueSort = function( results ) {
            var elem,
                duplicates = [],
                i = 1,
                j = 0;

            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            results.sort( sortOrder );

            if ( hasDuplicate ) {
                for ( ; (elem = results[i]); i++ ) {
                    if ( elem === results[ i - 1 ] ) {
                        j = duplicates.push( i );
                    }
                }
                while ( j-- ) {
                    results.splice( duplicates[ j ], 1 );
                }
            }

            return results;
        };

        function siblingCheck( a, b ) {
            var cur = a && b && a.nextSibling;

            for ( ; cur; cur = cur.nextSibling ) {
                if ( cur === b ) {
                    return -1;
                }
            }

            return a ? 1 : -1;
        }

// Returns a function to use in pseudos for input types
        function createInputPseudo( type ) {
            return function( elem ) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }

// Returns a function to use in pseudos for buttons
        function createButtonPseudo( type ) {
            return function( elem ) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }

// Returns a function to use in pseudos for positionals
        function createPositionalPseudo( fn ) {
            return markFunction(function( argument ) {
                argument = +argument;
                return markFunction(function( seed, matches ) {
                    var j,
                        matchIndexes = fn( [], seed.length, argument ),
                        i = matchIndexes.length;

                    // Match elements found at the specified indexes
                    while ( i-- ) {
                        if ( seed[ (j = matchIndexes[i]) ] ) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }

        /**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */
        getText = Sizzle.getText = function( elem ) {
            var node,
                ret = "",
                i = 0,
                nodeType = elem.nodeType;

            if ( !nodeType ) {
                // If no nodeType, this is expected to be an array
                for ( ; (node = elem[i]); i++ ) {
                    // Do not traverse comment nodes
                    ret += getText( node );
                }
            } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (see #11153)
                if ( typeof elem.textContent === "string" ) {
                    return elem.textContent;
                } else {
                    // Traverse its children
                    for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                        ret += getText( elem );
                    }
                }
            } else if ( nodeType === 3 || nodeType === 4 ) {
                return elem.nodeValue;
            }
            // Do not include comment or processing instruction nodes

            return ret;
        };

        Expr = Sizzle.selectors = {

            // Can be adjusted by the user
            cacheLength: 50,

            createPseudo: markFunction,

            match: matchExpr,

            find: {},

            relative: {
                ">": { dir: "parentNode", first: true },
                " ": { dir: "parentNode" },
                "+": { dir: "previousSibling", first: true },
                "~": { dir: "previousSibling" }
            },

            preFilter: {
                "ATTR": function( match ) {
                    match[1] = match[1].replace( runescape, funescape );

                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

                    if ( match[2] === "~=" ) {
                        match[3] = " " + match[3] + " ";
                    }

                    return match.slice( 0, 4 );
                },

                "CHILD": function( match ) {
                    /* matches from matchExpr["CHILD"]
                     1 type (only|nth|...)
                     2 what (child|of-type)
                     3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                     4 xn-component of xn+y argument ([+-]?\d*n|)
                     5 sign of xn-component
                     6 x of xn-component
                     7 sign of y-component
                     8 y of y-component
                     */
                    match[1] = match[1].toLowerCase();

                    if ( match[1].slice( 0, 3 ) === "nth" ) {
                        // nth-* requires argument
                        if ( !match[3] ) {
                            Sizzle.error( match[0] );
                        }

                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
                        match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

                        // other types prohibit arguments
                    } else if ( match[3] ) {
                        Sizzle.error( match[0] );
                    }

                    return match;
                },

                "PSEUDO": function( match ) {
                    var excess,
                        unquoted = !match[5] && match[2];

                    if ( matchExpr["CHILD"].test( match[0] ) ) {
                        return null;
                    }

                    // Accept quoted arguments as-is
                    if ( match[4] ) {
                        match[2] = match[4];

                        // Strip excess characters from unquoted arguments
                    } else if ( unquoted && rpseudo.test( unquoted ) &&
                        // Get excess from tokenize (recursively)
                        (excess = tokenize( unquoted, true )) &&
                        // advance to the next closing parenthesis
                        (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

                        // excess is a negative index
                        match[0] = match[0].slice( 0, excess );
                        match[2] = unquoted.slice( 0, excess );
                    }

                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice( 0, 3 );
                }
            },

            filter: {

                "TAG": function( nodeName ) {
                    if ( nodeName === "*" ) {
                        return function() { return true; };
                    }

                    nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
                    return function( elem ) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },

                "CLASS": function( className ) {
                    var pattern = classCache[ className + " " ];

                    return pattern ||
                        (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                        classCache( className, function( elem ) {
                            return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
                        });
                },

                "ATTR": function( name, operator, check ) {
                    return function( elem ) {
                        var result = Sizzle.attr( elem, name );

                        if ( result == null ) {
                            return operator === "!=";
                        }
                        if ( !operator ) {
                            return true;
                        }

                        result += "";

                        return operator === "=" ? result === check :
                                operator === "!=" ? result !== check :
                                operator === "^=" ? check && result.indexOf( check ) === 0 :
                                operator === "*=" ? check && result.indexOf( check ) > -1 :
                                operator === "$=" ? check && result.substr( result.length - check.length ) === check :
                                operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
                                operator === "|=" ? result === check || result.substr( 0, check.length + 1 ) === check + "-" :
                            false;
                    };
                },

                "CHILD": function( type, what, argument, first, last ) {
                    var simple = type.slice( 0, 3 ) !== "nth",
                        forward = type.slice( -4 ) !== "last",
                        ofType = what === "of-type";

                    return first === 1 && last === 0 ?

                        // Shortcut for :nth-*(n)
                        function( elem ) {
                            return !!elem.parentNode;
                        } :

                        function( elem, context, xml ) {
                            var cache, outerCache, node, diff, nodeIndex, start,
                                dir = simple !== forward ? "nextSibling" : "previousSibling",
                                parent = elem.parentNode,
                                name = ofType && elem.nodeName.toLowerCase(),
                                useCache = !xml && !ofType;

                            if ( parent ) {

                                // :(first|last|only)-(child|of-type)
                                if ( simple ) {
                                    while ( dir ) {
                                        node = elem;
                                        while ( (node = node[ dir ]) ) {
                                            if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
                                                return false;
                                            }
                                        }
                                        // Reverse direction for :only-* (if we haven't yet done so)
                                        start = dir = type === "only" && !start && "nextSibling";
                                    }
                                    return true;
                                }

                                start = [ forward ? parent.firstChild : parent.lastChild ];

                                // non-xml :nth-child(...) stores cache data on `parent`
                                if ( forward && useCache ) {
                                    // Seek `elem` from a previously-cached index
                                    outerCache = parent[ expando ] || (parent[ expando ] = {});
                                    cache = outerCache[ type ] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = cache[0] === dirruns && cache[2];
                                    node = nodeIndex && parent.childNodes[ nodeIndex ];

                                    while ( (node = ++nodeIndex && node && node[ dir ] ||

                                        // Fallback to seeking `elem` from the start
                                        (diff = nodeIndex = 0) || start.pop()) ) {

                                        // When found, cache indexes on `parent` and break
                                        if ( node.nodeType === 1 && ++diff && node === elem ) {
                                            outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                                            break;
                                        }
                                    }

                                    // Use previously-cached element index if available
                                } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
                                    diff = cache[1];

                                    // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                } else {
                                    // Use the same loop as above to seek `elem` from the start
                                    while ( (node = ++nodeIndex && node && node[ dir ] ||
                                        (diff = nodeIndex = 0) || start.pop()) ) {

                                        if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
                                            // Cache the index of each encountered element
                                            if ( useCache ) {
                                                (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
                                            }

                                            if ( node === elem ) {
                                                break;
                                            }
                                        }
                                    }
                                }

                                // Incorporate the offset, then check against cycle size
                                diff -= last;
                                return diff === first || ( diff % first === 0 && diff / first >= 0 );
                            }
                        };
                },

                "PSEUDO": function( pseudo, argument ) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args,
                        fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                            Sizzle.error( "unsupported pseudo: " + pseudo );

                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if ( fn[ expando ] ) {
                        return fn( argument );
                    }

                    // But maintain support for old signatures
                    if ( fn.length > 1 ) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                            markFunction(function( seed, matches ) {
                                var idx,
                                    matched = fn( seed, argument ),
                                    i = matched.length;
                                while ( i-- ) {
                                    idx = indexOf.call( seed, matched[i] );
                                    seed[ idx ] = !( matches[ idx ] = matched[i] );
                                }
                            }) :
                            function( elem ) {
                                return fn( elem, 0, args );
                            };
                    }

                    return fn;
                }
            },

            pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function( selector ) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [],
                        results = [],
                        matcher = compile( selector.replace( rtrim, "$1" ) );

                    return matcher[ expando ] ?
                        markFunction(function( seed, matches, context, xml ) {
                            var elem,
                                unmatched = matcher( seed, null, xml, [] ),
                                i = seed.length;

                            // Match elements unmatched by `matcher`
                            while ( i-- ) {
                                if ( (elem = unmatched[i]) ) {
                                    seed[i] = !(matches[i] = elem);
                                }
                            }
                        }) :
                        function( elem, context, xml ) {
                            input[0] = elem;
                            matcher( input, null, xml, results );
                            return !results.pop();
                        };
                }),

                "has": markFunction(function( selector ) {
                    return function( elem ) {
                        return Sizzle( selector, elem ).length > 0;
                    };
                }),

                "contains": markFunction(function( text ) {
                    return function( elem ) {
                        return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
                    };
                }),

                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction( function( lang ) {
                    // lang value must be a valid identifider
                    if ( !ridentifier.test(lang || "") ) {
                        Sizzle.error( "unsupported lang: " + lang );
                    }
                    lang = lang.replace( runescape, funescape ).toLowerCase();
                    return function( elem ) {
                        var elemLang;
                        do {
                            if ( (elemLang = documentIsXML ?
                                elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
                                elem.lang) ) {

                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                            }
                        } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
                        return false;
                    };
                }),

                // Miscellaneous
                "target": function( elem ) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice( 1 ) === elem.id;
                },

                "root": function( elem ) {
                    return elem === docElem;
                },

                "focus": function( elem ) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },

                // Boolean properties
                "enabled": function( elem ) {
                    return elem.disabled === false;
                },

                "disabled": function( elem ) {
                    return elem.disabled === true;
                },

                "checked": function( elem ) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                },

                "selected": function( elem ) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if ( elem.parentNode ) {
                        elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                },

                // Contents
                "empty": function( elem ) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
                    //   not comment, processing instructions, or others
                    // Thanks to Diego Perini for the nodeName shortcut
                    //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
                    for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                        if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
                            return false;
                        }
                    }
                    return true;
                },

                "parent": function( elem ) {
                    return !Expr.pseudos["empty"]( elem );
                },

                // Element/input types
                "header": function( elem ) {
                    return rheader.test( elem.nodeName );
                },

                "input": function( elem ) {
                    return rinputs.test( elem.nodeName );
                },

                "button": function( elem ) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },

                "text": function( elem ) {
                    var attr;
                    // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                    // use getAttribute instead to test this case
                    return elem.nodeName.toLowerCase() === "input" &&
                        elem.type === "text" &&
                        ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
                },

                // Position-in-collection
                "first": createPositionalPseudo(function() {
                    return [ 0 ];
                }),

                "last": createPositionalPseudo(function( matchIndexes, length ) {
                    return [ length - 1 ];
                }),

                "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
                    return [ argument < 0 ? argument + length : argument ];
                }),

                "even": createPositionalPseudo(function( matchIndexes, length ) {
                    var i = 0;
                    for ( ; i < length; i += 2 ) {
                        matchIndexes.push( i );
                    }
                    return matchIndexes;
                }),

                "odd": createPositionalPseudo(function( matchIndexes, length ) {
                    var i = 1;
                    for ( ; i < length; i += 2 ) {
                        matchIndexes.push( i );
                    }
                    return matchIndexes;
                }),

                "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                    var i = argument < 0 ? argument + length : argument;
                    for ( ; --i >= 0; ) {
                        matchIndexes.push( i );
                    }
                    return matchIndexes;
                }),

                "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                    var i = argument < 0 ? argument + length : argument;
                    for ( ; ++i < length; ) {
                        matchIndexes.push( i );
                    }
                    return matchIndexes;
                })
            }
        };

// Add button/input type pseudos
        for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
            Expr.pseudos[ i ] = createInputPseudo( i );
        }
        for ( i in { submit: true, reset: true } ) {
            Expr.pseudos[ i ] = createButtonPseudo( i );
        }

        function tokenize( selector, parseOnly ) {
            var matched, match, tokens, type,
                soFar, groups, preFilters,
                cached = tokenCache[ selector + " " ];

            if ( cached ) {
                return parseOnly ? 0 : cached.slice( 0 );
            }

            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;

            while ( soFar ) {

                // Comma and first run
                if ( !matched || (match = rcomma.exec( soFar )) ) {
                    if ( match ) {
                        // Don't consume trailing commas as valid
                        soFar = soFar.slice( match[0].length ) || soFar;
                    }
                    groups.push( tokens = [] );
                }

                matched = false;

                // Combinators
                if ( (match = rcombinators.exec( soFar )) ) {
                    matched = match.shift();
                    tokens.push( {
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace( rtrim, " " )
                    } );
                    soFar = soFar.slice( matched.length );
                }

                // Filters
                for ( type in Expr.filter ) {
                    if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                        (match = preFilters[ type ]( match ))) ) {
                        matched = match.shift();
                        tokens.push( {
                            value: matched,
                            type: type,
                            matches: match
                        } );
                        soFar = soFar.slice( matched.length );
                    }
                }

                if ( !matched ) {
                    break;
                }
            }

            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ?
                soFar.length :
                soFar ?
                    Sizzle.error( selector ) :
                    // Cache the tokens
                    tokenCache( selector, groups ).slice( 0 );
        }

        function toSelector( tokens ) {
            var i = 0,
                len = tokens.length,
                selector = "";
            for ( ; i < len; i++ ) {
                selector += tokens[i].value;
            }
            return selector;
        }

        function addCombinator( matcher, combinator, base ) {
            var dir = combinator.dir,
                checkNonElements = base && combinator.dir === "parentNode",
                doneName = done++;

            return combinator.first ?
                // Check against closest ancestor/preceding element
                function( elem, context, xml ) {
                    while ( (elem = elem[ dir ]) ) {
                        if ( elem.nodeType === 1 || checkNonElements ) {
                            return matcher( elem, context, xml );
                        }
                    }
                } :

                // Check against all ancestor/preceding elements
                function( elem, context, xml ) {
                    var data, cache, outerCache,
                        dirkey = dirruns + " " + doneName;

                    // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                    if ( xml ) {
                        while ( (elem = elem[ dir ]) ) {
                            if ( elem.nodeType === 1 || checkNonElements ) {
                                if ( matcher( elem, context, xml ) ) {
                                    return true;
                                }
                            }
                        }
                    } else {
                        while ( (elem = elem[ dir ]) ) {
                            if ( elem.nodeType === 1 || checkNonElements ) {
                                outerCache = elem[ expando ] || (elem[ expando ] = {});
                                if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
                                    if ( (data = cache[1]) === true || data === cachedruns ) {
                                        return data === true;
                                    }
                                } else {
                                    cache = outerCache[ dir ] = [ dirkey ];
                                    cache[1] = matcher( elem, context, xml ) || cachedruns;
                                    if ( cache[1] === true ) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                };
        }

        function elementMatcher( matchers ) {
            return matchers.length > 1 ?
                function( elem, context, xml ) {
                    var i = matchers.length;
                    while ( i-- ) {
                        if ( !matchers[i]( elem, context, xml ) ) {
                            return false;
                        }
                    }
                    return true;
                } :
                matchers[0];
        }

        function condense( unmatched, map, filter, context, xml ) {
            var elem,
                newUnmatched = [],
                i = 0,
                len = unmatched.length,
                mapped = map != null;

            for ( ; i < len; i++ ) {
                if ( (elem = unmatched[i]) ) {
                    if ( !filter || filter( elem, context, xml ) ) {
                        newUnmatched.push( elem );
                        if ( mapped ) {
                            map.push( i );
                        }
                    }
                }
            }

            return newUnmatched;
        }

        function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
            if ( postFilter && !postFilter[ expando ] ) {
                postFilter = setMatcher( postFilter );
            }
            if ( postFinder && !postFinder[ expando ] ) {
                postFinder = setMatcher( postFinder, postSelector );
            }
            return markFunction(function( seed, results, context, xml ) {
                var temp, i, elem,
                    preMap = [],
                    postMap = [],
                    preexisting = results.length,

                // Get initial elements from seed or context
                    elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

                // Prefilter to get matcher input, preserving a map for seed-results synchronization
                    matcherIn = preFilter && ( seed || !selector ) ?
                        condense( elems, preMap, preFilter, context, xml ) :
                        elems,

                    matcherOut = matcher ?
                        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                            postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

                        // ...intermediate processing is necessary
                        [] :

                        // ...otherwise use results directly
                        results :
                        matcherIn;

                // Find primary matches
                if ( matcher ) {
                    matcher( matcherIn, matcherOut, context, xml );
                }

                // Apply postFilter
                if ( postFilter ) {
                    temp = condense( matcherOut, postMap );
                    postFilter( temp, [], context, xml );

                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while ( i-- ) {
                        if ( (elem = temp[i]) ) {
                            matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                        }
                    }
                }

                if ( seed ) {
                    if ( postFinder || preFilter ) {
                        if ( postFinder ) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while ( i-- ) {
                                if ( (elem = matcherOut[i]) ) {
                                    // Restore matcherIn since elem is not yet a final match
                                    temp.push( (matcherIn[i] = elem) );
                                }
                            }
                            postFinder( null, (matcherOut = []), temp, xml );
                        }

                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while ( i-- ) {
                            if ( (elem = matcherOut[i]) &&
                                (temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }

                    // Add elements to results, through postFinder if defined
                } else {
                    matcherOut = condense(
                            matcherOut === results ?
                            matcherOut.splice( preexisting, matcherOut.length ) :
                            matcherOut
                    );
                    if ( postFinder ) {
                        postFinder( null, results, matcherOut, xml );
                    } else {
                        push.apply( results, matcherOut );
                    }
                }
            });
        }

        function matcherFromTokens( tokens ) {
            var checkContext, matcher, j,
                len = tokens.length,
                leadingRelative = Expr.relative[ tokens[0].type ],
                implicitRelative = leadingRelative || Expr.relative[" "],
                i = leadingRelative ? 1 : 0,

            // The foundational matcher ensures that elements are reachable from top-level context(s)
                matchContext = addCombinator( function( elem ) {
                    return elem === checkContext;
                }, implicitRelative, true ),
                matchAnyContext = addCombinator( function( elem ) {
                    return indexOf.call( checkContext, elem ) > -1;
                }, implicitRelative, true ),
                matchers = [ function( elem, context, xml ) {
                    return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                        (checkContext = context).nodeType ?
                            matchContext( elem, context, xml ) :
                            matchAnyContext( elem, context, xml ) );
                } ];

            for ( ; i < len; i++ ) {
                if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
                    matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
                } else {
                    matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

                    // Return special upon seeing a positional matcher
                    if ( matcher[ expando ] ) {
                        // Find the next relative operator (if any) for proper handling
                        j = ++i;
                        for ( ; j < len; j++ ) {
                            if ( Expr.relative[ tokens[j].type ] ) {
                                break;
                            }
                        }
                        return setMatcher(
                                i > 1 && elementMatcher( matchers ),
                                i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
                            matcher,
                                i < j && matcherFromTokens( tokens.slice( i, j ) ),
                                j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                                j < len && toSelector( tokens )
                        );
                    }
                    matchers.push( matcher );
                }
            }

            return elementMatcher( matchers );
        }

        function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
            // A counter to specify which element is currently being matched
            var matcherCachedRuns = 0,
                bySet = setMatchers.length > 0,
                byElement = elementMatchers.length > 0,
                superMatcher = function( seed, context, xml, results, expandContext ) {
                    var elem, j, matcher,
                        setMatched = [],
                        matchedCount = 0,
                        i = "0",
                        unmatched = seed && [],
                        outermost = expandContext != null,
                        contextBackup = outermostContext,
                    // We must always have either seed elements or context
                        elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
                    // Nested matchers should use non-integer dirruns
                        dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

                    if ( outermost ) {
                        outermostContext = context !== document && context;
                        cachedruns = matcherCachedRuns;
                    }

                    // Add elements passing elementMatchers directly to results
                    for ( ; (elem = elems[i]) != null; i++ ) {
                        if ( byElement && elem ) {
                            for ( j = 0; (matcher = elementMatchers[j]); j++ ) {
                                if ( matcher( elem, context, xml ) ) {
                                    results.push( elem );
                                    break;
                                }
                            }
                            if ( outermost ) {
                                dirruns = dirrunsUnique;
                                cachedruns = ++matcherCachedRuns;
                            }
                        }

                        // Track unmatched elements for set filters
                        if ( bySet ) {
                            // They will have gone through all possible matchers
                            if ( (elem = !matcher && elem) ) {
                                matchedCount--;
                            }

                            // Lengthen the array for every element, matched or not
                            if ( seed ) {
                                unmatched.push( elem );
                            }
                        }
                    }

                    // Apply set filters to unmatched elements
                    // `i` starts as a string, so matchedCount would equal "00" if there are no elements
                    matchedCount += i;
                    if ( bySet && i !== matchedCount ) {
                        for ( j = 0; (matcher = setMatchers[j]); j++ ) {
                            matcher( unmatched, setMatched, context, xml );
                        }

                        if ( seed ) {
                            // Reintegrate element matches to eliminate the need for sorting
                            if ( matchedCount > 0 ) {
                                while ( i-- ) {
                                    if ( !(unmatched[i] || setMatched[i]) ) {
                                        setMatched[i] = pop.call( results );
                                    }
                                }
                            }

                            // Discard index placeholder values to get only actual matches
                            setMatched = condense( setMatched );
                        }

                        // Add matches to results
                        push.apply( results, setMatched );

                        // Seedless set matches succeeding multiple successful matchers stipulate sorting
                        if ( outermost && !seed && setMatched.length > 0 &&
                            ( matchedCount + setMatchers.length ) > 1 ) {

                            Sizzle.uniqueSort( results );
                        }
                    }

                    // Override manipulation of globals by nested matchers
                    if ( outermost ) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }

                    return unmatched;
                };

            return bySet ?
                markFunction( superMatcher ) :
                superMatcher;
        }

        compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
            var i,
                setMatchers = [],
                elementMatchers = [],
                cached = compilerCache[ selector + " " ];

            if ( !cached ) {
                // Generate a function of recursive functions that can be used to check each element
                if ( !group ) {
                    group = tokenize( selector );
                }
                i = group.length;
                while ( i-- ) {
                    cached = matcherFromTokens( group[i] );
                    if ( cached[ expando ] ) {
                        setMatchers.push( cached );
                    } else {
                        elementMatchers.push( cached );
                    }
                }

                // Cache the compiled function
                cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
            }
            return cached;
        };

        function multipleContexts( selector, contexts, results ) {
            var i = 0,
                len = contexts.length;
            for ( ; i < len; i++ ) {
                Sizzle( selector, contexts[i], results );
            }
            return results;
        }

        function select( selector, context, results, seed ) {
            var i, tokens, token, type, find,
                match = tokenize( selector );

            if ( !seed ) {
                // Try to minimize operations if there is only one group
                if ( match.length === 1 ) {

                    // Take a shortcut and set the context if the root selector is an ID
                    tokens = match[0] = match[0].slice( 0 );
                    if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                        context.nodeType === 9 && !documentIsXML &&
                        Expr.relative[ tokens[1].type ] ) {

                        context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
                        if ( !context ) {
                            return results;
                        }

                        selector = selector.slice( tokens.shift().value.length );
                    }

                    // Fetch a seed set for right-to-left matching
                    for ( i = matchExpr["needsContext"].test( selector ) ? -1 : tokens.length - 1; i >= 0; i-- ) {
                        token = tokens[i];

                        // Abort if we hit a combinator
                        if ( Expr.relative[ (type = token.type) ] ) {
                            break;
                        }
                        if ( (find = Expr.find[ type ]) ) {
                            // Search, expanding context for leading sibling combinators
                            if ( (seed = find(
                                token.matches[0].replace( runescape, funescape ),
                                    rsibling.test( tokens[0].type ) && context.parentNode || context
                            )) ) {

                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice( i, 1 );
                                selector = seed.length && toSelector( tokens );
                                if ( !selector ) {
                                    push.apply( results, slice.call( seed, 0 ) );
                                    return results;
                                }

                                break;
                            }
                        }
                    }
                }
            }

            // Compile and execute a filtering function
            // Provide `match` to avoid retokenization if we modified the selector above
            compile( selector, match )(
                seed,
                context,
                documentIsXML,
                results,
                rsibling.test( selector )
            );
            return results;
        }

// Deprecated
        Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
        function setFilters() {}
        Expr.filters = setFilters.prototype = Expr.pseudos;
        Expr.setFilters = new setFilters();

// Initialize with the default document
        setDocument();

// Override sizzle attribute retrieval
        Sizzle.attr = jQuery.attr;
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;


    })( window );
    var runtil = /Until$/,
        rparentsprev = /^(?:parents|prev(?:Until|All))/,
        isSimple = /^.[^:#\[\.,]*$/,
        rneedsContext = jQuery.expr.match.needsContext,
    // methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };

    jQuery.fn.extend({
        find: function( selector ) {
            var i, ret, self;

            if ( typeof selector !== "string" ) {
                self = this;
                return this.pushStack( jQuery( selector ).filter(function() {
                    for ( i = 0; i < self.length; i++ ) {
                        if ( jQuery.contains( self[ i ], this ) ) {
                            return true;
                        }
                    }
                }) );
            }

            ret = [];
            for ( i = 0; i < this.length; i++ ) {
                jQuery.find( selector, this[ i ], ret );
            }

            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack( jQuery.unique( ret ) );
            ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
            return ret;
        },

        has: function( target ) {
            var i,
                targets = jQuery( target, this ),
                len = targets.length;

            return this.filter(function() {
                for ( i = 0; i < len; i++ ) {
                    if ( jQuery.contains( this, targets[i] ) ) {
                        return true;
                    }
                }
            });
        },

        not: function( selector ) {
            return this.pushStack( winnow(this, selector, false) );
        },

        filter: function( selector ) {
            return this.pushStack( winnow(this, selector, true) );
        },

        is: function( selector ) {
            return !!selector && (
                    typeof selector === "string" ?
                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                rneedsContext.test( selector ) ?
                    jQuery( selector, this.context ).index( this[0] ) >= 0 :
                    jQuery.filter( selector, this ).length > 0 :
                this.filter( selector ).length > 0 );
        },

        closest: function( selectors, context ) {
            var cur,
                i = 0,
                l = this.length,
                ret = [],
                pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
                    jQuery( selectors, context || this.context ) :
                    0;

            for ( ; i < l; i++ ) {
                cur = this[i];

                while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
                    if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
                        ret.push( cur );
                        break;
                    }
                    cur = cur.parentNode;
                }
            }

            return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
        },

        // Determine the position of an element within
        // the matched set of elements
        index: function( elem ) {

            // No argument, return index in parent
            if ( !elem ) {
                return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
            }

            // index in selector
            if ( typeof elem === "string" ) {
                return jQuery.inArray( this[0], jQuery( elem ) );
            }

            // Locate the position of the desired element
            return jQuery.inArray(
                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem, this );
        },

        add: function( selector, context ) {
            var set = typeof selector === "string" ?
                    jQuery( selector, context ) :
                    jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
                all = jQuery.merge( this.get(), set );

            return this.pushStack( jQuery.unique(all) );
        },

        addBack: function( selector ) {
            return this.add( selector == null ?
                    this.prevObject : this.prevObject.filter(selector)
            );
        }
    });

    jQuery.fn.andSelf = jQuery.fn.addBack;

    function sibling( cur, dir ) {
        do {
            cur = cur[ dir ];
        } while ( cur && cur.nodeType !== 1 );

        return cur;
    }

    jQuery.each({
        parent: function( elem ) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function( elem ) {
            return jQuery.dir( elem, "parentNode" );
        },
        parentsUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "parentNode", until );
        },
        next: function( elem ) {
            return sibling( elem, "nextSibling" );
        },
        prev: function( elem ) {
            return sibling( elem, "previousSibling" );
        },
        nextAll: function( elem ) {
            return jQuery.dir( elem, "nextSibling" );
        },
        prevAll: function( elem ) {
            return jQuery.dir( elem, "previousSibling" );
        },
        nextUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "nextSibling", until );
        },
        prevUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "previousSibling", until );
        },
        siblings: function( elem ) {
            return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
        },
        children: function( elem ) {
            return jQuery.sibling( elem.firstChild );
        },
        contents: function( elem ) {
            return jQuery.nodeName( elem, "iframe" ) ?
                elem.contentDocument || elem.contentWindow.document :
                jQuery.merge( [], elem.childNodes );
        }
    }, function( name, fn ) {
        jQuery.fn[ name ] = function( until, selector ) {
            var ret = jQuery.map( this, fn, until );

            if ( !runtil.test( name ) ) {
                selector = until;
            }

            if ( selector && typeof selector === "string" ) {
                ret = jQuery.filter( selector, ret );
            }

            ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

            if ( this.length > 1 && rparentsprev.test( name ) ) {
                ret = ret.reverse();
            }

            return this.pushStack( ret );
        };
    });

    jQuery.extend({
        filter: function( expr, elems, not ) {
            if ( not ) {
                expr = ":not(" + expr + ")";
            }

            return elems.length === 1 ?
                jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
                jQuery.find.matches(expr, elems);
        },

        dir: function( elem, dir, until ) {
            var matched = [],
                cur = elem[ dir ];

            while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
                if ( cur.nodeType === 1 ) {
                    matched.push( cur );
                }
                cur = cur[dir];
            }
            return matched;
        },

        sibling: function( n, elem ) {
            var r = [];

            for ( ; n; n = n.nextSibling ) {
                if ( n.nodeType === 1 && n !== elem ) {
                    r.push( n );
                }
            }

            return r;
        }
    });

// Implement the identical functionality for filter and not
    function winnow( elements, qualifier, keep ) {

        // Can't pass null or undefined to indexOf in Firefox 4
        // Set to 0 to skip string check
        qualifier = qualifier || 0;

        if ( jQuery.isFunction( qualifier ) ) {
            return jQuery.grep(elements, function( elem, i ) {
                var retVal = !!qualifier.call( elem, i, elem );
                return retVal === keep;
            });

        } else if ( qualifier.nodeType ) {
            return jQuery.grep(elements, function( elem ) {
                return ( elem === qualifier ) === keep;
            });

        } else if ( typeof qualifier === "string" ) {
            var filtered = jQuery.grep(elements, function( elem ) {
                return elem.nodeType === 1;
            });

            if ( isSimple.test( qualifier ) ) {
                return jQuery.filter(qualifier, filtered, !keep);
            } else {
                qualifier = jQuery.filter( qualifier, filtered );
            }
        }

        return jQuery.grep(elements, function( elem ) {
            return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
        });
    }
    function createSafeFragment( document ) {
        var list = nodeNames.split( "|" ),
            safeFrag = document.createDocumentFragment();

        if ( safeFrag.createElement ) {
            while ( list.length ) {
                safeFrag.createElement(
                    list.pop()
                );
            }
        }
        return safeFrag;
    }

    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
            "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
        rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
        rleadingWhitespace = /^\s+/,
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        rtagName = /<([\w:]+)/,
        rtbody = /<tbody/i,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style|link)/i,
        manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
    // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /^$|\/(?:java|ecma)script/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

    // We have to close these tags to support XHTML (#13200)
        wrapMap = {
            option: [ 1, "<select multiple='multiple'>", "</select>" ],
            legend: [ 1, "<fieldset>", "</fieldset>" ],
            area: [ 1, "<map>", "</map>" ],
            param: [ 1, "<object>", "</object>" ],
            thead: [ 1, "<table>", "</table>" ],
            tr: [ 2, "<table><tbody>", "</tbody></table>" ],
            col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
            td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

            // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
            // unless wrapped in a div with non-breaking characters in front of it.
            _default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
        },
        safeFragment = createSafeFragment( document ),
        fragmentDiv = safeFragment.appendChild( document.createElement("div") );

    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

    jQuery.fn.extend({
        text: function( value ) {
            return jQuery.access( this, function( value ) {
                return value === undefined ?
                    jQuery.text( this ) :
                    this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
            }, null, value, arguments.length );
        },

        wrapAll: function( html ) {
            if ( jQuery.isFunction( html ) ) {
                return this.each(function(i) {
                    jQuery(this).wrapAll( html.call(this, i) );
                });
            }

            if ( this[0] ) {
                // The elements to wrap the target around
                var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

                if ( this[0].parentNode ) {
                    wrap.insertBefore( this[0] );
                }

                wrap.map(function() {
                    var elem = this;

                    while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
                        elem = elem.firstChild;
                    }

                    return elem;
                }).append( this );
            }

            return this;
        },

        wrapInner: function( html ) {
            if ( jQuery.isFunction( html ) ) {
                return this.each(function(i) {
                    jQuery(this).wrapInner( html.call(this, i) );
                });
            }

            return this.each(function() {
                var self = jQuery( this ),
                    contents = self.contents();

                if ( contents.length ) {
                    contents.wrapAll( html );

                } else {
                    self.append( html );
                }
            });
        },

        wrap: function( html ) {
            var isFunction = jQuery.isFunction( html );

            return this.each(function(i) {
                jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
            });
        },

        unwrap: function() {
            return this.parent().each(function() {
                if ( !jQuery.nodeName( this, "body" ) ) {
                    jQuery( this ).replaceWith( this.childNodes );
                }
            }).end();
        },

        append: function() {
            return this.domManip(arguments, true, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    this.appendChild( elem );
                }
            });
        },

        prepend: function() {
            return this.domManip(arguments, true, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    this.insertBefore( elem, this.firstChild );
                }
            });
        },

        before: function() {
            return this.domManip( arguments, false, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this );
                }
            });
        },

        after: function() {
            return this.domManip( arguments, false, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this.nextSibling );
                }
            });
        },

        // keepData is for internal use only--do not document
        remove: function( selector, keepData ) {
            var elem,
                i = 0;

            for ( ; (elem = this[i]) != null; i++ ) {
                if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
                    if ( !keepData && elem.nodeType === 1 ) {
                        jQuery.cleanData( getAll( elem ) );
                    }

                    if ( elem.parentNode ) {
                        if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
                            setGlobalEval( getAll( elem, "script" ) );
                        }
                        elem.parentNode.removeChild( elem );
                    }
                }
            }

            return this;
        },

        empty: function() {
            var elem,
                i = 0;

            for ( ; (elem = this[i]) != null; i++ ) {
                // Remove element nodes and prevent memory leaks
                if ( elem.nodeType === 1 ) {
                    jQuery.cleanData( getAll( elem, false ) );
                }

                // Remove any remaining nodes
                while ( elem.firstChild ) {
                    elem.removeChild( elem.firstChild );
                }

                // If this is a select, ensure that it displays empty (#12336)
                // Support: IE<9
                if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
                    elem.options.length = 0;
                }
            }

            return this;
        },

        clone: function( dataAndEvents, deepDataAndEvents ) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map( function () {
                return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
            });
        },

        html: function( value ) {
            return jQuery.access( this, function( value ) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                if ( value === undefined ) {
                    return elem.nodeType === 1 ?
                        elem.innerHTML.replace( rinlinejQuery, "" ) :
                        undefined;
                }

                // See if we can take a shortcut and just use innerHTML
                if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                    ( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
                    ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
                    !wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

                    value = value.replace( rxhtmlTag, "<$1></$2>" );

                    try {
                        for (; i < l; i++ ) {
                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if ( elem.nodeType === 1 ) {
                                jQuery.cleanData( getAll( elem, false ) );
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch(e) {}
                }

                if ( elem ) {
                    this.empty().append( value );
                }
            }, null, value, arguments.length );
        },

        replaceWith: function( value ) {
            var isFunc = jQuery.isFunction( value );

            // Make sure that the elements are removed from the DOM before they are inserted
            // this can help fix replacing a parent with child elements
            if ( !isFunc && typeof value !== "string" ) {
                value = jQuery( value ).not( this ).detach();
            }

            return this.domManip( [ value ], true, function( elem ) {
                var next = this.nextSibling,
                    parent = this.parentNode;

                if ( parent && this.nodeType === 1 || this.nodeType === 11 ) {

                    jQuery( this ).remove();

                    if ( next ) {
                        next.parentNode.insertBefore( elem, next );
                    } else {
                        parent.appendChild( elem );
                    }
                }
            });
        },

        detach: function( selector ) {
            return this.remove( selector, true );
        },

        domManip: function( args, table, callback ) {

            // Flatten any nested arrays
            args = core_concat.apply( [], args );

            var fragment, first, scripts, hasScripts, node, doc,
                i = 0,
                l = this.length,
                set = this,
                iNoClone = l - 1,
                value = args[0],
                isFunction = jQuery.isFunction( value );

            // We can't cloneNode fragments that contain checked, in WebKit
            if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
                return this.each(function( index ) {
                    var self = set.eq( index );
                    if ( isFunction ) {
                        args[0] = value.call( this, index, table ? self.html() : undefined );
                    }
                    self.domManip( args, table, callback );
                });
            }

            if ( l ) {
                fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
                first = fragment.firstChild;

                if ( fragment.childNodes.length === 1 ) {
                    fragment = first;
                }

                if ( first ) {
                    table = table && jQuery.nodeName( first, "tr" );
                    scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                    hasScripts = scripts.length;

                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    for ( ; i < l; i++ ) {
                        node = fragment;

                        if ( i !== iNoClone ) {
                            node = jQuery.clone( node, true, true );

                            // Keep references to cloned scripts for later restoration
                            if ( hasScripts ) {
                                jQuery.merge( scripts, getAll( node, "script" ) );
                            }
                        }

                        callback.call(
                                table && jQuery.nodeName( this[i], "table" ) ?
                                findOrAppend( this[i], "tbody" ) :
                                this[i],
                            node,
                            i
                        );
                    }

                    if ( hasScripts ) {
                        doc = scripts[ scripts.length - 1 ].ownerDocument;

                        // Reenable scripts
                        jQuery.map( scripts, restoreScript );

                        // Evaluate executable scripts on first document insertion
                        for ( i = 0; i < hasScripts; i++ ) {
                            node = scripts[ i ];
                            if ( rscriptType.test( node.type || "" ) &&
                                !jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

                                if ( node.src ) {
                                    // Hope ajax is available...
                                    jQuery.ajax({
                                        url: node.src,
                                        type: "GET",
                                        dataType: "script",
                                        async: false,
                                        global: false,
                                        "throws": true
                                    });
                                } else {
                                    jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
                                }
                            }
                        }
                    }

                    // Fix #11809: Avoid leaking memory
                    fragment = first = null;
                }
            }

            return this;
        }
    });

    function findOrAppend( elem, tag ) {
        return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
    }

// Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript( elem ) {
        var attr = elem.getAttributeNode("type");
        elem.type = ( attr && attr.specified ) + "/" + elem.type;
        return elem;
    }
    function restoreScript( elem ) {
        var match = rscriptTypeMasked.exec( elem.type );
        if ( match ) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }

// Mark scripts as having already been evaluated
    function setGlobalEval( elems, refElements ) {
        var elem,
            i = 0;
        for ( ; (elem = elems[i]) != null; i++ ) {
            jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
        }
    }

    function cloneCopyEvent( src, dest ) {

        if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
            return;
        }

        var type, i, l,
            oldData = jQuery._data( src ),
            curData = jQuery._data( dest, oldData ),
            events = oldData.events;

        if ( events ) {
            delete curData.handle;
            curData.events = {};

            for ( type in events ) {
                for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                    jQuery.event.add( dest, type, events[ type ][ i ] );
                }
            }
        }

        // make the cloned public data object a copy from the original
        if ( curData.data ) {
            curData.data = jQuery.extend( {}, curData.data );
        }
    }

    function fixCloneNodeIssues( src, dest ) {
        var nodeName, data, e;

        // We do not need to do anything for non-Elements
        if ( dest.nodeType !== 1 ) {
            return;
        }

        nodeName = dest.nodeName.toLowerCase();

        // IE6-8 copies events bound via attachEvent when using cloneNode.
        if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
            data = jQuery._data( dest );

            for ( e in data.events ) {
                jQuery.removeEvent( dest, e, data.handle );
            }

            // Event data gets referenced instead of copied if the expando gets copied too
            dest.removeAttribute( jQuery.expando );
        }

        // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
        if ( nodeName === "script" && dest.text !== src.text ) {
            disableScript( dest ).text = src.text;
            restoreScript( dest );

            // IE6-10 improperly clones children of object elements using classid.
            // IE10 throws NoModificationAllowedError if parent is null, #12132.
        } else if ( nodeName === "object" ) {
            if ( dest.parentNode ) {
                dest.outerHTML = src.outerHTML;
            }

            // This path appears unavoidable for IE9. When cloning an object
            // element in IE9, the outerHTML strategy above is not sufficient.
            // If the src has innerHTML and the destination does not,
            // copy the src.innerHTML into the dest.innerHTML. #10324
            if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
                dest.innerHTML = src.innerHTML;
            }

        } else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set

            dest.defaultChecked = dest.checked = src.checked;

            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if ( dest.value !== src.value ) {
                dest.value = src.value;
            }

            // IE6-8 fails to return the selected option to the default selected
            // state when cloning options
        } else if ( nodeName === "option" ) {
            dest.defaultSelected = dest.selected = src.defaultSelected;

            // IE6-8 fails to set the defaultValue to the correct value when
            // cloning other types of input fields
        } else if ( nodeName === "input" || nodeName === "textarea" ) {
            dest.defaultValue = src.defaultValue;
        }
    }

    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function( name, original ) {
        jQuery.fn[ name ] = function( selector ) {
            var elems,
                i = 0,
                ret = [],
                insert = jQuery( selector ),
                last = insert.length - 1;

            for ( ; i <= last; i++ ) {
                elems = i === last ? this : this.clone(true);
                jQuery( insert[i] )[ original ]( elems );

                // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
                core_push.apply( ret, elems.get() );
            }

            return this.pushStack( ret );
        };
    });

    function getAll( context, tag ) {
        var elems, elem,
            i = 0,
            found = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName( tag || "*" ) :
                    typeof context.querySelectorAll !== "undefined" ? context.querySelectorAll( tag || "*" ) :
                undefined;

        if ( !found ) {
            for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
                if ( !tag || jQuery.nodeName( elem, tag ) ) {
                    found.push( elem );
                } else {
                    jQuery.merge( found, getAll( elem, tag ) );
                }
            }
        }

        return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
            jQuery.merge( [ context ], found ) :
            found;
    }

// Used in buildFragment, fixes the defaultChecked property
    function fixDefaultChecked( elem ) {
        if ( manipulation_rcheckableType.test( elem.type ) ) {
            elem.defaultChecked = elem.checked;
        }
    }

    jQuery.extend({
        clone: function( elem, dataAndEvents, deepDataAndEvents ) {
            var destElements, srcElements, node, i, clone,
                inPage = jQuery.contains( elem.ownerDocument, elem );

            if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
                clone = elem.cloneNode( true );

                // IE<=8 does not properly clone detached, unknown element nodes
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
            }

            if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
                (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll( clone );
                srcElements = getAll( elem );

                // Fix all IE cloning issues
                for ( i = 0; (node = srcElements[i]) != null; ++i ) {
                    // Ensure that the destination node is not null; Fixes #9587
                    if ( destElements[i] ) {
                        fixCloneNodeIssues( node, destElements[i] );
                    }
                }
            }

            // Copy the events from the original to the clone
            if ( dataAndEvents ) {
                if ( deepDataAndEvents ) {
                    srcElements = srcElements || getAll( elem );
                    destElements = destElements || getAll( clone );

                    for ( i = 0; (node = srcElements[i]) != null; i++ ) {
                        cloneCopyEvent( node, destElements[i] );
                    }
                } else {
                    cloneCopyEvent( elem, clone );
                }
            }

            // Preserve script evaluation history
            destElements = getAll( clone, "script" );
            if ( destElements.length > 0 ) {
                setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
            }

            destElements = srcElements = node = null;

            // Return the cloned set
            return clone;
        },

        buildFragment: function( elems, context, scripts, selection ) {
            var contains, elem, tag, tmp, wrap, tbody, j,
                l = elems.length,

            // Ensure a safe fragment
                safe = createSafeFragment( context ),

                nodes = [],
                i = 0;

            for ( ; i < l; i++ ) {
                elem = elems[ i ];

                if ( elem || elem === 0 ) {

                    // Add nodes directly
                    if ( jQuery.type( elem ) === "object" ) {
                        jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

                        // Convert non-html into a text node
                    } else if ( !rhtml.test( elem ) ) {
                        nodes.push( context.createTextNode( elem ) );

                        // Convert html into DOM nodes
                    } else {
                        tmp = tmp || safe.appendChild( context.createElement("div") );

                        // Deserialize a standard representation
                        tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
                        wrap = wrapMap[ tag ] || wrapMap._default;

                        tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

                        // Descend through wrappers to the right content
                        j = wrap[0];
                        while ( j-- ) {
                            tmp = tmp.lastChild;
                        }

                        // Manually add leading whitespace removed by IE
                        if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
                            nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
                        }

                        // Remove IE's autoinserted <tbody> from table fragments
                        if ( !jQuery.support.tbody ) {

                            // String was a <table>, *may* have spurious <tbody>
                            elem = tag === "table" && !rtbody.test( elem ) ?
                                tmp.firstChild :

                                // String was a bare <thead> or <tfoot>
                                    wrap[1] === "<table>" && !rtbody.test( elem ) ?
                                tmp :
                                0;

                            j = elem && elem.childNodes.length;
                            while ( j-- ) {
                                if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
                                    elem.removeChild( tbody );
                                }
                            }
                        }

                        jQuery.merge( nodes, tmp.childNodes );

                        // Fix #12392 for WebKit and IE > 9
                        tmp.textContent = "";

                        // Fix #12392 for oldIE
                        while ( tmp.firstChild ) {
                            tmp.removeChild( tmp.firstChild );
                        }

                        // Remember the top-level container for proper cleanup
                        tmp = safe.lastChild;
                    }
                }
            }

            // Fix #11356: Clear elements from fragment
            if ( tmp ) {
                safe.removeChild( tmp );
            }

            // Reset defaultChecked for any radios and checkboxes
            // about to be appended to the DOM in IE 6/7 (#8060)
            if ( !jQuery.support.appendChecked ) {
                jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
            }

            i = 0;
            while ( (elem = nodes[ i++ ]) ) {

                // #4087 - If origin and destination elements are the same, and this is
                // that element, do not do anything
                if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
                    continue;
                }

                contains = jQuery.contains( elem.ownerDocument, elem );

                // Append to fragment
                tmp = getAll( safe.appendChild( elem ), "script" );

                // Preserve script evaluation history
                if ( contains ) {
                    setGlobalEval( tmp );
                }

                // Capture executables
                if ( scripts ) {
                    j = 0;
                    while ( (elem = tmp[ j++ ]) ) {
                        if ( rscriptType.test( elem.type || "" ) ) {
                            scripts.push( elem );
                        }
                    }
                }
            }

            tmp = null;

            return safe;
        },

        cleanData: function( elems, /* internal */ acceptData ) {
            var data, id, elem, type,
                i = 0,
                internalKey = jQuery.expando,
                cache = jQuery.cache,
                deleteExpando = jQuery.support.deleteExpando,
                special = jQuery.event.special;

            for ( ; (elem = elems[i]) != null; i++ ) {

                if ( acceptData || jQuery.acceptData( elem ) ) {

                    id = elem[ internalKey ];
                    data = id && cache[ id ];

                    if ( data ) {
                        if ( data.events ) {
                            for ( type in data.events ) {
                                if ( special[ type ] ) {
                                    jQuery.event.remove( elem, type );

                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent( elem, type, data.handle );
                                }
                            }
                        }

                        // Remove cache only if it was not already removed by jQuery.event.remove
                        if ( cache[ id ] ) {

                            delete cache[ id ];

                            // IE does not allow us to delete expando properties from nodes,
                            // nor does it have a removeAttribute function on Document nodes;
                            // we must handle all of these cases
                            if ( deleteExpando ) {
                                delete elem[ internalKey ];

                            } else if ( typeof elem.removeAttribute !== "undefined" ) {
                                elem.removeAttribute( internalKey );

                            } else {
                                elem[ internalKey ] = null;
                            }

                            core_deletedIds.push( id );
                        }
                    }
                }
            }
        }
    });
    var curCSS, getStyles, iframe,
        ralpha = /alpha\([^)]*\)/i,
        ropacity = /opacity\s*=\s*([^)]*)/,
        rposition = /^(top|right|bottom|left)$/,
    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rmargin = /^margin/,
        rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
        rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
        rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
        elemdisplay = { BODY: "block" },

        cssShow = { position: "absolute", visibility: "hidden", display: "block" },
        cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        },

        cssExpand = [ "Top", "Right", "Bottom", "Left" ],
        cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
    function vendorPropName( style, name ) {

        // shortcut for names that are not vendor prefixed
        if ( name in style ) {
            return name;
        }

        // check for vendor prefixed names
        var capName = name.charAt(0).toUpperCase() + name.slice(1),
            origName = name,
            i = cssPrefixes.length;

        while ( i-- ) {
            name = cssPrefixes[ i ] + capName;
            if ( name in style ) {
                return name;
            }
        }

        return origName;
    }

    function isHidden( elem, el ) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
    }

    function showHide( elements, show ) {
        var elem,
            values = [],
            index = 0,
            length = elements.length;

        for ( ; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
            values[ index ] = jQuery._data( elem, "olddisplay" );
            if ( show ) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if ( !values[ index ] && elem.style.display === "none" ) {
                    elem.style.display = "";
                }

                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if ( elem.style.display === "" && isHidden( elem ) ) {
                    values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
                }
            } else if ( !values[ index ] && !isHidden( elem ) ) {
                jQuery._data( elem, "olddisplay", jQuery.css( elem, "display" ) );
            }
        }

        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for ( index = 0; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
            if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
                elem.style.display = show ? values[ index ] || "" : "none";
            }
        }

        return elements;
    }

    jQuery.fn.extend({
        css: function( name, value ) {
            return jQuery.access( this, function( elem, name, value ) {
                var styles, len,
                    map = {},
                    i = 0;

                if ( jQuery.isArray( name ) ) {
                    styles = getStyles( elem );
                    len = name.length;

                    for ( ; i < len; i++ ) {
                        map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                    }

                    return map;
                }

                return value !== undefined ?
                    jQuery.style( elem, name, value ) :
                    jQuery.css( elem, name );
            }, name, value, arguments.length > 1 );
        },
        show: function() {
            return showHide( this, true );
        },
        hide: function() {
            return showHide( this );
        },
        toggle: function( state ) {
            var bool = typeof state === "boolean";

            return this.each(function() {
                if ( bool ? state : isHidden( this ) ) {
                    jQuery( this ).show();
                } else {
                    jQuery( this ).hide();
                }
            });
        }
    });

    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function( elem, computed ) {
                    if ( computed ) {
                        // We should always get a number back from opacity
                        var ret = curCSS( elem, "opacity" );
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },

        // Exclude the following css properties to add px
        cssNumber: {
            "columnCount": true,
            "fillOpacity": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            // normalize float css property
            "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },

        // Get and set the style property on a DOM Node
        style: function( elem, name, value, extra ) {
            // Don't set styles on text and comment nodes
            if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
                return;
            }

            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = jQuery.camelCase( name ),
                style = elem.style;

            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

            // Check if we're setting a value
            if ( value !== undefined ) {
                type = typeof value;

                // convert relative number strings (+= or -=) to relative numbers. #7345
                if ( type === "string" && (ret = rrelNum.exec( value )) ) {
                    value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
                    // Fixes bug #9237
                    type = "number";
                }

                // Make sure that NaN and null values aren't set. See: #7116
                if ( value == null || type === "number" && isNaN( value ) ) {
                    return;
                }

                // If a number was passed in, add 'px' to the (except for certain CSS properties)
                if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
                    value += "px";
                }

                // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
                // but it would mean to define eight (for every problematic property) identical functions
                if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
                    style[ name ] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                    // Fixes bug #5509
                    try {
                        style[ name ] = value;
                    } catch(e) {}
                }

            } else {
                // If a hook was provided get the non-computed value from there
                if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
                    return ret;
                }

                // Otherwise just get the value from the style object
                return style[ name ];
            }
        },

        css: function( elem, name, extra, styles ) {
            var val, num, hooks,
                origName = jQuery.camelCase( name );

            // Make sure that we're working with the right name
            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

            // If a hook was provided get the computed value from there
            if ( hooks && "get" in hooks ) {
                val = hooks.get( elem, true, extra );
            }

            // Otherwise, if a way to get the computed value exists, use that
            if ( val === undefined ) {
                val = curCSS( elem, name, styles );
            }

            //convert "normal" to computed value
            if ( val === "normal" && name in cssNormalTransform ) {
                val = cssNormalTransform[ name ];
            }

            // Return, converting to number if forced or a qualifier was provided and val looks numeric
            if ( extra ) {
                num = parseFloat( val );
                return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
            }
            return val;
        },

        // A method for quickly swapping in/out CSS properties to get correct calculations
        swap: function( elem, options, callback, args ) {
            var ret, name,
                old = {};

            // Remember the old values, and insert the new ones
            for ( name in options ) {
                old[ name ] = elem.style[ name ];
                elem.style[ name ] = options[ name ];
            }

            ret = callback.apply( elem, args || [] );

            // Revert the old values
            for ( name in options ) {
                elem.style[ name ] = old[ name ];
            }

            return ret;
        }
    });

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
    if ( window.getComputedStyle ) {
        getStyles = function( elem ) {
            return window.getComputedStyle( elem, null );
        };

        curCSS = function( elem, name, _computed ) {
            var width, minWidth, maxWidth,
                computed = _computed || getStyles( elem ),

            // getPropertyValue is only needed for .css('filter') in IE9, see #12537
                ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
                style = elem.style;

            if ( computed ) {

                if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
                    ret = jQuery.style( elem, name );
                }

                // A tribute to the "awesome hack by Dean Edwards"
                // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
                // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
                // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

                    // Remember the original values
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;

                    // Put in the new values to get a computed value out
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;

                    // Revert the changed values
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }

            return ret;
        };
    } else if ( document.documentElement.currentStyle ) {
        getStyles = function( elem ) {
            return elem.currentStyle;
        };

        curCSS = function( elem, name, _computed ) {
            var left, rs, rsLeft,
                computed = _computed || getStyles( elem ),
                ret = computed ? computed[ name ] : undefined,
                style = elem.style;

            // Avoid setting ret to empty string here
            // so we don't default to auto
            if ( ret == null && style && style[ name ] ) {
                ret = style[ name ];
            }

            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            // but not position css attributes, as those are proportional to the parent element instead
            // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
            if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

                // Remember the original values
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;

                // Put in the new values to get a computed value out
                if ( rsLeft ) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";

                // Revert the changed values
                style.left = left;
                if ( rsLeft ) {
                    rs.left = rsLeft;
                }
            }

            return ret === "" ? "auto" : ret;
        };
    }

    function setPositiveNumber( elem, value, subtract ) {
        var matches = rnumsplit.exec( value );
        return matches ?
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
            value;
    }

    function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
        var i = extra === ( isBorderBox ? "border" : "content" ) ?
                // If we already have the right measurement, avoid augmentation
                4 :
                // Otherwise initialize for horizontal or vertical properties
                    name === "width" ? 1 : 0,

            val = 0;

        for ( ; i < 4; i += 2 ) {
            // both box models exclude margin, so add it if we want it
            if ( extra === "margin" ) {
                val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
            }

            if ( isBorderBox ) {
                // border-box includes padding, so remove it if we want content
                if ( extra === "content" ) {
                    val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
                }

                // at this point, extra isn't border nor margin, so remove border
                if ( extra !== "margin" ) {
                    val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
            } else {
                // at this point, extra isn't content, so add padding
                val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

                // at this point, extra isn't content nor padding, so add border
                if ( extra !== "padding" ) {
                    val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
            }
        }

        return val;
    }

    function getWidthOrHeight( elem, name, extra ) {

        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles( elem ),
            isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

        // some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if ( val <= 0 || val == null ) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS( elem, name, styles );
            if ( val < 0 || val == null ) {
                val = elem.style[ name ];
            }

            // Computed unit is not pixels. Stop here and return.
            if ( rnumnonpx.test(val) ) {
                return val;
            }

            // we need the check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

            // Normalize "", auto, and prepare for extra
            val = parseFloat( val ) || 0;
        }

        // use the active box-sizing model to add/subtract irrelevant styles
        return ( val +
            augmentWidthOrHeight(
                elem,
                name,
                    extra || ( isBorderBox ? "border" : "content" ),
                valueIsBorderBox,
                styles
            )
            ) + "px";
    }

// Try to determine the default display value of an element
    function css_defaultDisplay( nodeName ) {
        var doc = document,
            display = elemdisplay[ nodeName ];

        if ( !display ) {
            display = actualDisplay( nodeName, doc );

            // If the simple way fails, read from inside an iframe
            if ( display === "none" || !display ) {
                // Use the already-created iframe if possible
                iframe = ( iframe ||
                    jQuery("<iframe frameborder='0' width='0' height='0'/>")
                        .css( "cssText", "display:block !important" )
                    ).appendTo( doc.documentElement );

                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
                doc.write("<!doctype html><html><body>");
                doc.close();

                display = actualDisplay( nodeName, doc );
                iframe.detach();
            }

            // Store the correct default display
            elemdisplay[ nodeName ] = display;
        }

        return display;
    }

// Called ONLY from within css_defaultDisplay
    function actualDisplay( name, doc ) {
        var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
            display = jQuery.css( elem[0], "display" );
        elem.remove();
        return display;
    }

    jQuery.each([ "height", "width" ], function( i, name ) {
        jQuery.cssHooks[ name ] = {
            get: function( elem, computed, extra ) {
                if ( computed ) {
                    // certain elements can have dimension info if we invisibly show them
                    // however, it must have a current display style that would benefit from this
                    return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
                        jQuery.swap( elem, cssShow, function() {
                            return getWidthOrHeight( elem, name, extra );
                        }) :
                        getWidthOrHeight( elem, name, extra );
                }
            },

            set: function( elem, value, extra ) {
                var styles = extra && getStyles( elem );
                return setPositiveNumber( elem, value, extra ?
                        augmentWidthOrHeight(
                            elem,
                            name,
                            extra,
                                jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                            styles
                        ) : 0
                );
            }
        };
    });

    if ( !jQuery.support.opacity ) {
        jQuery.cssHooks.opacity = {
            get: function( elem, computed ) {
                // IE uses filters for opacity
                return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
                    ( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
                    computed ? "1" : "";
            },

            set: function( elem, value ) {
                var style = elem.style,
                    currentStyle = elem.currentStyle,
                    opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
                    filter = currentStyle && currentStyle.filter || style.filter || "";

                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;

                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                // if value === "", then remove inline opacity #12685
                if ( ( value >= 1 || value === "" ) &&
                    jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
                    style.removeAttribute ) {

                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute( "filter" );

                    // if there is no filter style applied in a css rule or unset inline opacity, we are done
                    if ( value === "" || currentStyle && !currentStyle.filter ) {
                        return;
                    }
                }

                // otherwise, set new filter values
                style.filter = ralpha.test( filter ) ?
                    filter.replace( ralpha, opacity ) :
                    filter + " " + opacity;
            }
        };
    }

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
    jQuery(function() {
        if ( !jQuery.support.reliableMarginRight ) {
            jQuery.cssHooks.marginRight = {
                get: function( elem, computed ) {
                    if ( computed ) {
                        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                        // Work around by temporarily setting element display to inline-block
                        return jQuery.swap( elem, { "display": "inline-block" },
                            curCSS, [ elem, "marginRight" ] );
                    }
                }
            };
        }

        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
        // getComputedStyle returns percent when specified for top/left/bottom/right
        // rather than make the css module depend on the offset module, we just check for it here
        if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
            jQuery.each( [ "top", "left" ], function( i, prop ) {
                jQuery.cssHooks[ prop ] = {
                    get: function( elem, computed ) {
                        if ( computed ) {
                            computed = curCSS( elem, prop );
                            // if curCSS returns percentage, fallback to offset
                            return rnumnonpx.test( computed ) ?
                                jQuery( elem ).position()[ prop ] + "px" :
                                computed;
                        }
                    }
                };
            });
        }

    });

    if ( jQuery.expr && jQuery.expr.filters ) {
        jQuery.expr.filters.hidden = function( elem ) {
            return ( elem.offsetWidth === 0 && elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
        };

        jQuery.expr.filters.visible = function( elem ) {
            return !jQuery.expr.filters.hidden( elem );
        };
    }

// These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function( prefix, suffix ) {
        jQuery.cssHooks[ prefix + suffix ] = {
            expand: function( value ) {
                var i = 0,
                    expanded = {},

                // assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [ value ];

                for ( ; i < 4; i++ ) {
                    expanded[ prefix + cssExpand[ i ] + suffix ] =
                        parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                }

                return expanded;
            }
        };

        if ( !rmargin.test( prefix ) ) {
            jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
        }
    });
    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param( this.serializeArray() );
        },
        serializeArray: function() {
            return this.map(function(){
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop( this, "elements" );
                return elements ? jQuery.makeArray( elements ) : this;
            })
                .filter(function(){
                    var type = this.type;
                    // Use .is(":disabled") so that fieldset[disabled] works
                    return this.name && !jQuery( this ).is( ":disabled" ) &&
                        rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                        ( this.checked || !manipulation_rcheckableType.test( type ) );
                })
                .map(function( i, elem ){
                    var val = jQuery( this ).val();

                    return val == null ?
                        null :
                        jQuery.isArray( val ) ?
                            jQuery.map( val, function( val ){
                                return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                            }) :
                        { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                }).get();
        }
    });

//Serialize an array of form elements or a set of
//key/values into a query string
    jQuery.param = function( a, traditional ) {
        var prefix,
            s = [],
            add = function( key, value ) {
                // If value is a function, invoke it and return its value
                value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
                s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
            };

        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if ( traditional === undefined ) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }

        // If an array was passed in, assume that it is an array of form elements.
        if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
            // Serialize the form elements
            jQuery.each( a, function() {
                add( this.name, this.value );
            });

        } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for ( prefix in a ) {
                buildParams( prefix, a[ prefix ], traditional, add );
            }
        }

        // Return the resulting serialization
        return s.join( "&" ).replace( r20, "+" );
    };

    function buildParams( prefix, obj, traditional, add ) {
        var name;

        if ( jQuery.isArray( obj ) ) {
            // Serialize array item.
            jQuery.each( obj, function( i, v ) {
                if ( traditional || rbracket.test( prefix ) ) {
                    // Treat each array item as a scalar.
                    add( prefix, v );

                } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
                }
            });

        } else if ( !traditional && jQuery.type( obj ) === "object" ) {
            // Serialize object item.
            for ( name in obj ) {
                buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
            }

        } else {
            // Serialize scalar item.
            add( prefix, obj );
        }
    }
    var
    // Document location
        ajaxLocParts,
        ajaxLocation,

        ajax_nonce = jQuery.now(),

        ajax_rquery = /\?/,
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
    // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

    // Keep a copy of the old load method
        _load = jQuery.fn.load,

    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
        prefilters = {},

    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
        transports = {},

    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
    try {
        ajaxLocation = location.href;
    } catch( e ) {
        // Use the href attribute of an A element
        // since IE will modify it given document.location
        ajaxLocation = document.createElement( "a" );
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }

// Segment location into parts
    ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports( structure ) {

        // dataTypeExpression is optional and defaults to "*"
        return function( dataTypeExpression, func ) {

            if ( typeof dataTypeExpression !== "string" ) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

            if ( jQuery.isFunction( func ) ) {
                // For each dataType in the dataTypeExpression
                while ( (dataType = dataTypes[i++]) ) {
                    // Prepend if requested
                    if ( dataType[0] === "+" ) {
                        dataType = dataType.slice( 1 ) || "*";
                        (structure[ dataType ] = structure[ dataType ] || []).unshift( func );

                        // Otherwise append
                    } else {
                        (structure[ dataType ] = structure[ dataType ] || []).push( func );
                    }
                }
            }
        };
    }

// Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

        var inspected = {},
            seekingTransport = ( structure === transports );

        function inspect( dataType ) {
            var selected;
            inspected[ dataType ] = true;
            jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
                var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
                if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
                    options.dataTypes.unshift( dataTypeOrTransport );
                    inspect( dataTypeOrTransport );
                    return false;
                } else if ( seekingTransport ) {
                    return !( selected = dataTypeOrTransport );
                }
            });
            return selected;
        }

        return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
    }

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
    function ajaxExtend( target, src ) {
        var key, deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for ( key in src ) {
            if ( src[ key ] !== undefined ) {
                ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
            }
        }
        if ( deep ) {
            jQuery.extend( true, target, deep );
        }

        return target;
    }

    jQuery.fn.load = function( url, params, callback ) {
        if ( typeof url !== "string" && _load ) {
            return _load.apply( this, arguments );
        }

        var selector, type, response,
            self = this,
            off = url.indexOf(" ");

        if ( off >= 0 ) {
            selector = url.slice( off, url.length );
            url = url.slice( 0, off );
        }

        // If it's a function
        if ( jQuery.isFunction( params ) ) {

            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
        } else if ( params && typeof params === "object" ) {
            type = "POST";
        }

        // If we have elements to modify, make the request
        if ( self.length > 0 ) {
            jQuery.ajax({
                url: url,

                // if "type" variable is undefined, then "GET" method will be used
                type: type,
                dataType: "html",
                data: params
            }).done(function( responseText ) {

                // Save response for use in complete callback
                response = arguments;

                self.html( selector ?

                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

                    // Otherwise use the full result
                    responseText );

            }).complete( callback && function( jqXHR, status ) {
                self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
            });
        }

        return this;
    };

// Attach a bunch of functions for handling common AJAX events
    jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
        jQuery.fn[ type ] = function( fn ){
            return this.on( type, fn );
        };
    });

    jQuery.each( [ "get", "post" ], function( i, method ) {
        jQuery[ method ] = function( url, data, callback, type ) {
            // shift arguments if data argument was omitted
            if ( jQuery.isFunction( data ) ) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });

    jQuery.extend({

        // Counter for holding the number of active queries
        active: 0,

        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},

        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
             timeout: 0,
             data: null,
             dataType: null,
             username: null,
             password: null,
             cache: null,
             throws: false,
             traditional: false,
             headers: {},
             */

            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },

            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },

            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },

            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {

                // Convert anything to text
                "* text": window.String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,

                // Parse text as xml
                "text xml": jQuery.parseXML
            },

            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function( target, settings ) {
            return settings ?

                // Building a settings object
                ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

                // Extending ajaxSettings
                ajaxExtend( jQuery.ajaxSettings, target );
        },

        ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
        ajaxTransport: addToPrefiltersOrTransports( transports ),

        // Main method
        ajax: function( url, options ) {

            // If url is an object, simulate pre-1.5 signature
            if ( typeof url === "object" ) {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var transport,
            // URL without anti-cache param
                cacheURL,
            // Response headers
                responseHeadersString,
                responseHeaders,
            // timeout handle
                timeoutTimer,
            // Cross-domain detection vars
                parts,
            // To know if global events are to be dispatched
                fireGlobals,
            // Loop variable
                i,
            // Create the final options object
                s = jQuery.ajaxSetup( {}, options ),
            // Callbacks context
                callbackContext = s.context || s,
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
                    jQuery( callbackContext ) :
                    jQuery.event,
            // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
            // Status-dependent callbacks
                statusCode = s.statusCode || {},
            // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
            // The jqXHR state
                state = 0,
            // Default abort message
                strAbort = "canceled",
            // Fake xhr
                jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function( key ) {
                        var match;
                        if ( state === 2 ) {
                            if ( !responseHeaders ) {
                                responseHeaders = {};
                                while ( (match = rheaders.exec( responseHeadersString )) ) {
                                    responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                                }
                            }
                            match = responseHeaders[ key.toLowerCase() ];
                        }
                        return match == null ? null : match;
                    },

                    // Raw string
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function( name, value ) {
                        var lname = name.toLowerCase();
                        if ( !state ) {
                            name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                            requestHeaders[ name ] = value;
                        }
                        return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function( type ) {
                        if ( !state ) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function( map ) {
                        var code;
                        if ( map ) {
                            if ( state < 2 ) {
                                for ( code in map ) {
                                    // Lazy-add the new callback in a way that preserves old ones
                                    statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                                }
                            } else {
                                // Execute the appropriate callbacks
                                jqXHR.always( map[ jqXHR.status ] );
                            }
                        }
                        return this;
                    },

                    // Cancel the request
                    abort: function( statusText ) {
                        var finalText = statusText || strAbort;
                        if ( transport ) {
                            transport.abort( finalText );
                        }
                        done( 0, finalText );
                        return this;
                    }
                };

            // Attach deferreds
            deferred.promise( jqXHR ).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;

            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

            // A cross-domain request is in order when we have a protocol:host:port mismatch
            if ( s.crossDomain == null ) {
                parts = rurl.exec( s.url.toLowerCase() );
                s.crossDomain = !!( parts &&
                    ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
                        ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
                        ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
                    );
            }

            // Convert data if not already a string
            if ( s.data && s.processData && typeof s.data !== "string" ) {
                s.data = jQuery.param( s.data, s.traditional );
            }

            // Apply prefilters
            inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

            // If request was aborted inside a prefilter, stop there
            if ( state === 2 ) {
                return jqXHR;
            }

            // We can fire global events as of now if asked to
            fireGlobals = s.global;

            // Watch for a new set of requests
            if ( fireGlobals && jQuery.active++ === 0 ) {
                jQuery.event.trigger("ajaxStart");
            }

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test( s.type );

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;

            // More options handling for requests with no content
            if ( !s.hasContent ) {

                // If data is available, append data to url
                if ( s.data ) {
                    cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }

                // Add anti-cache in url if needed
                if ( s.cache === false ) {
                    s.url = rts.test( cacheURL ) ?

                        // If there is already a '_' parameter, set its value
                        cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

                        // Otherwise add one to the end
                        cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
                }
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if ( s.ifModified ) {
                if ( jQuery.lastModified[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
                }
                if ( jQuery.etag[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
                }
            }

            // Set the correct header, if data is being sent
            if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
                jqXHR.setRequestHeader( "Content-Type", s.contentType );
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                    s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                    s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                    s.accepts[ "*" ]
            );

            // Check for headers option
            for ( i in s.headers ) {
                jqXHR.setRequestHeader( i, s.headers[ i ] );
            }

            // Allow custom headers/mimetypes and early abort
            if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
                // Abort if not done already and return
                return jqXHR.abort();
            }

            // aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            for ( i in { success: 1, error: 1, complete: 1 } ) {
                jqXHR[ i ]( s[ i ] );
            }

            // Get transport
            transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

            // If no transport, we auto-abort
            if ( !transport ) {
                done( -1, "No Transport" );
            } else {
                jqXHR.readyState = 1;

                // Send global event
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
                }
                // Timeout
                if ( s.async && s.timeout > 0 ) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout );
                }

                try {
                    state = 1;
                    transport.send( requestHeaders, done );
                } catch ( e ) {
                    // Propagate exception as error if not done
                    if ( state < 2 ) {
                        done( -1, e );
                        // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }

            // Callback for when everything is done
            function done( status, nativeStatusText, responses, headers ) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;

                // Called once
                if ( state === 2 ) {
                    return;
                }

                // State is "done" now
                state = 2;

                // Clear timeout if it exists
                if ( timeoutTimer ) {
                    clearTimeout( timeoutTimer );
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Get response data
                if ( responses ) {
                    response = ajaxHandleResponses( s, jqXHR, responses );
                }

                // If successful, handle type chaining
                if ( status >= 200 && status < 300 || status === 304 ) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if ( s.ifModified ) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if ( modified ) {
                            jQuery.lastModified[ cacheURL ] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if ( modified ) {
                            jQuery.etag[ cacheURL ] = modified;
                        }
                    }

                    // If not modified
                    if ( status === 304 ) {
                        isSuccess = true;
                        statusText = "notmodified";

                        // If we have data
                    } else {
                        isSuccess = ajaxConvert( s, response );
                        statusText = isSuccess.state;
                        success = isSuccess.data;
                        error = isSuccess.error;
                        isSuccess = !error;
                    }
                } else {
                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if ( status || !statusText ) {
                        statusText = "error";
                        if ( status < 0 ) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = ( nativeStatusText || statusText ) + "";

                // Success/Error
                if ( isSuccess ) {
                    deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
                } else {
                    deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
                }

                // Status-dependent callbacks
                jqXHR.statusCode( statusCode );
                statusCode = undefined;

                if ( fireGlobals ) {
                    globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                        [ jqXHR, s, isSuccess ? success : error ] );
                }

                // Complete
                completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
                    // Handle the global AJAX counter
                    if ( !( --jQuery.active ) ) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            return jqXHR;
        },

        getScript: function( url, callback ) {
            return jQuery.get( url, undefined, callback, "script" );
        },

        getJSON: function( url, data, callback ) {
            return jQuery.get( url, data, callback, "json" );
        }
    });

    /* Handles responses to an ajax request:
     * - sets all responseXXX fields accordingly
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses( s, jqXHR, responses ) {

        var ct, type, finalDataType, firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes,
            responseFields = s.responseFields;

        // Fill responseXXX fields
        for ( type in responseFields ) {
            if ( type in responses ) {
                jqXHR[ responseFields[type] ] = responses[ type ];
            }
        }

        // Remove auto dataType and get content-type in the process
        while( dataTypes[ 0 ] === "*" ) {
            dataTypes.shift();
            if ( ct === undefined ) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }

        // Check if we're dealing with a known content-type
        if ( ct ) {
            for ( type in contents ) {
                if ( contents[ type ] && contents[ type ].test( ct ) ) {
                    dataTypes.unshift( type );
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        if ( dataTypes[ 0 ] in responses ) {
            finalDataType = dataTypes[ 0 ];
        } else {
            // Try convertible dataTypes
            for ( type in responses ) {
                if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
                    finalDataType = type;
                    break;
                }
                if ( !firstDataType ) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if ( finalDataType ) {
            if ( finalDataType !== dataTypes[ 0 ] ) {
                dataTypes.unshift( finalDataType );
            }
            return responses[ finalDataType ];
        }
    }

// Chain conversions given the request and the original response
    function ajaxConvert( s, response ) {

        var conv, conv2, current, tmp,
            converters = {},
            i = 0,
        // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice(),
            prev = dataTypes[ 0 ];

        // Apply the dataFilter if provided
        if ( s.dataFilter ) {
            response = s.dataFilter( response, s.dataType );
        }

        // Create converters map with lowercased keys
        if ( dataTypes[ 1 ] ) {
            for ( conv in s.converters ) {
                converters[ conv.toLowerCase() ] = s.converters[ conv ];
            }
        }

        // Convert to each sequential dataType, tolerating list modification
        for ( ; (current = dataTypes[++i]); ) {

            // There's only work to do if current dataType is non-auto
            if ( current !== "*" ) {

                // Convert response if prev dataType is non-auto and differs from current
                if ( prev !== "*" && prev !== current ) {

                    // Seek a direct converter
                    conv = converters[ prev + " " + current ] || converters[ "* " + current ];

                    // If none found, seek a pair
                    if ( !conv ) {
                        for ( conv2 in converters ) {

                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if ( tmp[ 1 ] === current ) {

                                // If prev can be converted to accepted input
                                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                    converters[ "* " + tmp[ 0 ] ];
                                if ( conv ) {
                                    // Condense equivalence converters
                                    if ( conv === true ) {
                                        conv = converters[ conv2 ];

                                        // Otherwise, insert the intermediate dataType
                                    } else if ( converters[ conv2 ] !== true ) {
                                        current = tmp[ 0 ];
                                        dataTypes.splice( i--, 0, current );
                                    }

                                    break;
                                }
                            }
                        }
                    }

                    // Apply converter (if not an equivalence)
                    if ( conv !== true ) {

                        // Unless errors are allowed to bubble, catch and return them
                        if ( conv && s["throws"] ) {
                            response = conv( response );
                        } else {
                            try {
                                response = conv( response );
                            } catch ( e ) {
                                return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                            }
                        }
                    }
                }

                // Update prev for next iteration
                prev = current;
            }
        }

        return { state: "success", data: response };
    }
// Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function( text ) {
                jQuery.globalEval( text );
                return text;
            }
        }
    });

// Handle cache's special case and global
    jQuery.ajaxPrefilter( "script", function( s ) {
        if ( s.cache === undefined ) {
            s.cache = false;
        }
        if ( s.crossDomain ) {
            s.type = "GET";
            s.global = false;
        }
    });

// Bind script tag hack transport
    jQuery.ajaxTransport( "script", function(s) {

        // This transport only deals with cross domain requests
        if ( s.crossDomain ) {

            var script,
                head = document.head || jQuery("head")[0] || document.documentElement;

            return {

                send: function( _, callback ) {

                    script = document.createElement("script");

                    script.async = true;

                    if ( s.scriptCharset ) {
                        script.charset = s.scriptCharset;
                    }

                    script.src = s.url;

                    // Attach handlers for all browsers
                    script.onload = script.onreadystatechange = function( _, isAbort ) {

                        if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

                            // Handle memory leak in IE
                            script.onload = script.onreadystatechange = null;

                            // Remove the script
                            if ( script.parentNode ) {
                                script.parentNode.removeChild( script );
                            }

                            // Dereference the script
                            script = null;

                            // Callback if not abort
                            if ( !isAbort ) {
                                callback( 200, "success" );
                            }
                        }
                    };

                    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    head.insertBefore( script, head.firstChild );
                },

                abort: function() {
                    if ( script ) {
                        script.onload( undefined, true );
                    }
                }
            };
        }
    });
    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
            this[ callback ] = true;
            return callback;
        }
    });

// Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
                "url" :
                typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
                );

        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
                s.jsonpCallback() :
                s.jsonpCallback;

            // Insert callback into url or form data
            if ( jsonProp ) {
                s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
            } else if ( s.jsonp !== false ) {
                s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if ( !responseContainer ) {
                    jQuery.error( callbackName + " was not called" );
                }
                return responseContainer[ 0 ];
            };

            // force json dataType
            s.dataTypes[ 0 ] = "json";

            // Install callback
            overwritten = window[ callbackName ];
            window[ callbackName ] = function() {
                responseContainer = arguments;
            };

            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // Restore preexisting value
                window[ callbackName ] = overwritten;

                // Save back as free
                if ( s[ callbackName ] ) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    // save the callback name for future use
                    oldCallbacks.push( callbackName );
                }

                // Call if it was a function and we have a response
                if ( responseContainer && jQuery.isFunction( overwritten ) ) {
                    overwritten( responseContainer[ 0 ] );
                }

                responseContainer = overwritten = undefined;
            });

            // Delegate to script
            return "script";
        }
    });
    var xhrCallbacks, xhrSupported,
        xhrId = 0,
    // #5280: Internet Explorer will keep connections alive if we don't abort on unload
        xhrOnUnloadAbort = window.ActiveXObject && function() {
            // Abort all pending requests
            var key;
            for ( key in xhrCallbacks ) {
                xhrCallbacks[ key ]( undefined, true );
            }
        };

// Functions to create xhrs
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch( e ) {}
    }

    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch( e ) {}
    }

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
    jQuery.ajaxSettings.xhr = window.ActiveXObject ?
        /* Microsoft failed to properly
         * implement the XMLHttpRequest in IE7 (can't request local files),
         * so we use the ActiveXObject when it is available
         * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
         * we need a fallback.
         */
        function() {
            return !this.isLocal && createStandardXHR() || createActiveXHR();
        } :
        // For all other browsers, use the standard XMLHttpRequest object
        createStandardXHR;

// Determine support properties
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
    xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
    if ( xhrSupported ) {

        jQuery.ajaxTransport(function( s ) {
            // Cross domain only allowed if supported through XMLHttpRequest
            if ( !s.crossDomain || jQuery.support.cors ) {

                var callback;

                return {
                    send: function( headers, complete ) {

                        // Get a new xhr
                        var handle, i,
                            xhr = s.xhr();

                        // Open the socket
                        // Passing null username, generates a login popup on Opera (#2865)
                        if ( s.username ) {
                            xhr.open( s.type, s.url, s.async, s.username, s.password );
                        } else {
                            xhr.open( s.type, s.url, s.async );
                        }

                        // Apply custom fields if provided
                        if ( s.xhrFields ) {
                            for ( i in s.xhrFields ) {
                                xhr[ i ] = s.xhrFields[ i ];
                            }
                        }

                        // Override mime type if needed
                        if ( s.mimeType && xhr.overrideMimeType ) {
                            xhr.overrideMimeType( s.mimeType );
                        }

                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        if ( !s.crossDomain && !headers["X-Requested-With"] ) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }

                        // Need an extra try/catch for cross domain requests in Firefox 3
                        try {
                            for ( i in headers ) {
                                xhr.setRequestHeader( i, headers[ i ] );
                            }
                        } catch( err ) {}

                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        xhr.send( ( s.hasContent && s.data ) || null );

                        // Listener
                        callback = function( _, isAbort ) {

                            var status,
                                statusText,
                                responseHeaders,
                                responses,
                                xml;

                            // Firefox throws exceptions when accessing properties
                            // of an xhr when a network error occurred
                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                            try {

                                // Was never called and is aborted or complete
                                if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

                                    // Only called once
                                    callback = undefined;

                                    // Do not keep as active anymore
                                    if ( handle ) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if ( xhrOnUnloadAbort ) {
                                            delete xhrCallbacks[ handle ];
                                        }
                                    }

                                    // If it's an abort
                                    if ( isAbort ) {
                                        // Abort it manually if needed
                                        if ( xhr.readyState !== 4 ) {
                                            xhr.abort();
                                        }
                                    } else {
                                        responses = {};
                                        status = xhr.status;
                                        xml = xhr.responseXML;
                                        responseHeaders = xhr.getAllResponseHeaders();

                                        // Construct response list
                                        if ( xml && xml.documentElement /* #4958 */ ) {
                                            responses.xml = xml;
                                        }

                                        // When requesting binary data, IE6-9 will throw an exception
                                        // on any attempt to access responseText (#11426)
                                        if ( typeof xhr.responseText === "string" ) {
                                            responses.text = xhr.responseText;
                                        }

                                        // Firefox throws an exception when accessing
                                        // statusText for faulty cross-domain requests
                                        try {
                                            statusText = xhr.statusText;
                                        } catch( e ) {
                                            // We normalize with Webkit giving an empty statusText
                                            statusText = "";
                                        }

                                        // Filter status for non standard behaviors

                                        // If the request is local and we have data: assume a success
                                        // (success with no data won't get notified, that's the best we
                                        // can do given current implementations)
                                        if ( !status && s.isLocal && !s.crossDomain ) {
                                            status = responses.text ? 200 : 404;
                                            // IE - #1450: sometimes returns 1223 when it should be 204
                                        } else if ( status === 1223 ) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch( firefoxAccessException ) {
                                if ( !isAbort ) {
                                    complete( -1, firefoxAccessException );
                                }
                            }

                            // Call complete if needed
                            if ( responses ) {
                                complete( status, statusText, responses, responseHeaders );
                            }
                        };

                        if ( !s.async ) {
                            // if we're in sync mode we fire the callback
                            callback();
                        } else if ( xhr.readyState === 4 ) {
                            // (IE6 & IE7) if it's in cache and has been
                            // retrieved directly we need to fire the callback
                            setTimeout( callback );
                        } else {
                            handle = ++xhrId;
                            if ( xhrOnUnloadAbort ) {
                                // Create the active xhrs callbacks list if needed
                                // and attach the unload handler
                                if ( !xhrCallbacks ) {
                                    xhrCallbacks = {};
                                    jQuery( window ).unload( xhrOnUnloadAbort );
                                }
                                // Add to list of active xhrs callbacks
                                xhrCallbacks[ handle ] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },

                    abort: function() {
                        if ( callback ) {
                            callback( undefined, true );
                        }
                    }
                };
            }
        });
    }
    var fxNow, timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
        rrun = /queueHooks$/,
        animationPrefilters = [ defaultPrefilter ],
        tweeners = {
            "*": [function( prop, value ) {
                var end, unit,
                    tween = this.createTween( prop, value ),
                    parts = rfxnum.exec( value ),
                    target = tween.cur(),
                    start = +target || 0,
                    scale = 1,
                    maxIterations = 20;

                if ( parts ) {
                    end = +parts[2];
                    unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

                    // We need to compute starting value
                    if ( unit !== "px" && start ) {
                        // Iteratively approximate from a nonzero starting point
                        // Prefer the current property, because this process will be trivial if it uses the same units
                        // Fallback to end or a simple constant
                        start = jQuery.css( tween.elem, prop, true ) || end || 1;

                        do {
                            // If previous iteration zeroed out, double until we get *something*
                            // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                            scale = scale || ".5";

                            // Adjust and apply
                            start = start / scale;
                            jQuery.style( tween.elem, prop, start + unit );

                            // Update scale, tolerating zero or NaN from tween.cur()
                            // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
                        } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
                    }

                    tween.unit = unit;
                    tween.start = start;
                    // If a +=/-= token was provided, we're doing a relative animation
                    tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
                }
                return tween;
            }]
        };

// Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return ( fxNow = jQuery.now() );
    }

    function createTweens( animation, props ) {
        jQuery.each( props, function( prop, value ) {
            var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
                index = 0,
                length = collection.length;
            for ( ; index < length; index++ ) {
                if ( collection[ index ].call( animation, prop, value ) ) {

                    // we're done with this property
                    return;
                }
            }
        });
    }

    function Animation( elem, properties, options ) {
        var result,
            stopped,
            index = 0,
            length = animationPrefilters.length,
            deferred = jQuery.Deferred().always( function() {
                // don't match elem in the :animated selector
                delete tick.elem;
            }),
            tick = function() {
                if ( stopped ) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
                // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                for ( ; index < length ; index++ ) {
                    animation.tweens[ index ].run( percent );
                }

                deferred.notifyWith( elem, [ animation, percent, remaining ]);

                if ( percent < 1 && length ) {
                    return remaining;
                } else {
                    deferred.resolveWith( elem, [ animation ] );
                    return false;
                }
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend( {}, properties ),
                opts: jQuery.extend( true, { specialEasing: {} }, options ),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function( prop, end ) {
                    var tween = jQuery.Tween( elem, animation.opts, prop, end,
                            animation.opts.specialEasing[ prop ] || animation.opts.easing );
                    animation.tweens.push( tween );
                    return tween;
                },
                stop: function( gotoEnd ) {
                    var index = 0,
                    // if we are going to the end, we want to run all the tweens
                    // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if ( stopped ) {
                        return this;
                    }
                    stopped = true;
                    for ( ; index < length ; index++ ) {
                        animation.tweens[ index ].run( 1 );
                    }

                    // resolve when we played the last frame
                    // otherwise, reject
                    if ( gotoEnd ) {
                        deferred.resolveWith( elem, [ animation, gotoEnd ] );
                    } else {
                        deferred.rejectWith( elem, [ animation, gotoEnd ] );
                    }
                    return this;
                }
            }),
            props = animation.props;

        propFilter( props, animation.opts.specialEasing );

        for ( ; index < length ; index++ ) {
            result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
            if ( result ) {
                return result;
            }
        }

        createTweens( animation, props );

        if ( jQuery.isFunction( animation.opts.start ) ) {
            animation.opts.start.call( elem, animation );
        }

        jQuery.fx.timer(
            jQuery.extend( tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            })
        );

        // attach callbacks from options
        return animation.progress( animation.opts.progress )
            .done( animation.opts.done, animation.opts.complete )
            .fail( animation.opts.fail )
            .always( animation.opts.always );
    }

    function propFilter( props, specialEasing ) {
        var index, name, easing, value, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for ( index in props ) {
            name = jQuery.camelCase( index );
            easing = specialEasing[ name ];
            value = props[ index ];
            if ( jQuery.isArray( value ) ) {
                easing = value[ 1 ];
                value = props[ index ] = value[ 0 ];
            }

            if ( index !== name ) {
                props[ name ] = value;
                delete props[ index ];
            }

            hooks = jQuery.cssHooks[ name ];
            if ( hooks && "expand" in hooks ) {
                value = hooks.expand( value );
                delete props[ name ];

                // not quite $.extend, this wont overwrite keys already present.
                // also - reusing 'index' from above because we have the correct "name"
                for ( index in value ) {
                    if ( !( index in props ) ) {
                        props[ index ] = value[ index ];
                        specialEasing[ index ] = easing;
                    }
                }
            } else {
                specialEasing[ name ] = easing;
            }
        }
    }

    jQuery.Animation = jQuery.extend( Animation, {

        tweener: function( props, callback ) {
            if ( jQuery.isFunction( props ) ) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.split(" ");
            }

            var prop,
                index = 0,
                length = props.length;

            for ( ; index < length ; index++ ) {
                prop = props[ index ];
                tweeners[ prop ] = tweeners[ prop ] || [];
                tweeners[ prop ].unshift( callback );
            }
        },

        prefilter: function( callback, prepend ) {
            if ( prepend ) {
                animationPrefilters.unshift( callback );
            } else {
                animationPrefilters.push( callback );
            }
        }
    });

    function defaultPrefilter( elem, props, opts ) {
        /*jshint validthis:true */
        var index, prop, value, length, dataShow, toggle, tween, hooks, oldfire,
            anim = this,
            style = elem.style,
            orig = {},
            handled = [],
            hidden = elem.nodeType && isHidden( elem );

        // handle queue: false promises
        if ( !opts.queue ) {
            hooks = jQuery._queueHooks( elem, "fx" );
            if ( hooks.unqueued == null ) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if ( !hooks.unqueued ) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;

            anim.always(function() {
                // doing this makes sure that the complete handler will be called
                // before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if ( !jQuery.queue( elem, "fx" ).length ) {
                        hooks.empty.fire();
                    }
                });
            });
        }

        // height/width overflow pass
        if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE does not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            if ( jQuery.css( elem, "display" ) === "inline" &&
                jQuery.css( elem, "float" ) === "none" ) {

                // inline-level elements accept inline-block;
                // block-level elements need to be inline with layout
                if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
                    style.display = "inline-block";

                } else {
                    style.zoom = 1;
                }
            }
        }

        if ( opts.overflow ) {
            style.overflow = "hidden";
            if ( !jQuery.support.shrinkWrapBlocks ) {
                anim.done(function() {
                    style.overflow = opts.overflow[ 0 ];
                    style.overflowX = opts.overflow[ 1 ];
                    style.overflowY = opts.overflow[ 2 ];
                });
            }
        }


        // show/hide pass
        for ( index in props ) {
            value = props[ index ];
            if ( rfxtypes.exec( value ) ) {
                delete props[ index ];
                toggle = toggle || value === "toggle";
                if ( value === ( hidden ? "hide" : "show" ) ) {
                    continue;
                }
                handled.push( index );
            }
        }

        length = handled.length;
        if ( length ) {
            dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
            if ( "hidden" in dataShow ) {
                hidden = dataShow.hidden;
            }

            // store state if its toggle - enables .stop().toggle() to "reverse"
            if ( toggle ) {
                dataShow.hidden = !hidden;
            }
            if ( hidden ) {
                jQuery( elem ).show();
            } else {
                anim.done(function() {
                    jQuery( elem ).hide();
                });
            }
            anim.done(function() {
                var prop;
                jQuery._removeData( elem, "fxshow" );
                for ( prop in orig ) {
                    jQuery.style( elem, prop, orig[ prop ] );
                }
            });
            for ( index = 0 ; index < length ; index++ ) {
                prop = handled[ index ];
                tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
                orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

                if ( !( prop in dataShow ) ) {
                    dataShow[ prop ] = tween.start;
                    if ( hidden ) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        }
    }

    function Tween( elem, options, prop, end, easing ) {
        return new Tween.prototype.init( elem, options, prop, end, easing );
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
        constructor: Tween,
        init: function( elem, options, prop, end, easing, unit ) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
        },
        cur: function() {
            var hooks = Tween.propHooks[ this.prop ];

            return hooks && hooks.get ?
                hooks.get( this ) :
                Tween.propHooks._default.get( this );
        },
        run: function( percent ) {
            var eased,
                hooks = Tween.propHooks[ this.prop ];

            if ( this.options.duration ) {
                this.pos = eased = jQuery.easing[ this.easing ](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = ( this.end - this.start ) * eased + this.start;

            if ( this.options.step ) {
                this.options.step.call( this.elem, this.now, this );
            }

            if ( hooks && hooks.set ) {
                hooks.set( this );
            } else {
                Tween.propHooks._default.set( this );
            }
            return this;
        }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
        _default: {
            get: function( tween ) {
                var result;

                if ( tween.elem[ tween.prop ] != null &&
                    (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
                    return tween.elem[ tween.prop ];
                }

                // passing a non empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails
                // so, simple values such as "10px" are parsed to Float.
                // complex values such as "rotate(1rad)" are returned as is.
                result = jQuery.css( tween.elem, tween.prop, "auto" );
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function( tween ) {
                // use step hook for back compat - use cssHook if its there - use .style if its
                // available and use plain properties where available
                if ( jQuery.fx.step[ tween.prop ] ) {
                    jQuery.fx.step[ tween.prop ]( tween );
                } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
                    jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
                } else {
                    tween.elem[ tween.prop ] = tween.now;
                }
            }
        }
    };

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function( tween ) {
            if ( tween.elem.nodeType && tween.elem.parentNode ) {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    };

    jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
        var cssFn = jQuery.fn[ name ];
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply( this, arguments ) :
                this.animate( genFx( name, true ), speed, easing, callback );
        };
    });

    jQuery.fn.extend({
        fadeTo: function( speed, to, easing, callback ) {

            // show any hidden elements after setting opacity to 0
            return this.filter( isHidden ).css( "opacity", 0 ).show()

                // animate to the value specified
                .end().animate({ opacity: to }, speed, easing, callback );
        },
        animate: function( prop, speed, easing, callback ) {
            var empty = jQuery.isEmptyObject( prop ),
                optall = jQuery.speed( speed, easing, callback ),
                doAnimation = function() {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation( this, jQuery.extend( {}, prop ), optall );
                    doAnimation.finish = function() {
                        anim.stop( true );
                    };
                    // Empty animations, or finishing resolves immediately
                    if ( empty || jQuery._data( this, "finish" ) ) {
                        anim.stop( true );
                    }
                };
            doAnimation.finish = doAnimation;

            return empty || optall.queue === false ?
                this.each( doAnimation ) :
                this.queue( optall.queue, doAnimation );
        },
        stop: function( type, clearQueue, gotoEnd ) {
            var stopQueue = function( hooks ) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop( gotoEnd );
            };

            if ( typeof type !== "string" ) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if ( clearQueue && type !== false ) {
                this.queue( type || "fx", [] );
            }

            return this.each(function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = jQuery._data( this );

                if ( index ) {
                    if ( data[ index ] && data[ index ].stop ) {
                        stopQueue( data[ index ] );
                    }
                } else {
                    for ( index in data ) {
                        if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                            stopQueue( data[ index ] );
                        }
                    }
                }

                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
                        timers[ index ].anim.stop( gotoEnd );
                        dequeue = false;
                        timers.splice( index, 1 );
                    }
                }

                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if ( dequeue || !gotoEnd ) {
                    jQuery.dequeue( this, type );
                }
            });
        },
        finish: function( type ) {
            if ( type !== false ) {
                type = type || "fx";
            }
            return this.each(function() {
                var index,
                    data = jQuery._data( this ),
                    queue = data[ type + "queue" ],
                    hooks = data[ type + "queueHooks" ],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                // enable finishing flag on private data
                data.finish = true;

                // empty the queue first
                jQuery.queue( this, type, [] );

                if ( hooks && hooks.cur && hooks.cur.finish ) {
                    hooks.cur.finish.call( this );
                }

                // look for any active animations, and finish them
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                        timers[ index ].anim.stop( true );
                        timers.splice( index, 1 );
                    }
                }

                // look for any animations in the old queue and finish them
                for ( index = 0; index < length; index++ ) {
                    if ( queue[ index ] && queue[ index ].finish ) {
                        queue[ index ].finish.call( this );
                    }
                }

                // turn off finishing flag
                delete data.finish;
            });
        }
    });

// Generate parameters to create a standard animation
    function genFx( type, includeWidth ) {
        var which,
            attrs = { height: type },
            i = 0;

        // if we include width, step value is 1 to do all cssExpand values,
        // if we don't include width, step value is 2 to skip over Left and Right
        includeWidth = includeWidth? 1 : 0;
        for( ; i < 4 ; i += 2 - includeWidth ) {
            which = cssExpand[ i ];
            attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
        }

        if ( includeWidth ) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

// Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
    }, function( name, props ) {
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return this.animate( props, speed, easing, callback );
        };
    });

    jQuery.speed = function( speed, easing, fn ) {
        var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
            complete: fn || !fn && easing ||
                jQuery.isFunction( speed ) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
        };

        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
                opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

        // normalize opt.queue - true/undefined/null -> "fx"
        if ( opt.queue == null || opt.queue === true ) {
            opt.queue = "fx";
        }

        // Queueing
        opt.old = opt.complete;

        opt.complete = function() {
            if ( jQuery.isFunction( opt.old ) ) {
                opt.old.call( this );
            }

            if ( opt.queue ) {
                jQuery.dequeue( this, opt.queue );
            }
        };

        return opt;
    };

    jQuery.easing = {
        linear: function( p ) {
            return p;
        },
        swing: function( p ) {
            return 0.5 - Math.cos( p*Math.PI ) / 2;
        }
    };

    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function() {
        var timer,
            timers = jQuery.timers,
            i = 0;

        fxNow = jQuery.now();

        for ( ; i < timers.length; i++ ) {
            timer = timers[ i ];
            // Checks the timer has not already been removed
            if ( !timer() && timers[ i ] === timer ) {
                timers.splice( i--, 1 );
            }
        }

        if ( !timers.length ) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };

    jQuery.fx.timer = function( timer ) {
        if ( timer() && jQuery.timers.push( timer ) ) {
            jQuery.fx.start();
        }
    };

    jQuery.fx.interval = 13;

    jQuery.fx.start = function() {
        if ( !timerId ) {
            timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
        }
    };

    jQuery.fx.stop = function() {
        clearInterval( timerId );
        timerId = null;
    };

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };

// Back Compat <1.8 extension point
    jQuery.fx.step = {};

    if ( jQuery.expr && jQuery.expr.filters ) {
        jQuery.expr.filters.animated = function( elem ) {
            return jQuery.grep(jQuery.timers, function( fn ) {
                return elem === fn.elem;
            }).length;
        };
    }
    jQuery.fn.offset = function( options ) {
        if ( arguments.length ) {
            return options === undefined ?
                this :
                this.each(function( i ) {
                    jQuery.offset.setOffset( this, options, i );
                });
        }

        var docElem, win,
            box = { top: 0, left: 0 },
            elem = this[ 0 ],
            doc = elem && elem.ownerDocument;

        if ( !doc ) {
            return;
        }

        docElem = doc.documentElement;

        // Make sure it's not a disconnected DOM node
        if ( !jQuery.contains( docElem, elem ) ) {
            return box;
        }

        // If we don't have gBCR, just use 0,0 rather than error
        // BlackBerry 5, iOS 3 (original iPhone)
        if ( typeof elem.getBoundingClientRect !== "undefined" ) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow( doc );
        return {
            top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
            left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
        };
    };

    jQuery.offset = {

        setOffset: function( elem, options, i ) {
            var position = jQuery.css( elem, "position" );

            // set position first, in-case top/left are set even on static elem
            if ( position === "static" ) {
                elem.style.position = "relative";
            }

            var curElem = jQuery( elem ),
                curOffset = curElem.offset(),
                curCSSTop = jQuery.css( elem, "top" ),
                curCSSLeft = jQuery.css( elem, "left" ),
                calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
                props = {}, curPosition = {}, curTop, curLeft;

            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
            if ( calculatePosition ) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat( curCSSTop ) || 0;
                curLeft = parseFloat( curCSSLeft ) || 0;
            }

            if ( jQuery.isFunction( options ) ) {
                options = options.call( elem, i, curOffset );
            }

            if ( options.top != null ) {
                props.top = ( options.top - curOffset.top ) + curTop;
            }
            if ( options.left != null ) {
                props.left = ( options.left - curOffset.left ) + curLeft;
            }

            if ( "using" in options ) {
                options.using.call( elem, props );
            } else {
                curElem.css( props );
            }
        }
    };


    jQuery.fn.extend({

        position: function() {
            if ( !this[ 0 ] ) {
                return;
            }

            var offsetParent, offset,
                parentOffset = { top: 0, left: 0 },
                elem = this[ 0 ];

            // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
            if ( jQuery.css( elem, "position" ) === "fixed" ) {
                // we assume that getBoundingClientRect is available when computed position is fixed
                offset = elem.getBoundingClientRect();
            } else {
                // Get *real* offsetParent
                offsetParent = this.offsetParent();

                // Get correct offsets
                offset = this.offset();
                if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
                    parentOffset = offsetParent.offset();
                }

                // Add offsetParent borders
                parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
                parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
            }

            // Subtract parent offsets and element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            return {
                top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
                left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
            };
        },

        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || document.documentElement;
                while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || document.documentElement;
            });
        }
    });


// Create scrollLeft and scrollTop methods
    jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
        var top = /Y/.test( prop );

        jQuery.fn[ method ] = function( val ) {
            return jQuery.access( this, function( elem, method, val ) {
                var win = getWindow( elem );

                if ( val === undefined ) {
                    return win ? (prop in win) ? win[ prop ] :
                        win.document.documentElement[ method ] :
                        elem[ method ];
                }

                if ( win ) {
                    win.scrollTo(
                        !top ? val : jQuery( win ).scrollLeft(),
                        top ? val : jQuery( win ).scrollTop()
                    );

                } else {
                    elem[ method ] = val;
                }
            }, method, val, arguments.length, null );
        };
    });

    function getWindow( elem ) {
        return jQuery.isWindow( elem ) ?
            elem :
                elem.nodeType === 9 ?
            elem.defaultView || elem.parentWindow :
            false;
    }
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
        jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
            // margin is only for outerHeight, outerWidth
            jQuery.fn[ funcName ] = function( margin, value ) {
                var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                    extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

                return jQuery.access( this, function( elem, type, value ) {
                    var doc;

                    if ( jQuery.isWindow( elem ) ) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement[ "client" + name ];
                    }

                    // Get document width or height
                    if ( elem.nodeType === 9 ) {
                        doc = elem.documentElement;

                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                        // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                        return Math.max(
                            elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                            elem.body[ "offset" + name ], doc[ "offset" + name ],
                            doc[ "client" + name ]
                        );
                    }

                    return value === undefined ?
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css( elem, type, extra ) :

                        // Set width or height on the element
                        jQuery.style( elem, type, value, extra );
                }, type, chainable ? margin : undefined, chainable, null );
            };
        });
    });
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
    window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
    if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
        define( "jquery", [], function () { return jQuery; } );
    }

})( window );
/*

 Copyright (C) 2011 by Yehuda Katz

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.

 */

// lib/handlebars/browser-prefix.js
var Handlebars = {};

(function(Handlebars, undefined) {
    ;
// lib/handlebars/base.js

    Handlebars.VERSION = "1.0.0-rc.4";
    Handlebars.COMPILER_REVISION = 3;

    Handlebars.REVISION_CHANGES = {
        1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
        2: '== 1.0.0-rc.3',
        3: '>= 1.0.0-rc.4'
    };

    Handlebars.helpers  = {};
    Handlebars.partials = {};

    var toString = Object.prototype.toString,
        functionType = '[object Function]',
        objectType = '[object Object]';

    Handlebars.registerHelper = function(name, fn, inverse) {
        if (toString.call(name) === objectType) {
            if (inverse || fn) { throw new Handlebars.Exception('Arg not supported with multiple helpers'); }
            Handlebars.Utils.extend(this.helpers, name);
        } else {
            if (inverse) { fn.not = inverse; }
            this.helpers[name] = fn;
        }
    };

    Handlebars.registerPartial = function(name, str) {
        if (toString.call(name) === objectType) {
            Handlebars.Utils.extend(this.partials,  name);
        } else {
            this.partials[name] = str;
        }
    };

    Handlebars.registerHelper('helperMissing', function(arg) {
        if(arguments.length === 2) {
            return undefined;
        } else {
            throw new Error("Could not find property '" + arg + "'");
        }
    });

    Handlebars.registerHelper('blockHelperMissing', function(context, options) {
        var inverse = options.inverse || function() {}, fn = options.fn;

        var type = toString.call(context);

        if(type === functionType) { context = context.call(this); }

        if(context === true) {
            return fn(this);
        } else if(context === false || context == null) {
            return inverse(this);
        } else if(type === "[object Array]") {
            if(context.length > 0) {
                return Handlebars.helpers.each(context, options);
            } else {
                return inverse(this);
            }
        } else {
            return fn(context);
        }
    });

    Handlebars.K = function() {};

    Handlebars.createFrame = Object.create || function(object) {
        Handlebars.K.prototype = object;
        var obj = new Handlebars.K();
        Handlebars.K.prototype = null;
        return obj;
    };

    Handlebars.logger = {
        DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,

        methodMap: {0: 'debug', 1: 'info', 2: 'warn', 3: 'error'},

        // can be overridden in the host environment
        log: function(level, obj) {
            if (Handlebars.logger.level <= level) {
                var method = Handlebars.logger.methodMap[level];
                if (typeof console !== 'undefined' && console[method]) {
                    console[method].call(console, obj);
                }
            }
        }
    };

    Handlebars.log = function(level, obj) { Handlebars.logger.log(level, obj); };

    Handlebars.registerHelper('each', function(context, options) {
        var fn = options.fn, inverse = options.inverse;
        var i = 0, ret = "", data;

        if (options.data) {
            data = Handlebars.createFrame(options.data);
        }

        if(context && typeof context === 'object') {
            if(context instanceof Array){
                for(var j = context.length; i<j; i++) {
                    if (data) { data.index = i; }
                    ret = ret + fn(context[i], { data: data });
                }
            } else {
                for(var key in context) {
                    if(context.hasOwnProperty(key)) {
                        if(data) { data.key = key; }
                        ret = ret + fn(context[key], {data: data});
                        i++;
                    }
                }
            }
        }

        if(i === 0){
            ret = inverse(this);
        }

        return ret;
    });

    Handlebars.registerHelper('if', function(context, options) {
        var type = toString.call(context);
        if(type === functionType) { context = context.call(this); }

        if(!context || Handlebars.Utils.isEmpty(context)) {
            return options.inverse(this);
        } else {
            return options.fn(this);
        }
    });

    Handlebars.registerHelper('unless', function(context, options) {
        return Handlebars.helpers['if'].call(this, context, {fn: options.inverse, inverse: options.fn});
    });

    Handlebars.registerHelper('with', function(context, options) {
        if (!Handlebars.Utils.isEmpty(context)) return options.fn(context);
    });

    Handlebars.registerHelper('log', function(context, options) {
        var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
        Handlebars.log(level, context);
    });
    ;
// lib/handlebars/compiler/parser.js
    /* Jison generated parser */
    var handlebars = (function(){
        var parser = {trace: function trace() { },
            yy: {},
            symbols_: {"error":2,"root":3,"program":4,"EOF":5,"simpleInverse":6,"statements":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"OPEN_PARTIAL":24,"partialName":25,"params":26,"hash":27,"DATA":28,"param":29,"STRING":30,"INTEGER":31,"BOOLEAN":32,"hashSegments":33,"hashSegment":34,"ID":35,"EQUALS":36,"PARTIAL_NAME":37,"pathSegments":38,"SEP":39,"$accept":0,"$end":1},
            terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"OPEN_PARTIAL",28:"DATA",30:"STRING",31:"INTEGER",32:"BOOLEAN",35:"ID",36:"EQUALS",37:"PARTIAL_NAME",39:"SEP"},
            productions_: [0,[3,2],[4,2],[4,3],[4,2],[4,1],[4,1],[4,0],[7,1],[7,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[6,2],[17,3],[17,2],[17,2],[17,1],[17,1],[26,2],[26,1],[29,1],[29,1],[29,1],[29,1],[29,1],[27,1],[33,2],[33,1],[34,3],[34,3],[34,3],[34,3],[34,3],[25,1],[21,1],[38,3],[38,1]],
            performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

                var $0 = $$.length - 1;
                switch (yystate) {
                    case 1: return $$[$0-1];
                        break;
                    case 2: this.$ = new yy.ProgramNode([], $$[$0]);
                        break;
                    case 3: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]);
                        break;
                    case 4: this.$ = new yy.ProgramNode($$[$0-1], []);
                        break;
                    case 5: this.$ = new yy.ProgramNode($$[$0]);
                        break;
                    case 6: this.$ = new yy.ProgramNode([], []);
                        break;
                    case 7: this.$ = new yy.ProgramNode([]);
                        break;
                    case 8: this.$ = [$$[$0]];
                        break;
                    case 9: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                        break;
                    case 10: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]);
                        break;
                    case 11: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]);
                        break;
                    case 12: this.$ = $$[$0];
                        break;
                    case 13: this.$ = $$[$0];
                        break;
                    case 14: this.$ = new yy.ContentNode($$[$0]);
                        break;
                    case 15: this.$ = new yy.CommentNode($$[$0]);
                        break;
                    case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
                        break;
                    case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
                        break;
                    case 18: this.$ = $$[$0-1];
                        break;
                    case 19: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
                        break;
                    case 20: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true);
                        break;
                    case 21: this.$ = new yy.PartialNode($$[$0-1]);
                        break;
                    case 22: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]);
                        break;
                    case 23:
                        break;
                    case 24: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]];
                        break;
                    case 25: this.$ = [[$$[$0-1]].concat($$[$0]), null];
                        break;
                    case 26: this.$ = [[$$[$0-1]], $$[$0]];
                        break;
                    case 27: this.$ = [[$$[$0]], null];
                        break;
                    case 28: this.$ = [[new yy.DataNode($$[$0])], null];
                        break;
                    case 29: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                        break;
                    case 30: this.$ = [$$[$0]];
                        break;
                    case 31: this.$ = $$[$0];
                        break;
                    case 32: this.$ = new yy.StringNode($$[$0]);
                        break;
                    case 33: this.$ = new yy.IntegerNode($$[$0]);
                        break;
                    case 34: this.$ = new yy.BooleanNode($$[$0]);
                        break;
                    case 35: this.$ = new yy.DataNode($$[$0]);
                        break;
                    case 36: this.$ = new yy.HashNode($$[$0]);
                        break;
                    case 37: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                        break;
                    case 38: this.$ = [$$[$0]];
                        break;
                    case 39: this.$ = [$$[$0-2], $$[$0]];
                        break;
                    case 40: this.$ = [$$[$0-2], new yy.StringNode($$[$0])];
                        break;
                    case 41: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])];
                        break;
                    case 42: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])];
                        break;
                    case 43: this.$ = [$$[$0-2], new yy.DataNode($$[$0])];
                        break;
                    case 44: this.$ = new yy.PartialNameNode($$[$0]);
                        break;
                    case 45: this.$ = new yy.IdNode($$[$0]);
                        break;
                    case 46: $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
                        break;
                    case 47: this.$ = [$$[$0]];
                        break;
                }
            },
            table: [{3:1,4:2,5:[2,7],6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],22:[1,14],23:[1,15],24:[1,16]},{1:[3]},{5:[1,17]},{5:[2,6],7:18,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,6],22:[1,14],23:[1,15],24:[1,16]},{5:[2,5],6:20,8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,5],22:[1,14],23:[1,15],24:[1,16]},{17:23,18:[1,22],21:24,28:[1,25],35:[1,27],38:26},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8]},{4:28,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],24:[1,16]},{4:29,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],24:[1,16]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15]},{17:30,21:24,28:[1,25],35:[1,27],38:26},{17:31,21:24,28:[1,25],35:[1,27],38:26},{17:32,21:24,28:[1,25],35:[1,27],38:26},{25:33,37:[1,34]},{1:[2,1]},{5:[2,2],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,2],22:[1,14],23:[1,15],24:[1,16]},{17:23,21:24,28:[1,25],35:[1,27],38:26},{5:[2,4],7:35,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,4],22:[1,14],23:[1,15],24:[1,16]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9]},{5:[2,23],14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],24:[2,23]},{18:[1,36]},{18:[2,27],21:41,26:37,27:38,28:[1,45],29:39,30:[1,42],31:[1,43],32:[1,44],33:40,34:46,35:[1,47],38:26},{18:[2,28]},{18:[2,45],28:[2,45],30:[2,45],31:[2,45],32:[2,45],35:[2,45],39:[1,48]},{18:[2,47],28:[2,47],30:[2,47],31:[2,47],32:[2,47],35:[2,47],39:[2,47]},{10:49,20:[1,50]},{10:51,20:[1,50]},{18:[1,52]},{18:[1,53]},{18:[1,54]},{18:[1,55],21:56,35:[1,27],38:26},{18:[2,44],35:[2,44]},{5:[2,3],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,3],22:[1,14],23:[1,15],24:[1,16]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17]},{18:[2,25],21:41,27:57,28:[1,45],29:58,30:[1,42],31:[1,43],32:[1,44],33:40,34:46,35:[1,47],38:26},{18:[2,26]},{18:[2,30],28:[2,30],30:[2,30],31:[2,30],32:[2,30],35:[2,30]},{18:[2,36],34:59,35:[1,60]},{18:[2,31],28:[2,31],30:[2,31],31:[2,31],32:[2,31],35:[2,31]},{18:[2,32],28:[2,32],30:[2,32],31:[2,32],32:[2,32],35:[2,32]},{18:[2,33],28:[2,33],30:[2,33],31:[2,33],32:[2,33],35:[2,33]},{18:[2,34],28:[2,34],30:[2,34],31:[2,34],32:[2,34],35:[2,34]},{18:[2,35],28:[2,35],30:[2,35],31:[2,35],32:[2,35],35:[2,35]},{18:[2,38],35:[2,38]},{18:[2,47],28:[2,47],30:[2,47],31:[2,47],32:[2,47],35:[2,47],36:[1,61],39:[2,47]},{35:[1,62]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10]},{21:63,35:[1,27],38:26},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11]},{14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],24:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],24:[2,21]},{18:[1,64]},{18:[2,24]},{18:[2,29],28:[2,29],30:[2,29],31:[2,29],32:[2,29],35:[2,29]},{18:[2,37],35:[2,37]},{36:[1,61]},{21:65,28:[1,69],30:[1,66],31:[1,67],32:[1,68],35:[1,27],38:26},{18:[2,46],28:[2,46],30:[2,46],31:[2,46],32:[2,46],35:[2,46],39:[2,46]},{18:[1,70]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],24:[2,22]},{18:[2,39],35:[2,39]},{18:[2,40],35:[2,40]},{18:[2,41],35:[2,41]},{18:[2,42],35:[2,42]},{18:[2,43],35:[2,43]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18]}],
            defaultActions: {17:[2,1],25:[2,28],38:[2,26],57:[2,24]},
            parseError: function parseError(str, hash) {
                throw new Error(str);
            },
            parse: function parse(input) {
                var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
                this.lexer.setInput(input);
                this.lexer.yy = this.yy;
                this.yy.lexer = this.lexer;
                this.yy.parser = this;
                if (typeof this.lexer.yylloc == "undefined")
                    this.lexer.yylloc = {};
                var yyloc = this.lexer.yylloc;
                lstack.push(yyloc);
                var ranges = this.lexer.options && this.lexer.options.ranges;
                if (typeof this.yy.parseError === "function")
                    this.parseError = this.yy.parseError;
                function popStack(n) {
                    stack.length = stack.length - 2 * n;
                    vstack.length = vstack.length - n;
                    lstack.length = lstack.length - n;
                }
                function lex() {
                    var token;
                    token = self.lexer.lex() || 1;
                    if (typeof token !== "number") {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                }
                var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
                while (true) {
                    state = stack[stack.length - 1];
                    if (this.defaultActions[state]) {
                        action = this.defaultActions[state];
                    } else {
                        if (symbol === null || typeof symbol == "undefined") {
                            symbol = lex();
                        }
                        action = table[state] && table[state][symbol];
                    }
                    if (typeof action === "undefined" || !action.length || !action[0]) {
                        var errStr = "";
                        if (!recovering) {
                            expected = [];
                            for (p in table[state])
                                if (this.terminals_[p] && p > 2) {
                                    expected.push("'" + this.terminals_[p] + "'");
                                }
                            if (this.lexer.showPosition) {
                                errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                            } else {
                                errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                            }
                            this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
                        }
                    }
                    if (action[0] instanceof Array && action.length > 1) {
                        throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                    }
                    switch (action[0]) {
                        case 1:
                            stack.push(symbol);
                            vstack.push(this.lexer.yytext);
                            lstack.push(this.lexer.yylloc);
                            stack.push(action[1]);
                            symbol = null;
                            if (!preErrorSymbol) {
                                yyleng = this.lexer.yyleng;
                                yytext = this.lexer.yytext;
                                yylineno = this.lexer.yylineno;
                                yyloc = this.lexer.yylloc;
                                if (recovering > 0)
                                    recovering--;
                            } else {
                                symbol = preErrorSymbol;
                                preErrorSymbol = null;
                            }
                            break;
                        case 2:
                            len = this.productions_[action[1]][1];
                            yyval.$ = vstack[vstack.length - len];
                            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
                            if (ranges) {
                                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                            }
                            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                            if (typeof r !== "undefined") {
                                return r;
                            }
                            if (len) {
                                stack = stack.slice(0, -1 * len * 2);
                                vstack = vstack.slice(0, -1 * len);
                                lstack = lstack.slice(0, -1 * len);
                            }
                            stack.push(this.productions_[action[1]][0]);
                            vstack.push(yyval.$);
                            lstack.push(yyval._$);
                            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                            stack.push(newState);
                            break;
                        case 3:
                            return true;
                    }
                }
                return true;
            }
        };
        /* Jison generated lexer */
        var lexer = (function(){
            var lexer = ({EOF:1,
                parseError:function parseError(str, hash) {
                    if (this.yy.parser) {
                        this.yy.parser.parseError(str, hash);
                    } else {
                        throw new Error(str);
                    }
                },
                setInput:function (input) {
                    this._input = input;
                    this._more = this._less = this.done = false;
                    this.yylineno = this.yyleng = 0;
                    this.yytext = this.matched = this.match = '';
                    this.conditionStack = ['INITIAL'];
                    this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
                    if (this.options.ranges) this.yylloc.range = [0,0];
                    this.offset = 0;
                    return this;
                },
                input:function () {
                    var ch = this._input[0];
                    this.yytext += ch;
                    this.yyleng++;
                    this.offset++;
                    this.match += ch;
                    this.matched += ch;
                    var lines = ch.match(/(?:\r\n?|\n).*/g);
                    if (lines) {
                        this.yylineno++;
                        this.yylloc.last_line++;
                    } else {
                        this.yylloc.last_column++;
                    }
                    if (this.options.ranges) this.yylloc.range[1]++;

                    this._input = this._input.slice(1);
                    return ch;
                },
                unput:function (ch) {
                    var len = ch.length;
                    var lines = ch.split(/(?:\r\n?|\n)/g);

                    this._input = ch + this._input;
                    this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
                    //this.yyleng -= len;
                    this.offset -= len;
                    var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                    this.match = this.match.substr(0, this.match.length-1);
                    this.matched = this.matched.substr(0, this.matched.length-1);

                    if (lines.length-1) this.yylineno -= lines.length-1;
                    var r = this.yylloc.range;

                    this.yylloc = {first_line: this.yylloc.first_line,
                        last_line: this.yylineno+1,
                        first_column: this.yylloc.first_column,
                        last_column: lines ?
                            (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
                            this.yylloc.first_column - len
                    };

                    if (this.options.ranges) {
                        this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                    }
                    return this;
                },
                more:function () {
                    this._more = true;
                    return this;
                },
                less:function (n) {
                    this.unput(this.match.slice(n));
                },
                pastInput:function () {
                    var past = this.matched.substr(0, this.matched.length - this.match.length);
                    return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
                },
                upcomingInput:function () {
                    var next = this.match;
                    if (next.length < 20) {
                        next += this._input.substr(0, 20-next.length);
                    }
                    return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
                },
                showPosition:function () {
                    var pre = this.pastInput();
                    var c = new Array(pre.length + 1).join("-");
                    return pre + this.upcomingInput() + "\n" + c+"^";
                },
                next:function () {
                    if (this.done) {
                        return this.EOF;
                    }
                    if (!this._input) this.done = true;

                    var token,
                        match,
                        tempMatch,
                        index,
                        col,
                        lines;
                    if (!this._more) {
                        this.yytext = '';
                        this.match = '';
                    }
                    var rules = this._currentRules();
                    for (var i=0;i < rules.length; i++) {
                        tempMatch = this._input.match(this.rules[rules[i]]);
                        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                            match = tempMatch;
                            index = i;
                            if (!this.options.flex) break;
                        }
                    }
                    if (match) {
                        lines = match[0].match(/(?:\r\n?|\n).*/g);
                        if (lines) this.yylineno += lines.length;
                        this.yylloc = {first_line: this.yylloc.last_line,
                            last_line: this.yylineno+1,
                            first_column: this.yylloc.last_column,
                            last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
                        this.yytext += match[0];
                        this.match += match[0];
                        this.matches = match;
                        this.yyleng = this.yytext.length;
                        if (this.options.ranges) {
                            this.yylloc.range = [this.offset, this.offset += this.yyleng];
                        }
                        this._more = false;
                        this._input = this._input.slice(match[0].length);
                        this.matched += match[0];
                        token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
                        if (this.done && this._input) this.done = false;
                        if (token) return token;
                        else return;
                    }
                    if (this._input === "") {
                        return this.EOF;
                    } else {
                        return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                            {text: "", token: null, line: this.yylineno});
                    }
                },
                lex:function lex() {
                    var r = this.next();
                    if (typeof r !== 'undefined') {
                        return r;
                    } else {
                        return this.lex();
                    }
                },
                begin:function begin(condition) {
                    this.conditionStack.push(condition);
                },
                popState:function popState() {
                    return this.conditionStack.pop();
                },
                _currentRules:function _currentRules() {
                    return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
                },
                topState:function () {
                    return this.conditionStack[this.conditionStack.length-2];
                },
                pushState:function begin(condition) {
                    this.begin(condition);
                }});
            lexer.options = {};
            lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

                var YYSTATE=YY_START
                switch($avoiding_name_collisions) {
                    case 0: yy_.yytext = "\\"; return 14;
                        break;
                    case 1:
                        if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
                        if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1), this.begin("emu");
                        if(yy_.yytext) return 14;

                        break;
                    case 2: return 14;
                        break;
                    case 3:
                        if(yy_.yytext.slice(-1) !== "\\") this.popState();
                        if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1);
                        return 14;

                        break;
                    case 4: yy_.yytext = yy_.yytext.substr(0, yy_.yyleng-4); this.popState(); return 15;
                        break;
                    case 5: this.begin("par"); return 24;
                        break;
                    case 6: return 16;
                        break;
                    case 7: return 20;
                        break;
                    case 8: return 19;
                        break;
                    case 9: return 19;
                        break;
                    case 10: return 23;
                        break;
                    case 11: return 23;
                        break;
                    case 12: this.popState(); this.begin('com');
                        break;
                    case 13: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.popState(); return 15;
                        break;
                    case 14: return 22;
                        break;
                    case 15: return 36;
                        break;
                    case 16: return 35;
                        break;
                    case 17: return 35;
                        break;
                    case 18: return 39;
                        break;
                    case 19: /*ignore whitespace*/
                        break;
                    case 20: this.popState(); return 18;
                        break;
                    case 21: this.popState(); return 18;
                        break;
                    case 22: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 30;
                        break;
                    case 23: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\'/g,"'"); return 30;
                        break;
                    case 24: yy_.yytext = yy_.yytext.substr(1); return 28;
                        break;
                    case 25: return 32;
                        break;
                    case 26: return 32;
                        break;
                    case 27: return 31;
                        break;
                    case 28: return 35;
                        break;
                    case 29: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 35;
                        break;
                    case 30: return 'INVALID';
                        break;
                    case 31: /*ignore whitespace*/
                        break;
                    case 32: this.popState(); return 37;
                        break;
                    case 33: return 5;
                        break;
                }
            };
            lexer.rules = [/^(?:\\\\(?=(\{\{)))/,/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[}/ ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@[a-zA-Z]+)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:-?[0-9]+(?=[}\s]))/,/^(?:[a-zA-Z0-9_$:\-]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:\s+)/,/^(?:[a-zA-Z0-9_$\-\/]+)/,/^(?:$)/];
            lexer.conditions = {"mu":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33],"inclusive":false},"emu":{"rules":[3],"inclusive":false},"com":{"rules":[4],"inclusive":false},"par":{"rules":[31,32],"inclusive":false},"INITIAL":{"rules":[0,1,2,33],"inclusive":true}};
            return lexer;})()
        parser.lexer = lexer;
        function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
        return new Parser;
    })();;
// lib/handlebars/compiler/base.js

    Handlebars.Parser = handlebars;

    Handlebars.parse = function(input) {

        // Just return if an already-compile AST was passed in.
        if(input.constructor === Handlebars.AST.ProgramNode) { return input; }

        Handlebars.Parser.yy = Handlebars.AST;
        return Handlebars.Parser.parse(input);
    };
    ;
// lib/handlebars/compiler/ast.js
    Handlebars.AST = {};

    Handlebars.AST.ProgramNode = function(statements, inverse) {
        this.type = "program";
        this.statements = statements;
        if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
    };

    Handlebars.AST.MustacheNode = function(rawParams, hash, unescaped) {
        this.type = "mustache";
        this.escaped = !unescaped;
        this.hash = hash;

        var id = this.id = rawParams[0];
        var params = this.params = rawParams.slice(1);

        // a mustache is an eligible helper if:
        // * its id is simple (a single part, not `this` or `..`)
        var eligibleHelper = this.eligibleHelper = id.isSimple;

        // a mustache is definitely a helper if:
        // * it is an eligible helper, and
        // * it has at least one parameter or hash segment
        this.isHelper = eligibleHelper && (params.length || hash);

        // if a mustache is an eligible helper but not a definite
        // helper, it is ambiguous, and will be resolved in a later
        // pass or at runtime.
    };

    Handlebars.AST.PartialNode = function(partialName, context) {
        this.type         = "partial";
        this.partialName  = partialName;
        this.context      = context;
    };

    Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
        var verifyMatch = function(open, close) {
            if(open.original !== close.original) {
                throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
            }
        };

        verifyMatch(mustache.id, close);
        this.type = "block";
        this.mustache = mustache;
        this.program  = program;
        this.inverse  = inverse;

        if (this.inverse && !this.program) {
            this.isInverse = true;
        }
    };

    Handlebars.AST.ContentNode = function(string) {
        this.type = "content";
        this.string = string;
    };

    Handlebars.AST.HashNode = function(pairs) {
        this.type = "hash";
        this.pairs = pairs;
    };

    Handlebars.AST.IdNode = function(parts) {
        this.type = "ID";
        this.original = parts.join(".");

        var dig = [], depth = 0;

        for(var i=0,l=parts.length; i<l; i++) {
            var part = parts[i];

            if (part === ".." || part === "." || part === "this") {
                if (dig.length > 0) { throw new Handlebars.Exception("Invalid path: " + this.original); }
                else if (part === "..") { depth++; }
                else { this.isScoped = true; }
            }
            else { dig.push(part); }
        }

        this.parts    = dig;
        this.string   = dig.join('.');
        this.depth    = depth;

        // an ID is simple if it only has one part, and that part is not
        // `..` or `this`.
        this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

        this.stringModeValue = this.string;
    };

    Handlebars.AST.PartialNameNode = function(name) {
        this.type = "PARTIAL_NAME";
        this.name = name;
    };

    Handlebars.AST.DataNode = function(id) {
        this.type = "DATA";
        this.id = id;
    };

    Handlebars.AST.StringNode = function(string) {
        this.type = "STRING";
        this.string = string;
        this.stringModeValue = string;
    };

    Handlebars.AST.IntegerNode = function(integer) {
        this.type = "INTEGER";
        this.integer = integer;
        this.stringModeValue = Number(integer);
    };

    Handlebars.AST.BooleanNode = function(bool) {
        this.type = "BOOLEAN";
        this.bool = bool;
        this.stringModeValue = bool === "true";
    };

    Handlebars.AST.CommentNode = function(comment) {
        this.type = "comment";
        this.comment = comment;
    };
    ;
// lib/handlebars/utils.js

    var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

    Handlebars.Exception = function(message) {
        var tmp = Error.prototype.constructor.apply(this, arguments);

        // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
        for (var idx = 0; idx < errorProps.length; idx++) {
            this[errorProps[idx]] = tmp[errorProps[idx]];
        }
    };
    Handlebars.Exception.prototype = new Error();

// Build out our basic SafeString type
    Handlebars.SafeString = function(string) {
        this.string = string;
    };
    Handlebars.SafeString.prototype.toString = function() {
        return this.string.toString();
    };

    var escape = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
    };

    var badChars = /[&<>"'`]/g;
    var possible = /[&<>"'`]/;

    var escapeChar = function(chr) {
        return escape[chr] || "&amp;";
    };

    Handlebars.Utils = {
        extend: function(obj, value) {
            for(var key in value) {
                if(value.hasOwnProperty(key)) {
                    obj[key] = value[key];
                }
            }
        },

        escapeExpression: function(string) {
            // don't escape SafeStrings, since they're already safe
            if (string instanceof Handlebars.SafeString) {
                return string.toString();
            } else if (string == null || string === false) {
                return "";
            }

            // Force a string conversion as this will be done by the append regardless and
            // the regex test will do this transparently behind the scenes, causing issues if
            // an object's to string has escaped characters in it.
            string = string.toString();

            if(!possible.test(string)) { return string; }
            return string.replace(badChars, escapeChar);
        },

        isEmpty: function(value) {
            if (!value && value !== 0) {
                return true;
            } else if(toString.call(value) === "[object Array]" && value.length === 0) {
                return true;
            } else {
                return false;
            }
        }
    };
    ;
// lib/handlebars/compiler/compiler.js

    /*jshint eqnull:true*/
    var Compiler = Handlebars.Compiler = function() {};
    var JavaScriptCompiler = Handlebars.JavaScriptCompiler = function() {};

// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

    Compiler.prototype = {
        compiler: Compiler,

        disassemble: function() {
            var opcodes = this.opcodes, opcode, out = [], params, param;

            for (var i=0, l=opcodes.length; i<l; i++) {
                opcode = opcodes[i];

                if (opcode.opcode === 'DECLARE') {
                    out.push("DECLARE " + opcode.name + "=" + opcode.value);
                } else {
                    params = [];
                    for (var j=0; j<opcode.args.length; j++) {
                        param = opcode.args[j];
                        if (typeof param === "string") {
                            param = "\"" + param.replace("\n", "\\n") + "\"";
                        }
                        params.push(param);
                    }
                    out.push(opcode.opcode + " " + params.join(" "));
                }
            }

            return out.join("\n");
        },
        equals: function(other) {
            var len = this.opcodes.length;
            if (other.opcodes.length !== len) {
                return false;
            }

            for (var i = 0; i < len; i++) {
                var opcode = this.opcodes[i],
                    otherOpcode = other.opcodes[i];
                if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {
                    return false;
                }
                for (var j = 0; j < opcode.args.length; j++) {
                    if (opcode.args[j] !== otherOpcode.args[j]) {
                        return false;
                    }
                }
            }

            len = this.children.length;
            if (other.children.length !== len) {
                return false;
            }
            for (i = 0; i < len; i++) {
                if (!this.children[i].equals(other.children[i])) {
                    return false;
                }
            }

            return true;
        },

        guid: 0,

        compile: function(program, options) {
            this.children = [];
            this.depths = {list: []};
            this.options = options;

            // These changes will propagate to the other compiler components
            var knownHelpers = this.options.knownHelpers;
            this.options.knownHelpers = {
                'helperMissing': true,
                'blockHelperMissing': true,
                'each': true,
                'if': true,
                'unless': true,
                'with': true,
                'log': true
            };
            if (knownHelpers) {
                for (var name in knownHelpers) {
                    this.options.knownHelpers[name] = knownHelpers[name];
                }
            }

            return this.program(program);
        },

        accept: function(node) {
            return this[node.type](node);
        },

        program: function(program) {
            var statements = program.statements, statement;
            this.opcodes = [];

            for(var i=0, l=statements.length; i<l; i++) {
                statement = statements[i];
                this[statement.type](statement);
            }
            this.isSimple = l === 1;

            this.depths.list = this.depths.list.sort(function(a, b) {
                return a - b;
            });

            return this;
        },

        compileProgram: function(program) {
            var result = new this.compiler().compile(program, this.options);
            var guid = this.guid++, depth;

            this.usePartial = this.usePartial || result.usePartial;

            this.children[guid] = result;

            for(var i=0, l=result.depths.list.length; i<l; i++) {
                depth = result.depths.list[i];

                if(depth < 2) { continue; }
                else { this.addDepth(depth - 1); }
            }

            return guid;
        },

        block: function(block) {
            var mustache = block.mustache,
                program = block.program,
                inverse = block.inverse;

            if (program) {
                program = this.compileProgram(program);
            }

            if (inverse) {
                inverse = this.compileProgram(inverse);
            }

            var type = this.classifyMustache(mustache);

            if (type === "helper") {
                this.helperMustache(mustache, program, inverse);
            } else if (type === "simple") {
                this.simpleMustache(mustache);

                // now that the simple mustache is resolved, we need to
                // evaluate it by executing `blockHelperMissing`
                this.opcode('pushProgram', program);
                this.opcode('pushProgram', inverse);
                this.opcode('emptyHash');
                this.opcode('blockValue');
            } else {
                this.ambiguousMustache(mustache, program, inverse);

                // now that the simple mustache is resolved, we need to
                // evaluate it by executing `blockHelperMissing`
                this.opcode('pushProgram', program);
                this.opcode('pushProgram', inverse);
                this.opcode('emptyHash');
                this.opcode('ambiguousBlockValue');
            }

            this.opcode('append');
        },

        hash: function(hash) {
            var pairs = hash.pairs, pair, val;

            this.opcode('pushHash');

            for(var i=0, l=pairs.length; i<l; i++) {
                pair = pairs[i];
                val  = pair[1];

                if (this.options.stringParams) {
                    if(val.depth) {
                        this.addDepth(val.depth);
                    }
                    this.opcode('getContext', val.depth || 0);
                    this.opcode('pushStringParam', val.stringModeValue, val.type);
                } else {
                    this.accept(val);
                }

                this.opcode('assignToHash', pair[0]);
            }
            this.opcode('popHash');
        },

        partial: function(partial) {
            var partialName = partial.partialName;
            this.usePartial = true;

            if(partial.context) {
                this.ID(partial.context);
            } else {
                this.opcode('push', 'depth0');
            }

            this.opcode('invokePartial', partialName.name);
            this.opcode('append');
        },

        content: function(content) {
            this.opcode('appendContent', content.string);
        },

        mustache: function(mustache) {
            var options = this.options;
            var type = this.classifyMustache(mustache);

            if (type === "simple") {
                this.simpleMustache(mustache);
            } else if (type === "helper") {
                this.helperMustache(mustache);
            } else {
                this.ambiguousMustache(mustache);
            }

            if(mustache.escaped && !options.noEscape) {
                this.opcode('appendEscaped');
            } else {
                this.opcode('append');
            }
        },

        ambiguousMustache: function(mustache, program, inverse) {
            var id = mustache.id,
                name = id.parts[0],
                isBlock = program != null || inverse != null;

            this.opcode('getContext', id.depth);

            this.opcode('pushProgram', program);
            this.opcode('pushProgram', inverse);

            this.opcode('invokeAmbiguous', name, isBlock);
        },

        simpleMustache: function(mustache) {
            var id = mustache.id;

            if (id.type === 'DATA') {
                this.DATA(id);
            } else if (id.parts.length) {
                this.ID(id);
            } else {
                // Simplified ID for `this`
                this.addDepth(id.depth);
                this.opcode('getContext', id.depth);
                this.opcode('pushContext');
            }

            this.opcode('resolvePossibleLambda');
        },

        helperMustache: function(mustache, program, inverse) {
            var params = this.setupFullMustacheParams(mustache, program, inverse),
                name = mustache.id.parts[0];

            if (this.options.knownHelpers[name]) {
                this.opcode('invokeKnownHelper', params.length, name);
            } else if (this.options.knownHelpersOnly) {
                throw new Error("You specified knownHelpersOnly, but used the unknown helper " + name);
            } else {
                this.opcode('invokeHelper', params.length, name);
            }
        },

        ID: function(id) {
            this.addDepth(id.depth);
            this.opcode('getContext', id.depth);

            var name = id.parts[0];
            if (!name) {
                this.opcode('pushContext');
            } else {
                this.opcode('lookupOnContext', id.parts[0]);
            }

            for(var i=1, l=id.parts.length; i<l; i++) {
                this.opcode('lookup', id.parts[i]);
            }
        },

        DATA: function(data) {
            this.options.data = true;
            this.opcode('lookupData', data.id);
        },

        STRING: function(string) {
            this.opcode('pushString', string.string);
        },

        INTEGER: function(integer) {
            this.opcode('pushLiteral', integer.integer);
        },

        BOOLEAN: function(bool) {
            this.opcode('pushLiteral', bool.bool);
        },

        comment: function() {},

        // HELPERS
        opcode: function(name) {
            this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
        },

        declare: function(name, value) {
            this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
        },

        addDepth: function(depth) {
            if(isNaN(depth)) { throw new Error("EWOT"); }
            if(depth === 0) { return; }

            if(!this.depths[depth]) {
                this.depths[depth] = true;
                this.depths.list.push(depth);
            }
        },

        classifyMustache: function(mustache) {
            var isHelper   = mustache.isHelper;
            var isEligible = mustache.eligibleHelper;
            var options    = this.options;

            // if ambiguous, we can possibly resolve the ambiguity now
            if (isEligible && !isHelper) {
                var name = mustache.id.parts[0];

                if (options.knownHelpers[name]) {
                    isHelper = true;
                } else if (options.knownHelpersOnly) {
                    isEligible = false;
                }
            }

            if (isHelper) { return "helper"; }
            else if (isEligible) { return "ambiguous"; }
            else { return "simple"; }
        },

        pushParams: function(params) {
            var i = params.length, param;

            while(i--) {
                param = params[i];

                if(this.options.stringParams) {
                    if(param.depth) {
                        this.addDepth(param.depth);
                    }

                    this.opcode('getContext', param.depth || 0);
                    this.opcode('pushStringParam', param.stringModeValue, param.type);
                } else {
                    this[param.type](param);
                }
            }
        },

        setupMustacheParams: function(mustache) {
            var params = mustache.params;
            this.pushParams(params);

            if(mustache.hash) {
                this.hash(mustache.hash);
            } else {
                this.opcode('emptyHash');
            }

            return params;
        },

        // this will replace setupMustacheParams when we're done
        setupFullMustacheParams: function(mustache, program, inverse) {
            var params = mustache.params;
            this.pushParams(params);

            this.opcode('pushProgram', program);
            this.opcode('pushProgram', inverse);

            if(mustache.hash) {
                this.hash(mustache.hash);
            } else {
                this.opcode('emptyHash');
            }

            return params;
        }
    };

    var Literal = function(value) {
        this.value = value;
    };

    JavaScriptCompiler.prototype = {
        // PUBLIC API: You can override these methods in a subclass to provide
        // alternative compiled forms for name lookup and buffering semantics
        nameLookup: function(parent, name /* , type*/) {
            if (/^[0-9]+$/.test(name)) {
                return parent + "[" + name + "]";
            } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
                return parent + "." + name;
            }
            else {
                return parent + "['" + name + "']";
            }
        },

        appendToBuffer: function(string) {
            if (this.environment.isSimple) {
                return "return " + string + ";";
            } else {
                return {
                    appendToBuffer: true,
                    content: string,
                    toString: function() { return "buffer += " + string + ";"; }
                };
            }
        },

        initializeBuffer: function() {
            return this.quotedString("");
        },

        namespace: "Handlebars",
        // END PUBLIC API

        compile: function(environment, options, context, asObject) {
            this.environment = environment;
            this.options = options || {};

            Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");

            this.name = this.environment.name;
            this.isChild = !!context;
            this.context = context || {
                programs: [],
                environments: [],
                aliases: { }
            };

            this.preamble();

            this.stackSlot = 0;
            this.stackVars = [];
            this.registers = { list: [] };
            this.compileStack = [];
            this.inlineStack = [];

            this.compileChildren(environment, options);

            var opcodes = environment.opcodes, opcode;

            this.i = 0;

            for(l=opcodes.length; this.i<l; this.i++) {
                opcode = opcodes[this.i];

                if(opcode.opcode === 'DECLARE') {
                    this[opcode.name] = opcode.value;
                } else {
                    this[opcode.opcode].apply(this, opcode.args);
                }
            }

            return this.createFunctionContext(asObject);
        },

        nextOpcode: function() {
            var opcodes = this.environment.opcodes;
            return opcodes[this.i + 1];
        },

        eat: function() {
            this.i = this.i + 1;
        },

        preamble: function() {
            var out = [];

            if (!this.isChild) {
                var namespace = this.namespace;
                var copies = "helpers = helpers || " + namespace + ".helpers;";
                if (this.environment.usePartial) { copies = copies + " partials = partials || " + namespace + ".partials;"; }
                if (this.options.data) { copies = copies + " data = data || {};"; }
                out.push(copies);
            } else {
                out.push('');
            }

            if (!this.environment.isSimple) {
                out.push(", buffer = " + this.initializeBuffer());
            } else {
                out.push("");
            }

            // track the last context pushed into place to allow skipping the
            // getContext opcode when it would be a noop
            this.lastContext = 0;
            this.source = out;
        },

        createFunctionContext: function(asObject) {
            var locals = this.stackVars.concat(this.registers.list);

            if(locals.length > 0) {
                this.source[1] = this.source[1] + ", " + locals.join(", ");
            }

            // Generate minimizer alias mappings
            if (!this.isChild) {
                for (var alias in this.context.aliases) {
                    this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
                }
            }

            if (this.source[1]) {
                this.source[1] = "var " + this.source[1].substring(2) + ";";
            }

            // Merge children
            if (!this.isChild) {
                this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
            }

            if (!this.environment.isSimple) {
                this.source.push("return buffer;");
            }

            var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

            for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
                params.push("depth" + this.environment.depths.list[i]);
            }

            // Perform a second pass over the output to merge content when possible
            var source = this.mergeSource();

            if (!this.isChild) {
                var revision = Handlebars.COMPILER_REVISION,
                    versions = Handlebars.REVISION_CHANGES[revision];
                source = "this.compilerInfo = ["+revision+",'"+versions+"'];\n"+source;
            }

            if (asObject) {
                params.push(source);

                return Function.apply(this, params);
            } else {
                var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + source + '}';
                Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
                return functionSource;
            }
        },
        mergeSource: function() {
            // WARN: We are not handling the case where buffer is still populated as the source should
            // not have buffer append operations as their final action.
            var source = '',
                buffer;
            for (var i = 0, len = this.source.length; i < len; i++) {
                var line = this.source[i];
                if (line.appendToBuffer) {
                    if (buffer) {
                        buffer = buffer + '\n    + ' + line.content;
                    } else {
                        buffer = line.content;
                    }
                } else {
                    if (buffer) {
                        source += 'buffer += ' + buffer + ';\n  ';
                        buffer = undefined;
                    }
                    source += line + '\n  ';
                }
            }
            return source;
        },

        // [blockValue]
        //
        // On stack, before: hash, inverse, program, value
        // On stack, after: return value of blockHelperMissing
        //
        // The purpose of this opcode is to take a block of the form
        // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
        // replace it on the stack with the result of properly
        // invoking blockHelperMissing.
        blockValue: function() {
            this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

            var params = ["depth0"];
            this.setupParams(0, params);

            this.replaceStack(function(current) {
                params.splice(1, 0, current);
                return "blockHelperMissing.call(" + params.join(", ") + ")";
            });
        },

        // [ambiguousBlockValue]
        //
        // On stack, before: hash, inverse, program, value
        // Compiler value, before: lastHelper=value of last found helper, if any
        // On stack, after, if no lastHelper: same as [blockValue]
        // On stack, after, if lastHelper: value
        ambiguousBlockValue: function() {
            this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

            var params = ["depth0"];
            this.setupParams(0, params);

            var current = this.topStack();
            params.splice(1, 0, current);

            // Use the options value generated from the invocation
            params[params.length-1] = 'options';

            this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
        },

        // [appendContent]
        //
        // On stack, before: ...
        // On stack, after: ...
        //
        // Appends the string value of `content` to the current buffer
        appendContent: function(content) {
            this.source.push(this.appendToBuffer(this.quotedString(content)));
        },

        // [append]
        //
        // On stack, before: value, ...
        // On stack, after: ...
        //
        // Coerces `value` to a String and appends it to the current buffer.
        //
        // If `value` is truthy, or 0, it is coerced into a string and appended
        // Otherwise, the empty string is appended
        append: function() {
            // Force anything that is inlined onto the stack so we don't have duplication
            // when we examine local
            this.flushInline();
            var local = this.popStack();
            this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
            if (this.environment.isSimple) {
                this.source.push("else { " + this.appendToBuffer("''") + " }");
            }
        },

        // [appendEscaped]
        //
        // On stack, before: value, ...
        // On stack, after: ...
        //
        // Escape `value` and append it to the buffer
        appendEscaped: function() {
            this.context.aliases.escapeExpression = 'this.escapeExpression';

            this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
        },

        // [getContext]
        //
        // On stack, before: ...
        // On stack, after: ...
        // Compiler value, after: lastContext=depth
        //
        // Set the value of the `lastContext` compiler value to the depth
        getContext: function(depth) {
            if(this.lastContext !== depth) {
                this.lastContext = depth;
            }
        },

        // [lookupOnContext]
        //
        // On stack, before: ...
        // On stack, after: currentContext[name], ...
        //
        // Looks up the value of `name` on the current context and pushes
        // it onto the stack.
        lookupOnContext: function(name) {
            this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));
        },

        // [pushContext]
        //
        // On stack, before: ...
        // On stack, after: currentContext, ...
        //
        // Pushes the value of the current context onto the stack.
        pushContext: function() {
            this.pushStackLiteral('depth' + this.lastContext);
        },

        // [resolvePossibleLambda]
        //
        // On stack, before: value, ...
        // On stack, after: resolved value, ...
        //
        // If the `value` is a lambda, replace it on the stack by
        // the return value of the lambda
        resolvePossibleLambda: function() {
            this.context.aliases.functionType = '"function"';

            this.replaceStack(function(current) {
                return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
            });
        },

        // [lookup]
        //
        // On stack, before: value, ...
        // On stack, after: value[name], ...
        //
        // Replace the value on the stack with the result of looking
        // up `name` on `value`
        lookup: function(name) {
            this.replaceStack(function(current) {
                return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
            });
        },

        // [lookupData]
        //
        // On stack, before: ...
        // On stack, after: data[id], ...
        //
        // Push the result of looking up `id` on the current data
        lookupData: function(id) {
            this.push(this.nameLookup('data', id, 'data'));
        },

        // [pushStringParam]
        //
        // On stack, before: ...
        // On stack, after: string, currentContext, ...
        //
        // This opcode is designed for use in string mode, which
        // provides the string value of a parameter along with its
        // depth rather than resolving it immediately.
        pushStringParam: function(string, type) {
            this.pushStackLiteral('depth' + this.lastContext);

            this.pushString(type);

            if (typeof string === 'string') {
                this.pushString(string);
            } else {
                this.pushStackLiteral(string);
            }
        },

        emptyHash: function() {
            this.pushStackLiteral('{}');

            if (this.options.stringParams) {
                this.register('hashTypes', '{}');
                this.register('hashContexts', '{}');
            }
        },
        pushHash: function() {
            this.hash = {values: [], types: [], contexts: []};
        },
        popHash: function() {
            var hash = this.hash;
            this.hash = undefined;

            if (this.options.stringParams) {
                this.register('hashContexts', '{' + hash.contexts.join(',') + '}');
                this.register('hashTypes', '{' + hash.types.join(',') + '}');
            }
            this.push('{\n    ' + hash.values.join(',\n    ') + '\n  }');
        },

        // [pushString]
        //
        // On stack, before: ...
        // On stack, after: quotedString(string), ...
        //
        // Push a quoted version of `string` onto the stack
        pushString: function(string) {
            this.pushStackLiteral(this.quotedString(string));
        },

        // [push]
        //
        // On stack, before: ...
        // On stack, after: expr, ...
        //
        // Push an expression onto the stack
        push: function(expr) {
            this.inlineStack.push(expr);
            return expr;
        },

        // [pushLiteral]
        //
        // On stack, before: ...
        // On stack, after: value, ...
        //
        // Pushes a value onto the stack. This operation prevents
        // the compiler from creating a temporary variable to hold
        // it.
        pushLiteral: function(value) {
            this.pushStackLiteral(value);
        },

        // [pushProgram]
        //
        // On stack, before: ...
        // On stack, after: program(guid), ...
        //
        // Push a program expression onto the stack. This takes
        // a compile-time guid and converts it into a runtime-accessible
        // expression.
        pushProgram: function(guid) {
            if (guid != null) {
                this.pushStackLiteral(this.programExpression(guid));
            } else {
                this.pushStackLiteral(null);
            }
        },

        // [invokeHelper]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of helper invocation
        //
        // Pops off the helper's parameters, invokes the helper,
        // and pushes the helper's return value onto the stack.
        //
        // If the helper is not found, `helperMissing` is called.
        invokeHelper: function(paramSize, name) {
            this.context.aliases.helperMissing = 'helpers.helperMissing';

            var helper = this.lastHelper = this.setupHelper(paramSize, name, true);

            this.push(helper.name);
            this.replaceStack(function(name) {
                return name + ' ? ' + name + '.call(' +
                    helper.callParams + ") " + ": helperMissing.call(" +
                    helper.helperMissingParams + ")";
            });
        },

        // [invokeKnownHelper]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of helper invocation
        //
        // This operation is used when the helper is known to exist,
        // so a `helperMissing` fallback is not required.
        invokeKnownHelper: function(paramSize, name) {
            var helper = this.setupHelper(paramSize, name);
            this.push(helper.name + ".call(" + helper.callParams + ")");
        },

        // [invokeAmbiguous]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of disambiguation
        //
        // This operation is used when an expression like `{{foo}}`
        // is provided, but we don't know at compile-time whether it
        // is a helper or a path.
        //
        // This operation emits more code than the other options,
        // and can be avoided by passing the `knownHelpers` and
        // `knownHelpersOnly` flags at compile-time.
        invokeAmbiguous: function(name, helperCall) {
            this.context.aliases.functionType = '"function"';

            this.pushStackLiteral('{}');    // Hash value
            var helper = this.setupHelper(0, name, helperCall);

            var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

            var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
            var nextStack = this.nextStack();

            this.source.push('if (' + nextStack + ' = ' + helperName + ') { ' + nextStack + ' = ' + nextStack + '.call(' + helper.callParams + '); }');
            this.source.push('else { ' + nextStack + ' = ' + nonHelper + '; ' + nextStack + ' = typeof ' + nextStack + ' === functionType ? ' + nextStack + '.apply(depth0) : ' + nextStack + '; }');
        },

        // [invokePartial]
        //
        // On stack, before: context, ...
        // On stack after: result of partial invocation
        //
        // This operation pops off a context, invokes a partial with that context,
        // and pushes the result of the invocation back.
        invokePartial: function(name) {
            var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

            if (this.options.data) {
                params.push("data");
            }

            this.context.aliases.self = "this";
            this.push("self.invokePartial(" + params.join(", ") + ")");
        },

        // [assignToHash]
        //
        // On stack, before: value, hash, ...
        // On stack, after: hash, ...
        //
        // Pops a value and hash off the stack, assigns `hash[key] = value`
        // and pushes the hash back onto the stack.
        assignToHash: function(key) {
            var value = this.popStack(),
                context,
                type;

            if (this.options.stringParams) {
                type = this.popStack();
                context = this.popStack();
            }

            var hash = this.hash;
            if (context) {
                hash.contexts.push("'" + key + "': " + context);
            }
            if (type) {
                hash.types.push("'" + key + "': " + type);
            }
            hash.values.push("'" + key + "': (" + value + ")");
        },

        // HELPERS

        compiler: JavaScriptCompiler,

        compileChildren: function(environment, options) {
            var children = environment.children, child, compiler;

            for(var i=0, l=children.length; i<l; i++) {
                child = children[i];
                compiler = new this.compiler();

                var index = this.matchExistingProgram(child);

                if (index == null) {
                    this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
                    index = this.context.programs.length;
                    child.index = index;
                    child.name = 'program' + index;
                    this.context.programs[index] = compiler.compile(child, options, this.context);
                    this.context.environments[index] = child;
                } else {
                    child.index = index;
                    child.name = 'program' + index;
                }
            }
        },
        matchExistingProgram: function(child) {
            for (var i = 0, len = this.context.environments.length; i < len; i++) {
                var environment = this.context.environments[i];
                if (environment && environment.equals(child)) {
                    return i;
                }
            }
        },

        programExpression: function(guid) {
            this.context.aliases.self = "this";

            if(guid == null) {
                return "self.noop";
            }

            var child = this.environment.children[guid],
                depths = child.depths.list, depth;

            var programParams = [child.index, child.name, "data"];

            for(var i=0, l = depths.length; i<l; i++) {
                depth = depths[i];

                if(depth === 1) { programParams.push("depth0"); }
                else { programParams.push("depth" + (depth - 1)); }
            }

            return (depths.length === 0 ? "self.program(" : "self.programWithDepth(") + programParams.join(", ") + ")";
        },

        register: function(name, val) {
            this.useRegister(name);
            this.source.push(name + " = " + val + ";");
        },

        useRegister: function(name) {
            if(!this.registers[name]) {
                this.registers[name] = true;
                this.registers.list.push(name);
            }
        },

        pushStackLiteral: function(item) {
            return this.push(new Literal(item));
        },

        pushStack: function(item) {
            this.flushInline();

            var stack = this.incrStack();
            if (item) {
                this.source.push(stack + " = " + item + ";");
            }
            this.compileStack.push(stack);
            return stack;
        },

        replaceStack: function(callback) {
            var prefix = '',
                inline = this.isInline(),
                stack;

            // If we are currently inline then we want to merge the inline statement into the
            // replacement statement via ','
            if (inline) {
                var top = this.popStack(true);

                if (top instanceof Literal) {
                    // Literals do not need to be inlined
                    stack = top.value;
                } else {
                    // Get or create the current stack name for use by the inline
                    var name = this.stackSlot ? this.topStackName() : this.incrStack();

                    prefix = '(' + this.push(name) + ' = ' + top + '),';
                    stack = this.topStack();
                }
            } else {
                stack = this.topStack();
            }

            var item = callback.call(this, stack);

            if (inline) {
                if (this.inlineStack.length || this.compileStack.length) {
                    this.popStack();
                }
                this.push('(' + prefix + item + ')');
            } else {
                // Prevent modification of the context depth variable. Through replaceStack
                if (!/^stack/.test(stack)) {
                    stack = this.nextStack();
                }

                this.source.push(stack + " = (" + prefix + item + ");");
            }
            return stack;
        },

        nextStack: function() {
            return this.pushStack();
        },

        incrStack: function() {
            this.stackSlot++;
            if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
            return this.topStackName();
        },
        topStackName: function() {
            return "stack" + this.stackSlot;
        },
        flushInline: function() {
            var inlineStack = this.inlineStack;
            if (inlineStack.length) {
                this.inlineStack = [];
                for (var i = 0, len = inlineStack.length; i < len; i++) {
                    var entry = inlineStack[i];
                    if (entry instanceof Literal) {
                        this.compileStack.push(entry);
                    } else {
                        this.pushStack(entry);
                    }
                }
            }
        },
        isInline: function() {
            return this.inlineStack.length;
        },

        popStack: function(wrapped) {
            var inline = this.isInline(),
                item = (inline ? this.inlineStack : this.compileStack).pop();

            if (!wrapped && (item instanceof Literal)) {
                return item.value;
            } else {
                if (!inline) {
                    this.stackSlot--;
                }
                return item;
            }
        },

        topStack: function(wrapped) {
            var stack = (this.isInline() ? this.inlineStack : this.compileStack),
                item = stack[stack.length - 1];

            if (!wrapped && (item instanceof Literal)) {
                return item.value;
            } else {
                return item;
            }
        },

        quotedString: function(str) {
            return '"' + str
                .replace(/\\/g, '\\\\')
                .replace(/"/g, '\\"')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/\u2028/g, '\\u2028')   // Per Ecma-262 7.3 + 7.8.4
                .replace(/\u2029/g, '\\u2029') + '"';
        },

        setupHelper: function(paramSize, name, missingParams) {
            var params = [];
            this.setupParams(paramSize, params, missingParams);
            var foundHelper = this.nameLookup('helpers', name, 'helper');

            return {
                params: params,
                name: foundHelper,
                callParams: ["depth0"].concat(params).join(", "),
                helperMissingParams: missingParams && ["depth0", this.quotedString(name)].concat(params).join(", ")
            };
        },

        // the params and contexts arguments are passed in arrays
        // to fill in
        setupParams: function(paramSize, params, useRegister) {
            var options = [], contexts = [], types = [], param, inverse, program;

            options.push("hash:" + this.popStack());

            inverse = this.popStack();
            program = this.popStack();

            // Avoid setting fn and inverse if neither are set. This allows
            // helpers to do a check for `if (options.fn)`
            if (program || inverse) {
                if (!program) {
                    this.context.aliases.self = "this";
                    program = "self.noop";
                }

                if (!inverse) {
                    this.context.aliases.self = "this";
                    inverse = "self.noop";
                }

                options.push("inverse:" + inverse);
                options.push("fn:" + program);
            }

            for(var i=0; i<paramSize; i++) {
                param = this.popStack();
                params.push(param);

                if(this.options.stringParams) {
                    types.push(this.popStack());
                    contexts.push(this.popStack());
                }
            }

            if (this.options.stringParams) {
                options.push("contexts:[" + contexts.join(",") + "]");
                options.push("types:[" + types.join(",") + "]");
                options.push("hashContexts:hashContexts");
                options.push("hashTypes:hashTypes");
            }

            if(this.options.data) {
                options.push("data:data");
            }

            options = "{" + options.join(",") + "}";
            if (useRegister) {
                this.register('options', options);
                params.push('options');
            } else {
                params.push(options);
            }
            return params.join(", ");
        }
    };

    var reservedWords = (
        "break else new var" +
        " case finally return void" +
        " catch for switch while" +
        " continue function this with" +
        " default if throw" +
        " delete in try" +
        " do instanceof typeof" +
        " abstract enum int short" +
        " boolean export interface static" +
        " byte extends long super" +
        " char final native synchronized" +
        " class float package throws" +
        " const goto private transient" +
        " debugger implements protected volatile" +
        " double import public let yield"
        ).split(" ");

    var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

    for(var i=0, l=reservedWords.length; i<l; i++) {
        compilerWords[reservedWords[i]] = true;
    }

    JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
        if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name)) {
            return true;
        }
        return false;
    };

    Handlebars.precompile = function(input, options) {
        if (input == null || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
            throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
        }

        options = options || {};
        if (!('data' in options)) {
            options.data = true;
        }
        var ast = Handlebars.parse(input);
        var environment = new Compiler().compile(ast, options);
        return new JavaScriptCompiler().compile(environment, options);
    };

    Handlebars.compile = function(input, options) {
        if (input == null || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
            throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
        }

        options = options || {};
        if (!('data' in options)) {
            options.data = true;
        }
        var compiled;
        function compile() {
            var ast = Handlebars.parse(input);
            var environment = new Compiler().compile(ast, options);
            var templateSpec = new JavaScriptCompiler().compile(environment, options, undefined, true);
            return Handlebars.template(templateSpec);
        }

        // Template is only compiled on first use and cached after that point.
        return function(context, options) {
            if (!compiled) {
                compiled = compile();
            }
            return compiled.call(this, context, options);
        };
    };

    ;
// lib/handlebars/runtime.js

    Handlebars.VM = {
        template: function(templateSpec) {
            // Just add water
            var container = {
                escapeExpression: Handlebars.Utils.escapeExpression,
                invokePartial: Handlebars.VM.invokePartial,
                programs: [],
                program: function(i, fn, data) {
                    var programWrapper = this.programs[i];
                    if(data) {
                        programWrapper = Handlebars.VM.program(i, fn, data);
                    } else if (!programWrapper) {
                        programWrapper = this.programs[i] = Handlebars.VM.program(i, fn);
                    }
                    return programWrapper;
                },
                programWithDepth: Handlebars.VM.programWithDepth,
                noop: Handlebars.VM.noop,
                compilerInfo: null
            };

            return function(context, options) {
                options = options || {};
                var result = templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);

                var compilerInfo = container.compilerInfo || [],
                    compilerRevision = compilerInfo[0] || 1,
                    currentRevision = Handlebars.COMPILER_REVISION;

                if (compilerRevision !== currentRevision) {
                    if (compilerRevision < currentRevision) {
                        var runtimeVersions = Handlebars.REVISION_CHANGES[currentRevision],
                            compilerVersions = Handlebars.REVISION_CHANGES[compilerRevision];
                        throw "Template was precompiled with an older version of Handlebars than the current runtime. "+
                            "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").";
                    } else {
                        // Use the embedded version info since the runtime doesn't know about this revision yet
                        throw "Template was precompiled with a newer version of Handlebars than the current runtime. "+
                            "Please update your runtime to a newer version ("+compilerInfo[1]+").";
                    }
                }

                return result;
            };
        },

        programWithDepth: function(i, fn, data /*, $depth */) {
            var args = Array.prototype.slice.call(arguments, 3);

            var program = function(context, options) {
                options = options || {};

                return fn.apply(this, [context, options.data || data].concat(args));
            };
            program.program = i;
            program.depth = args.length;
            return program;
        },
        program: function(i, fn, data) {
            var program = function(context, options) {
                options = options || {};

                return fn(context, options.data || data);
            };
            program.program = i;
            program.depth = 0;
            return program;
        },
        noop: function() { return ""; },
        invokePartial: function(partial, name, context, helpers, partials, data) {
            var options = { helpers: helpers, partials: partials, data: data };

            if(partial === undefined) {
                throw new Handlebars.Exception("The partial " + name + " could not be found");
            } else if(partial instanceof Function) {
                return partial(context, options);
            } else if (!Handlebars.compile) {
                throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
            } else {
                partials[name] = Handlebars.compile(partial, {data: data !== undefined});
                return partials[name](context, options);
            }
        }
    };

    Handlebars.template = Handlebars.VM.template;
    ;
// lib/handlebars/browser-suffix.js
})(Handlebars);
;

// Underscore.js 1.4.4
// ===================

// > http://underscorejs.org
// > (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
// > Underscore may be freely distributed under the MIT license.

// Baseline setup
// --------------
(function() {

    // Establish the root object, `window` in the browser, or `global` on the server.
    var root = this;

    // Save the previous value of the `_` variable.
    var previousUnderscore = root._;

    // Establish the object that gets returned to break out of a loop iteration.
    var breaker = {};

    // Save bytes in the minified (but not gzipped) version:
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

    // Create quick reference variables for speed access to core prototypes.
    var push             = ArrayProto.push,
        slice            = ArrayProto.slice,
        concat           = ArrayProto.concat,
        toString         = ObjProto.toString,
        hasOwnProperty   = ObjProto.hasOwnProperty;

    // All **ECMAScript 5** native function implementations that we hope to use
    // are declared here.
    var
        nativeForEach      = ArrayProto.forEach,
        nativeMap          = ArrayProto.map,
        nativeReduce       = ArrayProto.reduce,
        nativeReduceRight  = ArrayProto.reduceRight,
        nativeFilter       = ArrayProto.filter,
        nativeEvery        = ArrayProto.every,
        nativeSome         = ArrayProto.some,
        nativeIndexOf      = ArrayProto.indexOf,
        nativeLastIndexOf  = ArrayProto.lastIndexOf,
        nativeIsArray      = Array.isArray,
        nativeKeys         = Object.keys,
        nativeBind         = FuncProto.bind;

    // Create a safe reference to the Underscore object for use below.
    var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
    };

    // Export the Underscore object for **Node.js**, with
    // backwards-compatibility for the old `require()` API. If we're in
    // the browser, add `_` as a global object via a string identifier,
    // for Closure Compiler "advanced" mode.
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = _;
        }
        exports._ = _;
    } else {
        root._ = _;
    }

    // Current version.
    _.VERSION = '1.4.4';

    // Collection Functions
    // --------------------

    // The cornerstone, an `each` implementation, aka `forEach`.
    // Handles objects with the built-in `forEach`, arrays, and raw objects.
    // Delegates to **ECMAScript 5**'s native `forEach` if available.
    var each = _.each = _.forEach = function(obj, iterator, context) {
        if (obj == null) return;
        if (nativeForEach && obj.forEach === nativeForEach) {
            obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
            for (var i = 0, l = obj.length; i < l; i++) {
                if (iterator.call(context, obj[i], i, obj) === breaker) return;
            }
        } else {
            for (var key in obj) {
                if (_.has(obj, key)) {
                    if (iterator.call(context, obj[key], key, obj) === breaker) return;
                }
            }
        }
    };

    // Return the results of applying the iterator to each element.
    // Delegates to **ECMAScript 5**'s native `map` if available.
    _.map = _.collect = function(obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function(value, index, list) {
            results[results.length] = iterator.call(context, value, index, list);
        });
        return results;
    };

    var reduceError = 'Reduce of empty array with no initial value';

    // **Reduce** builds up a single result from a list of values, aka `inject`,
    // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
    _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function(value, index, list) {
            if (!initial) {
                memo = value;
                initial = true;
            } else {
                memo = iterator.call(context, memo, value, index, list);
            }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
    };

    // The right-associative version of reduce, also known as `foldr`.
    // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
    _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (length !== +length) {
            var keys = _.keys(obj);
            length = keys.length;
        }
        each(obj, function(value, index, list) {
            index = keys ? keys[--length] : --length;
            if (!initial) {
                memo = obj[index];
                initial = true;
            } else {
                memo = iterator.call(context, memo, obj[index], index, list);
            }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
    };

    // Return the first value which passes a truth test. Aliased as `detect`.
    _.find = _.detect = function(obj, iterator, context) {
        var result;
        any(obj, function(value, index, list) {
            if (iterator.call(context, value, index, list)) {
                result = value;
                return true;
            }
        });
        return result;
    };

    // Return all the elements that pass a truth test.
    // Delegates to **ECMAScript 5**'s native `filter` if available.
    // Aliased as `select`.
    _.filter = _.select = function(obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
        each(obj, function(value, index, list) {
            if (iterator.call(context, value, index, list)) results[results.length] = value;
        });
        return results;
    };

    // Return all the elements for which a truth test fails.
    _.reject = function(obj, iterator, context) {
        return _.filter(obj, function(value, index, list) {
            return !iterator.call(context, value, index, list);
        }, context);
    };

    // Determine whether all of the elements match a truth test.
    // Delegates to **ECMAScript 5**'s native `every` if available.
    // Aliased as `all`.
    _.every = _.all = function(obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = true;
        if (obj == null) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
        each(obj, function(value, index, list) {
            if (!(result = result && iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
    };

    // Determine if at least one element in the object matches a truth test.
    // Delegates to **ECMAScript 5**'s native `some` if available.
    // Aliased as `any`.
    var any = _.some = _.any = function(obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = false;
        if (obj == null) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
        each(obj, function(value, index, list) {
            if (result || (result = iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
    };

    // Determine if the array or object contains a given value (using `===`).
    // Aliased as `include`.
    _.contains = _.include = function(obj, target) {
        if (obj == null) return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        return any(obj, function(value) {
            return value === target;
        });
    };

    // Invoke a method (with arguments) on every item in a collection.
    _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function(value) {
            return (isFunc ? method : value[method]).apply(value, args);
        });
    };

    // Convenience version of a common use case of `map`: fetching a property.
    _.pluck = function(obj, key) {
        return _.map(obj, function(value){ return value[key]; });
    };

    // Convenience version of a common use case of `filter`: selecting only objects
    // containing specific `key:value` pairs.
    _.where = function(obj, attrs, first) {
        if (_.isEmpty(attrs)) return first ? null : [];
        return _[first ? 'find' : 'filter'](obj, function(value) {
            for (var key in attrs) {
                if (attrs[key] !== value[key]) return false;
            }
            return true;
        });
    };

    // Convenience version of a common use case of `find`: getting the first object
    // containing specific `key:value` pairs.
    _.findWhere = function(obj, attrs) {
        return _.where(obj, attrs, true);
    };

    // Return the maximum element or (element-based computation).
    // Can't optimize arrays of integers longer than 65,535 elements.
    // See: https://bugs.webkit.org/show_bug.cgi?id=80797
    _.max = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
            return Math.max.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return -Infinity;
        var result = {computed : -Infinity, value: -Infinity};
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed >= result.computed && (result = {value : value, computed : computed});
        });
        return result.value;
    };

    // Return the minimum element (or element-based computation).
    _.min = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
            return Math.min.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return Infinity;
        var result = {computed : Infinity, value: Infinity};
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed < result.computed && (result = {value : value, computed : computed});
        });
        return result.value;
    };

    // Shuffle an array.
    _.shuffle = function(obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function(value) {
            rand = _.random(index++);
            shuffled[index - 1] = shuffled[rand];
            shuffled[rand] = value;
        });
        return shuffled;
    };

    // An internal function to generate lookup iterators.
    var lookupIterator = function(value) {
        return _.isFunction(value) ? value : function(obj){ return obj[value]; };
    };

    // Sort the object's values by a criterion produced by an iterator.
    _.sortBy = function(obj, value, context) {
        var iterator = lookupIterator(value);
        return _.pluck(_.map(obj, function(value, index, list) {
            return {
                value : value,
                index : index,
                criteria : iterator.call(context, value, index, list)
            };
        }).sort(function(left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
                if (a > b || a === void 0) return 1;
                if (a < b || b === void 0) return -1;
            }
            return left.index < right.index ? -1 : 1;
        }), 'value');
    };

    // An internal function used for aggregate "group by" operations.
    var group = function(obj, value, context, behavior) {
        var result = {};
        var iterator = lookupIterator(value || _.identity);
        each(obj, function(value, index) {
            var key = iterator.call(context, value, index, obj);
            behavior(result, key, value);
        });
        return result;
    };

    // Groups the object's values by a criterion. Pass either a string attribute
    // to group by, or a function that returns the criterion.
    _.groupBy = function(obj, value, context) {
        return group(obj, value, context, function(result, key, value) {
            (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
        });
    };

    // Counts instances of an object that group by a certain criterion. Pass
    // either a string attribute to count by, or a function that returns the
    // criterion.
    _.countBy = function(obj, value, context) {
        return group(obj, value, context, function(result, key) {
            if (!_.has(result, key)) result[key] = 0;
            result[key]++;
        });
    };

    // Use a comparator function to figure out the smallest index at which
    // an object should be inserted so as to maintain order. Uses binary search.
    _.sortedIndex = function(array, obj, iterator, context) {
        iterator = iterator == null ? _.identity : lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0, high = array.length;
        while (low < high) {
            var mid = (low + high) >>> 1;
            iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
    };

    // Safely convert anything iterable into a real, live array.
    _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (obj.length === +obj.length) return _.map(obj, _.identity);
        return _.values(obj);
    };

    // Return the number of elements in an object.
    _.size = function(obj) {
        if (obj == null) return 0;
        return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
    };

    // Array Functions
    // ---------------

    // Get the first element of an array. Passing **n** will return the first N
    // values in the array. Aliased as `head` and `take`. The **guard** check
    // allows it to work with `_.map`.
    _.first = _.head = _.take = function(array, n, guard) {
        if (array == null) return void 0;
        return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
    };

    // Returns everything but the last entry of the array. Especially useful on
    // the arguments object. Passing **n** will return all the values in
    // the array, excluding the last N. The **guard** check allows it to work with
    // `_.map`.
    _.initial = function(array, n, guard) {
        return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
    };

    // Get the last element of an array. Passing **n** will return the last N
    // values in the array. The **guard** check allows it to work with `_.map`.
    _.last = function(array, n, guard) {
        if (array == null) return void 0;
        if ((n != null) && !guard) {
            return slice.call(array, Math.max(array.length - n, 0));
        } else {
            return array[array.length - 1];
        }
    };

    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
    // Especially useful on the arguments object. Passing an **n** will return
    // the rest N values in the array. The **guard**
    // check allows it to work with `_.map`.
    _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, (n == null) || guard ? 1 : n);
    };

    // Trim out all falsy values from an array.
    _.compact = function(array) {
        return _.filter(array, _.identity);
    };

    // Internal implementation of a recursive `flatten` function.
    var flatten = function(input, shallow, output) {
        each(input, function(value) {
            if (_.isArray(value)) {
                shallow ? push.apply(output, value) : flatten(value, shallow, output);
            } else {
                output.push(value);
            }
        });
        return output;
    };

    // Return a completely flattened version of an array.
    _.flatten = function(array, shallow) {
        return flatten(array, shallow, []);
    };

    // Return a version of the array that does not contain the specified value(s).
    _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    };

    // Produce a duplicate-free version of the array. If the array has already
    // been sorted, you have the option of using a faster algorithm.
    // Aliased as `unique`.
    _.uniq = _.unique = function(array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
            context = iterator;
            iterator = isSorted;
            isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function(value, index) {
            if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
                seen.push(value);
                results.push(array[index]);
            }
        });
        return results;
    };

    // Produce an array that contains the union: each distinct element from all of
    // the passed-in arrays.
    _.union = function() {
        return _.uniq(concat.apply(ArrayProto, arguments));
    };

    // Produce an array that contains every item shared between all the
    // passed-in arrays.
    _.intersection = function(array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function(item) {
            return _.every(rest, function(other) {
                return _.indexOf(other, item) >= 0;
            });
        });
    };

    // Take the difference between one array and a number of other arrays.
    // Only the elements present in just the first array will remain.
    _.difference = function(array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function(value){ return !_.contains(rest, value); });
    };

    // Zip together multiple lists into a single array -- elements that share
    // an index go together.
    _.zip = function() {
        var args = slice.call(arguments);
        var length = _.max(_.pluck(args, 'length'));
        var results = new Array(length);
        for (var i = 0; i < length; i++) {
            results[i] = _.pluck(args, "" + i);
        }
        return results;
    };

    // Converts lists into objects. Pass either a single array of `[key, value]`
    // pairs, or two parallel arrays of the same length -- one of keys, and one of
    // the corresponding values.
    _.object = function(list, values) {
        if (list == null) return {};
        var result = {};
        for (var i = 0, l = list.length; i < l; i++) {
            if (values) {
                result[list[i]] = values[i];
            } else {
                result[list[i][0]] = list[i][1];
            }
        }
        return result;
    };

    // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
    // we need this function. Return the position of the first occurrence of an
    // item in an array, or -1 if the item is not included in the array.
    // Delegates to **ECMAScript 5**'s native `indexOf` if available.
    // If the array is large and already in sort order, pass `true`
    // for **isSorted** to use binary search.
    _.indexOf = function(array, item, isSorted) {
        if (array == null) return -1;
        var i = 0, l = array.length;
        if (isSorted) {
            if (typeof isSorted == 'number') {
                i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
            } else {
                i = _.sortedIndex(array, item);
                return array[i] === item ? i : -1;
            }
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
        for (; i < l; i++) if (array[i] === item) return i;
        return -1;
    };

    // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
    _.lastIndexOf = function(array, item, from) {
        if (array == null) return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
            return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        }
        var i = (hasIndex ? from : array.length);
        while (i--) if (array[i] === item) return i;
        return -1;
    };

    // Generate an integer Array containing an arithmetic progression. A port of
    // the native Python `range()` function. See
    // [the Python documentation](http://docs.python.org/library/functions.html#range).
    _.range = function(start, stop, step) {
        if (arguments.length <= 1) {
            stop = start || 0;
            start = 0;
        }
        step = arguments[2] || 1;

        var len = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(len);

        while(idx < len) {
            range[idx++] = start;
            start += step;
        }

        return range;
    };

    // Function (ahem) Functions
    // ------------------

    // Create a function bound to a given object (assigning `this`, and arguments,
    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
    // available.
    _.bind = function(func, context) {
        if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        var args = slice.call(arguments, 2);
        return function() {
            return func.apply(context, args.concat(slice.call(arguments)));
        };
    };

    // Partially apply a function by creating a version that has had some of its
    // arguments pre-filled, without changing its dynamic `this` context.
    _.partial = function(func) {
        var args = slice.call(arguments, 1);
        return function() {
            return func.apply(this, args.concat(slice.call(arguments)));
        };
    };

    // Bind all of an object's methods to that object. Useful for ensuring that
    // all callbacks defined on an object belong to it.
    _.bindAll = function(obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0) funcs = _.functions(obj);
        each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
        return obj;
    };

    // Memoize an expensive function by storing its results.
    _.memoize = function(func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function() {
            var key = hasher.apply(this, arguments);
            return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
        };
    };

    // Delays a function for the given number of milliseconds, and then calls
    // it with the arguments supplied.
    _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function(){ return func.apply(null, args); }, wait);
    };

    // Defers a function, scheduling it to run after the current call stack has
    // cleared.
    _.defer = function(func) {
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
    };

    // Returns a function, that, when invoked, will only be triggered at most once
    // during a given window of time.
    _.throttle = function(func, wait) {
        var context, args, timeout, result;
        var previous = 0;
        var later = function() {
            previous = new Date;
            timeout = null;
            result = func.apply(context, args);
        };
        return function() {
            var now = new Date;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0) {
                clearTimeout(timeout);
                timeout = null;
                previous = now;
                result = func.apply(context, args);
            } else if (!timeout) {
                timeout = setTimeout(later, remaining);
            }
            return result;
        };
    };

    // Returns a function, that, as long as it continues to be invoked, will not
    // be triggered. The function will be called after it stops being called for
    // N milliseconds. If `immediate` is passed, trigger the function on the
    // leading edge, instead of the trailing.
    _.debounce = function(func, wait, immediate) {
        var timeout, result;
        return function() {
            var context = this, args = arguments;
            var later = function() {
                timeout = null;
                if (!immediate) result = func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) result = func.apply(context, args);
            return result;
        };
    };

    // Returns a function that will be executed at most one time, no matter how
    // often you call it. Useful for lazy initialization.
    _.once = function(func) {
        var ran = false, memo;
        return function() {
            if (ran) return memo;
            ran = true;
            memo = func.apply(this, arguments);
            func = null;
            return memo;
        };
    };

    // Returns the first function passed as an argument to the second,
    // allowing you to adjust arguments, run code before and after, and
    // conditionally execute the original function.
    _.wrap = function(func, wrapper) {
        return function() {
            var args = [func];
            push.apply(args, arguments);
            return wrapper.apply(this, args);
        };
    };

    // Returns a function that is the composition of a list of functions, each
    // consuming the return value of the function that follows.
    _.compose = function() {
        var funcs = arguments;
        return function() {
            var args = arguments;
            for (var i = funcs.length - 1; i >= 0; i--) {
                args = [funcs[i].apply(this, args)];
            }
            return args[0];
        };
    };

    // Returns a function that will only be executed after being called N times.
    _.after = function(times, func) {
        if (times <= 0) return func();
        return function() {
            if (--times < 1) {
                return func.apply(this, arguments);
            }
        };
    };

    // Object Functions
    // ----------------

    // Retrieve the names of an object's properties.
    // Delegates to **ECMAScript 5**'s native `Object.keys`
    _.keys = nativeKeys || function(obj) {
        if (obj !== Object(obj)) throw new TypeError('Invalid object');
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
        return keys;
    };

    // Retrieve the values of an object's properties.
    _.values = function(obj) {
        var values = [];
        for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
        return values;
    };

    // Convert an object into a list of `[key, value]` pairs.
    _.pairs = function(obj) {
        var pairs = [];
        for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
        return pairs;
    };

    // Invert the keys and values of an object. The values must be serializable.
    _.invert = function(obj) {
        var result = {};
        for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
        return result;
    };

    // Return a sorted list of the function names available on the object.
    // Aliased as `methods`
    _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
            if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
    };

    // Extend a given object with all the properties in passed-in object(s).
    _.extend = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            if (source) {
                for (var prop in source) {
                    obj[prop] = source[prop];
                }
            }
        });
        return obj;
    };

    // Return a copy of the object only containing the whitelisted properties.
    _.pick = function(obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function(key) {
            if (key in obj) copy[key] = obj[key];
        });
        return copy;
    };

    // Return a copy of the object without the blacklisted properties.
    _.omit = function(obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) {
            if (!_.contains(keys, key)) copy[key] = obj[key];
        }
        return copy;
    };

    // Fill in a given object with default properties.
    _.defaults = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            if (source) {
                for (var prop in source) {
                    if (obj[prop] == null) obj[prop] = source[prop];
                }
            }
        });
        return obj;
    };

    // Create a (shallow-cloned) duplicate of an object.
    _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };

    // Invokes interceptor with the obj, and then returns obj.
    // The primary purpose of this method is to "tap into" a method chain, in
    // order to perform operations on intermediate results within the chain.
    _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
    };

    // Internal recursive comparison function for `isEqual`.
    var eq = function(a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
        if (a === b) return a !== 0 || 1 / a == 1 / b;
        // A strict comparison is necessary because `null == undefined`.
        if (a == null || b == null) return a === b;
        // Unwrap any wrapped objects.
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
            // Strings, numbers, dates, and booleans are compared by value.
            case '[object String]':
                // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                // equivalent to `new String("5")`.
                return a == String(b);
            case '[object Number]':
                // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
                // other numeric values.
                return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
            case '[object Date]':
            case '[object Boolean]':
                // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                // millisecond representations. Note that invalid dates with millisecond representations
                // of `NaN` are not equivalent.
                return +a == +b;
            // RegExps are compared by their source patterns and flags.
            case '[object RegExp]':
                return a.source == b.source &&
                    a.global == b.global &&
                    a.multiline == b.multiline &&
                    a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object') return false;
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        var length = aStack.length;
        while (length--) {
            // Linear search. Performance is inversely proportional to the number of
            // unique nested structures.
            if (aStack[length] == a) return bStack[length] == b;
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        var size = 0, result = true;
        // Recursively compare objects and arrays.
        if (className == '[object Array]') {
            // Compare array lengths to determine if a deep comparison is necessary.
            size = a.length;
            result = size == b.length;
            if (result) {
                // Deep compare the contents, ignoring non-numeric properties.
                while (size--) {
                    if (!(result = eq(a[size], b[size], aStack, bStack))) break;
                }
            }
        } else {
            // Objects with different constructors are not equivalent, but `Object`s
            // from different frames are.
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
                return false;
            }
            // Deep compare objects.
            for (var key in a) {
                if (_.has(a, key)) {
                    // Count the expected number of properties.
                    size++;
                    // Deep compare each member.
                    if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
                }
            }
            // Ensure that both objects contain the same number of properties.
            if (result) {
                for (key in b) {
                    if (_.has(b, key) && !(size--)) break;
                }
                result = !size;
            }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return result;
    };

    // Perform a deep comparison to check if two objects are equal.
    _.isEqual = function(a, b) {
        return eq(a, b, [], []);
    };

    // Is a given array, string, or object empty?
    // An "empty" object has no enumerable own-properties.
    _.isEmpty = function(obj) {
        if (obj == null) return true;
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
        for (var key in obj) if (_.has(obj, key)) return false;
        return true;
    };

    // Is a given value a DOM element?
    _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
    };

    // Is a given value an array?
    // Delegates to ECMA5's native Array.isArray
    _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) == '[object Array]';
    };

    // Is a given variable an object?
    _.isObject = function(obj) {
        return obj === Object(obj);
    };

    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
    each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
        _['is' + name] = function(obj) {
            return toString.call(obj) == '[object ' + name + ']';
        };
    });

    // Define a fallback version of the method in browsers (ahem, IE), where
    // there isn't any inspectable "Arguments" type.
    if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
            return !!(obj && _.has(obj, 'callee'));
        };
    }

    // Optimize `isFunction` if appropriate.
    if (typeof (/./) !== 'function') {
        _.isFunction = function(obj) {
            return typeof obj === 'function';
        };
    }

    // Is a given object a finite number?
    _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    };

    // Is the given value `NaN`? (NaN is the only number which does not equal itself).
    _.isNaN = function(obj) {
        return _.isNumber(obj) && obj != +obj;
    };

    // Is a given value a boolean?
    _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
    };

    // Is a given value equal to null?
    _.isNull = function(obj) {
        return obj === null;
    };

    // Is a given variable undefined?
    _.isUndefined = function(obj) {
        return obj === void 0;
    };

    // Shortcut function for checking if an object has a given property directly
    // on itself (in other words, not on a prototype).
    _.has = function(obj, key) {
        return hasOwnProperty.call(obj, key);
    };

    // Utility Functions
    // -----------------

    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
    // previous owner. Returns a reference to the Underscore object.
    _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
    };

    // Keep the identity function around for default iterators.
    _.identity = function(value) {
        return value;
    };

    // Run a function **n** times.
    _.times = function(n, iterator, context) {
        var accum = Array(n);
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
        return accum;
    };

    // Return a random integer between min and max (inclusive).
    _.random = function(min, max) {
        if (max == null) {
            max = min;
            min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
    };

    // List of HTML entities for escaping.
    var entityMap = {
        escape: {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#x27;',
            '/': '&#x2F;'
        }
    };
    entityMap.unescape = _.invert(entityMap.escape);

    // Regexes containing the keys and values listed immediately above.
    var entityRegexes = {
        escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
    };

    // Functions for escaping and unescaping strings to/from HTML interpolation.
    _.each(['escape', 'unescape'], function(method) {
        _[method] = function(string) {
            if (string == null) return '';
            return ('' + string).replace(entityRegexes[method], function(match) {
                return entityMap[method][match];
            });
        };
    });

    // If the value of the named property is a function then invoke it;
    // otherwise, return it.
    _.result = function(object, property) {
        if (object == null) return null;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
    };

    // Add your own custom functions to the Underscore object.
    _.mixin = function(obj) {
        each(_.functions(obj), function(name){
            var func = _[name] = obj[name];
            _.prototype[name] = function() {
                var args = [this._wrapped];
                push.apply(args, arguments);
                return result.call(this, func.apply(_, args));
            };
        });
    };

    // Generate a unique integer id (unique within the entire client session).
    // Useful for temporary DOM ids.
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
    };

    // By default, Underscore uses ERB-style template delimiters, change the
    // following template settings to use alternative delimiters.
    _.templateSettings = {
        evaluate    : /<%([\s\S]+?)%>/g,
        interpolate : /<%=([\s\S]+?)%>/g,
        escape      : /<%-([\s\S]+?)%>/g
    };

    // When customizing `templateSettings`, if you don't want to define an
    // interpolation, evaluation or escaping regex, we need one that is
    // guaranteed not to match.
    var noMatch = /(.)^/;

    // Certain characters need to be escaped so that they can be put into a
    // string literal.
    var escapes = {
        "'":      "'",
        '\\':     '\\',
        '\r':     'r',
        '\n':     'n',
        '\t':     't',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
    };

    var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

    // JavaScript micro-templating, similar to John Resig's implementation.
    // Underscore templating handles arbitrary delimiters, preserves whitespace,
    // and correctly escapes quotes within interpolated code.
    _.template = function(text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);

        // Combine delimiters into one regular expression via alternation.
        var matcher = new RegExp([
            (settings.escape || noMatch).source,
            (settings.interpolate || noMatch).source,
            (settings.evaluate || noMatch).source
        ].join('|') + '|$', 'g');

        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset)
                .replace(escaper, function(match) { return '\\' + escapes[match]; });

            if (escape) {
                source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
            }
            if (interpolate) {
                source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            }
            if (evaluate) {
                source += "';\n" + evaluate + "\n__p+='";
            }
            index = offset + match.length;
            return match;
        });
        source += "';\n";

        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

        source = "var __t,__p='',__j=Array.prototype.join," +
            "print=function(){__p+=__j.call(arguments,'');};\n" +
            source + "return __p;\n";

        try {
            render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
            e.source = source;
            throw e;
        }

        if (data) return render(data, _);
        var template = function(data) {
            return render.call(this, data, _);
        };

        // Provide the compiled function source as a convenience for precompilation.
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

        return template;
    };

    // Add a "chain" function, which will delegate to the wrapper.
    _.chain = function(obj) {
        return _(obj).chain();
    };

    // OOP
    // ---------------
    // If Underscore is called as a function, it returns a wrapped object that
    // can be used OO-style. This wrapper holds altered versions of all the
    // underscore functions. Wrapped objects may be chained.

    // Helper function to continue chaining intermediate results.
    var result = function(obj) {
        return this._chain ? _(obj).chain() : obj;
    };

    // Add all of the Underscore functions to the wrapper object.
    _.mixin(_);

    // Add all mutator Array functions to the wrapper.
    each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
            return result.call(this, obj);
        };
    });

    // Add all accessor Array functions to the wrapper.
    each(['concat', 'join', 'slice'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            return result.call(this, method.apply(this._wrapped, arguments));
        };
    });

    _.extend(_.prototype, {

        // Start chaining a wrapped Underscore object.
        chain: function() {
            this._chain = true;
            return this;
        },

        // Extracts the result from a wrapped and chained object.
        value: function() {
            return this._wrapped;
        }

    });

}).call(this);

//     Backbone.js 0.9.9

//     (c) 2010-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(){

    // Initial Setup
    // -------------

    // Save a reference to the global object (`window` in the browser, `exports`
    // on the server).
    var root = this;

    // Save the previous value of the `Backbone` variable, so that it can be
    // restored later on, if `noConflict` is used.
    var previousBackbone = root.Backbone;

    // Create a local reference to array methods.
    var array = [];
    var push = array.push;
    var slice = array.slice;
    var splice = array.splice;

    // The top-level namespace. All public Backbone classes and modules will
    // be attached to this. Exported for both CommonJS and the browser.
    var Backbone;
    if (typeof exports !== 'undefined') {
        Backbone = exports;
    } else {
        Backbone = root.Backbone = {};
    }

    // Current version of the library. Keep in sync with `package.json`.
    Backbone.VERSION = '0.9.9';

    // Require Underscore, if we're on the server, and it's not already present.
    var _ = root._;
    if (!_ && (typeof require !== 'undefined')) _ = require('underscore');

    // For Backbone's purposes, jQuery, Zepto, or Ender owns the `$` variable.
    Backbone.$ = root.jQuery || root.Zepto || root.ender;

    // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
    // to its previous owner. Returns a reference to this Backbone object.
    Backbone.noConflict = function() {
        root.Backbone = previousBackbone;
        return this;
    };

    // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
    // will fake `"PUT"` and `"DELETE"` requests via the `_method` parameter and
    // set a `X-Http-Method-Override` header.
    Backbone.emulateHTTP = false;

    // Turn on `emulateJSON` to support legacy servers that can't deal with direct
    // `application/json` requests ... will encode the body as
    // `application/x-www-form-urlencoded` instead and will send the model in a
    // form param named `model`.
    Backbone.emulateJSON = false;

    // Backbone.Events
    // ---------------

    // Regular expression used to split event strings.
    var eventSplitter = /\s+/;

    // Implement fancy features of the Events API such as multiple event
    // names `"change blur"` and jQuery-style event maps `{change: action}`
    // in terms of the existing API.
    var eventsApi = function(obj, action, name, rest) {
        if (!name) return true;
        if (typeof name === 'object') {
            for (var key in name) {
                obj[action].apply(obj, [key, name[key]].concat(rest));
            }
        } else if (eventSplitter.test(name)) {
            var names = name.split(eventSplitter);
            for (var i = 0, l = names.length; i < l; i++) {
                obj[action].apply(obj, [names[i]].concat(rest));
            }
        } else {
            return true;
        }
    };

    // Optimized internal dispatch function for triggering events. Tries to
    // keep the usual cases speedy (most Backbone events have 3 arguments).
    var triggerEvents = function(obj, events, args) {
        var ev, i = -1, l = events.length;
        switch (args.length) {
            case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx);
                return;
            case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0]);
                return;
            case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0], args[1]);
                return;
            case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, args[0], args[1], args[2]);
                return;
            default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
        }
    };

    // A module that can be mixed in to *any object* in order to provide it with
    // custom events. You may bind with `on` or remove with `off` callback
    // functions to an event; `trigger`-ing an event fires all callbacks in
    // succession.
    //
    //     var object = {};
    //     _.extend(object, Backbone.Events);
    //     object.on('expand', function(){ alert('expanded'); });
    //     object.trigger('expand');
    //
    var Events = Backbone.Events = {

        // Bind one or more space separated events, or an events map,
        // to a `callback` function. Passing `"all"` will bind the callback to
        // all events fired.
        on: function(name, callback, context) {
            if (!(eventsApi(this, 'on', name, [callback, context]) && callback)) return this;
            this._events || (this._events = {});
            var list = this._events[name] || (this._events[name] = []);
            list.push({callback: callback, context: context, ctx: context || this});
            return this;
        },

        // Bind events to only be triggered a single time. After the first time
        // the callback is invoked, it will be removed.
        once: function(name, callback, context) {
            if (!(eventsApi(this, 'once', name, [callback, context]) && callback)) return this;
            var self = this;
            var once = _.once(function() {
                self.off(name, once);
                callback.apply(this, arguments);
            });
            once._callback = callback;
            this.on(name, once, context);
            return this;
        },

        // Remove one or many callbacks. If `context` is null, removes all
        // callbacks with that function. If `callback` is null, removes all
        // callbacks for the event. If `events` is null, removes all bound
        // callbacks for all events.
        off: function(name, callback, context) {
            var list, ev, events, names, i, l, j, k;
            if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
            if (!name && !callback && !context) {
                this._events = {};
                return this;
            }

            names = name ? [name] : _.keys(this._events);
            for (i = 0, l = names.length; i < l; i++) {
                name = names[i];
                if (list = this._events[name]) {
                    events = [];
                    if (callback || context) {
                        for (j = 0, k = list.length; j < k; j++) {
                            ev = list[j];
                            if ((callback && callback !== (ev.callback._callback || ev.callback)) ||
                                (context && context !== ev.context)) {
                                events.push(ev);
                            }
                        }
                    }
                    this._events[name] = events;
                }
            }

            return this;
        },

        // Trigger one or many events, firing all bound callbacks. Callbacks are
        // passed the same arguments as `trigger` is, apart from the event name
        // (unless you're listening on `"all"`, which will cause your callback to
        // receive the true name of the event as the first argument).
        trigger: function(name) {
            if (!this._events) return this;
            var args = slice.call(arguments, 1);
            if (!eventsApi(this, 'trigger', name, args)) return this;
            var events = this._events[name];
            var allEvents = this._events.all;
            if (events) triggerEvents(this, events, args);
            if (allEvents) triggerEvents(this, allEvents, arguments);
            return this;
        },

        // An inversion-of-control version of `on`. Tell *this* object to listen to
        // an event in another object ... keeping track of what it's listening to.
        listenTo: function(object, events, callback) {
            var listeners = this._listeners || (this._listeners = {});
            var id = object._listenerId || (object._listenerId = _.uniqueId('l'));
            listeners[id] = object;
            object.on(events, callback || this, this);
            return this;
        },

        // Tell this object to stop listening to either specific events ... or
        // to every object it's currently listening to.
        stopListening: function(object, events, callback) {
            var listeners = this._listeners;
            if (!listeners) return;
            if (object) {
                object.off(events, callback, this);
                if (!events && !callback) delete listeners[object._listenerId];
            } else {
                for (var id in listeners) {
                    listeners[id].off(null, null, this);
                }
                this._listeners = {};
            }
            return this;
        }
    };

    // Aliases for backwards compatibility.
    Events.bind   = Events.on;
    Events.unbind = Events.off;

    // Allow the `Backbone` object to serve as a global event bus, for folks who
    // want global "pubsub" in a convenient place.
    _.extend(Backbone, Events);

    // Backbone.Model
    // --------------

    // Create a new model, with defined attributes. A client id (`cid`)
    // is automatically generated and assigned for you.
    var Model = Backbone.Model = function(attributes, options) {
        var defaults;
        var attrs = attributes || {};
        this.cid = _.uniqueId('c');
        this.changed = {};
        this.attributes = {};
        this._changes = [];
        if (options && options.collection) this.collection = options.collection;
        if (options && options.parse) attrs = this.parse(attrs);
        if (defaults = _.result(this, 'defaults')) _.defaults(attrs, defaults);
        this.set(attrs, {silent: true});
        this._currentAttributes = _.clone(this.attributes);
        this._previousAttributes = _.clone(this.attributes);
        this.initialize.apply(this, arguments);
    };

    // Attach all inheritable methods to the Model prototype.
    _.extend(Model.prototype, Events, {

        // A hash of attributes whose current and previous value differ.
        changed: null,

        // The default name for the JSON `id` attribute is `"id"`. MongoDB and
        // CouchDB users may want to set this to `"_id"`.
        idAttribute: 'id',

        // Initialize is an empty function by default. Override it with your own
        // initialization logic.
        initialize: function(){},

        // Return a copy of the model's `attributes` object.
        toJSON: function(options) {
            return _.clone(this.attributes);
        },

        // Proxy `Backbone.sync` by default.
        sync: function() {
            return Backbone.sync.apply(this, arguments);
        },

        // Get the value of an attribute.
        get: function(attr) {
            return this.attributes[attr];
        },

        // Get the HTML-escaped value of an attribute.
        escape: function(attr) {
            return _.escape(this.get(attr));
        },

        // Returns `true` if the attribute contains a value that is not null
        // or undefined.
        has: function(attr) {
            return this.get(attr) != null;
        },

        // Set a hash of model attributes on the object, firing `"change"` unless
        // you choose to silence it.
        set: function(key, val, options) {
            var attr, attrs;
            if (key == null) return this;

            // Handle both `"key", value` and `{key: value}` -style arguments.
            if (_.isObject(key)) {
                attrs = key;
                options = val;
            } else {
                (attrs = {})[key] = val;
            }

            // Extract attributes and options.
            var silent = options && options.silent;
            var unset = options && options.unset;

            // Run validation.
            if (!this._validate(attrs, options)) return false;

            // Check for changes of `id`.
            if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

            var now = this.attributes;

            // For each `set` attribute...
            for (attr in attrs) {
                val = attrs[attr];

                // Update or delete the current value, and track the change.
                unset ? delete now[attr] : now[attr] = val;
                this._changes.push(attr, val);
            }

            // Signal that the model's state has potentially changed, and we need
            // to recompute the actual changes.
            this._hasComputed = false;

            // Fire the `"change"` events.
            if (!silent) this.change(options);
            return this;
        },

        // Remove an attribute from the model, firing `"change"` unless you choose
        // to silence it. `unset` is a noop if the attribute doesn't exist.
        unset: function(attr, options) {
            return this.set(attr, void 0, _.extend({}, options, {unset: true}));
        },

        // Clear all attributes on the model, firing `"change"` unless you choose
        // to silence it.
        clear: function(options) {
            var attrs = {};
            for (var key in this.attributes) attrs[key] = void 0;
            return this.set(attrs, _.extend({}, options, {unset: true}));
        },

        // Fetch the model from the server. If the server's representation of the
        // model differs from its current attributes, they will be overriden,
        // triggering a `"change"` event.
        fetch: function(options) {
            options = options ? _.clone(options) : {};
            if (options.parse === void 0) options.parse = true;
            var model = this;
            var success = options.success;
            options.success = function(resp, status, xhr) {
                if (!model.set(model.parse(resp), options)) return false;
                if (success) success(model, resp, options);
            };
            return this.sync('read', this, options);
        },

        // Set a hash of model attributes, and sync the model to the server.
        // If the server returns an attributes hash that differs, the model's
        // state will be `set` again.
        save: function(key, val, options) {
            var attrs, current, done;

            // Handle both `"key", value` and `{key: value}` -style arguments.
            if (key == null || _.isObject(key)) {
                attrs = key;
                options = val;
            } else if (key != null) {
                (attrs = {})[key] = val;
            }
            options = options ? _.clone(options) : {};

            // If we're "wait"-ing to set changed attributes, validate early.
            if (options.wait) {
                if (attrs && !this._validate(attrs, options)) return false;
                current = _.clone(this.attributes);
            }

            // Regular saves `set` attributes before persisting to the server.
            var silentOptions = _.extend({}, options, {silent: true});
            if (attrs && !this.set(attrs, options.wait ? silentOptions : options)) {
                return false;
            }

            // Do not persist invalid models.
            if (!attrs && !this._validate(null, options)) return false;

            // After a successful server-side save, the client is (optionally)
            // updated with the server-side state.
            var model = this;
            var success = options.success;
            options.success = function(resp, status, xhr) {
                done = true;
                var serverAttrs = model.parse(resp);
                if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
                if (!model.set(serverAttrs, options)) return false;
                if (success) success(model, resp, options);
            };

            // Finish configuring and sending the Ajax request.
            var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
            if (method == 'patch') options.attrs = attrs;
            var xhr = this.sync(method, this, options);

            // When using `wait`, reset attributes to original values unless
            // `success` has been called already.
            if (!done && options.wait) {
                this.clear(silentOptions);
                this.set(current, silentOptions);
            }

            return xhr;
        },

        // Destroy this model on the server if it was already persisted.
        // Optimistically removes the model from its collection, if it has one.
        // If `wait: true` is passed, waits for the server to respond before removal.
        destroy: function(options) {
            options = options ? _.clone(options) : {};
            var model = this;
            var success = options.success;

            var destroy = function() {
                model.trigger('destroy', model, model.collection, options);
            };

            options.success = function(resp) {
                if (options.wait || model.isNew()) destroy();
                if (success) success(model, resp, options);
            };

            if (this.isNew()) {
                options.success();
                return false;
            }

            var xhr = this.sync('delete', this, options);
            if (!options.wait) destroy();
            return xhr;
        },

        // Default URL for the model's representation on the server -- if you're
        // using Backbone's restful methods, override this to change the endpoint
        // that will be called.
        url: function() {
            var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();
            if (this.isNew()) return base;
            return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);
        },

        // **parse** converts a response into the hash of attributes to be `set` on
        // the model. The default implementation is just to pass the response along.
        parse: function(resp) {
            return resp;
        },

        // Create a new model with identical attributes to this one.
        clone: function() {
            return new this.constructor(this.attributes);
        },

        // A model is new if it has never been saved to the server, and lacks an id.
        isNew: function() {
            return this.id == null;
        },

        // Call this method to manually fire a `"change"` event for this model and
        // a `"change:attribute"` event for each changed attribute.
        // Calling this will cause all objects observing the model to update.
        change: function(options) {
            var changing = this._changing;
            this._changing = true;

            // Generate the changes to be triggered on the model.
            var triggers = this._computeChanges(true);

            this._pending = !!triggers.length;

            for (var i = triggers.length - 2; i >= 0; i -= 2) {
                this.trigger('change:' + triggers[i], this, triggers[i + 1], options);
            }

            if (changing) return this;

            // Trigger a `change` while there have been changes.
            while (this._pending) {
                this._pending = false;
                this.trigger('change', this, options);
                this._previousAttributes = _.clone(this.attributes);
            }

            this._changing = false;
            return this;
        },

        // Determine if the model has changed since the last `"change"` event.
        // If you specify an attribute name, determine if that attribute has changed.
        hasChanged: function(attr) {
            if (!this._hasComputed) this._computeChanges();
            if (attr == null) return !_.isEmpty(this.changed);
            return _.has(this.changed, attr);
        },

        // Return an object containing all the attributes that have changed, or
        // false if there are no changed attributes. Useful for determining what
        // parts of a view need to be updated and/or what attributes need to be
        // persisted to the server. Unset attributes will be set to undefined.
        // You can also pass an attributes object to diff against the model,
        // determining if there *would be* a change.
        changedAttributes: function(diff) {
            if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
            var val, changed = false, old = this._previousAttributes;
            for (var attr in diff) {
                if (_.isEqual(old[attr], (val = diff[attr]))) continue;
                (changed || (changed = {}))[attr] = val;
            }
            return changed;
        },

        // Looking at the built up list of `set` attribute changes, compute how
        // many of the attributes have actually changed. If `loud`, return a
        // boiled-down list of only the real changes.
        _computeChanges: function(loud) {
            this.changed = {};
            var already = {};
            var triggers = [];
            // WARN: monkey patch for 0.9.9, will go away when upgrading
            // to future version of backbone
            var current = this._currentAttributes || {};
            var changes = this._changes;

            // Loop through the current queue of potential model changes.
            for (var i = changes.length - 2; i >= 0; i -= 2) {
                var key = changes[i], val = changes[i + 1];
                if (already[key]) continue;
                already[key] = true;

                // Check if the attribute has been modified since the last change,
                // and update `this.changed` accordingly. If we're inside of a `change`
                // call, also add a trigger to the list.
                if (current[key] !== val) {
                    this.changed[key] = val;
                    if (!loud) continue;
                    triggers.push(key, val);
                    current[key] = val;
                }
            }
            if (loud) this._changes = [];

            // Signals `this.changed` is current to prevent duplicate calls from `this.hasChanged`.
            this._hasComputed = true;
            return triggers;
        },

        // Get the previous value of an attribute, recorded at the time the last
        // `"change"` event was fired.
        previous: function(attr) {
            if (attr == null || !this._previousAttributes) return null;
            return this._previousAttributes[attr];
        },

        // Get all of the attributes of the model at the time of the previous
        // `"change"` event.
        previousAttributes: function() {
            return _.clone(this._previousAttributes);
        },

        // Run validation against the next complete set of model attributes,
        // returning `true` if all is well. If a specific `error` callback has
        // been passed, call that instead of firing the general `"error"` event.
        _validate: function(attrs, options) {
            if (!this.validate) return true;
            attrs = _.extend({}, this.attributes, attrs);
            var error = this.validate(attrs, options);
            if (!error) return true;
            if (options && options.error) options.error(this, error, options);
            this.trigger('error', this, error, options);
            return false;
        }

    });

    // Backbone.Collection
    // -------------------

    // Provides a standard collection class for our sets of models, ordered
    // or unordered. If a `comparator` is specified, the Collection will maintain
    // its models in sort order, as they're added and removed.
    var Collection = Backbone.Collection = function(models, options) {
        options || (options = {});
        if (options.model) this.model = options.model;
        if (options.comparator !== void 0) this.comparator = options.comparator;
        this._reset();
        this.initialize.apply(this, arguments);
        if (models) this.reset(models, _.extend({silent: true}, options));
    };

    // Define the Collection's inheritable methods.
    _.extend(Collection.prototype, Events, {

        // The default model for a collection is just a **Backbone.Model**.
        // This should be overridden in most cases.
        model: Model,

        // Initialize is an empty function by default. Override it with your own
        // initialization logic.
        initialize: function(){},

        // The JSON representation of a Collection is an array of the
        // models' attributes.
        toJSON: function(options) {
            return this.map(function(model){ return model.toJSON(options); });
        },

        // Proxy `Backbone.sync` by default.
        sync: function() {
            return Backbone.sync.apply(this, arguments);
        },

        // Add a model, or list of models to the set. Pass **silent** to avoid
        // firing the `add` event for every new model.
        add: function(models, options) {
            var i, args, length, model, existing, needsSort;
            var at = options && options.at;
            var sort = ((options && options.sort) == null ? true : options.sort);
            models = _.isArray(models) ? models.slice() : [models];

            // Turn bare objects into model references, and prevent invalid models
            // from being added.
            for (i = models.length - 1; i >= 0; i--) {
                if(!(model = this._prepareModel(models[i], options))) {
                    this.trigger("error", this, models[i], options);
                    models.splice(i, 1);
                    continue;
                }
                models[i] = model;

                existing = model.id != null && this._byId[model.id];
                // If a duplicate is found, prevent it from being added and
                // optionally merge it into the existing model.
                if (existing || this._byCid[model.cid]) {
                    if (options && options.merge && existing) {
                        existing.set(model.attributes, options);
                        needsSort = sort;
                    }
                    models.splice(i, 1);
                    continue;
                }

                // Listen to added models' events, and index models for lookup by
                // `id` and by `cid`.
                model.on('all', this._onModelEvent, this);
                this._byCid[model.cid] = model;
                if (model.id != null) this._byId[model.id] = model;
            }

            // See if sorting is needed, update `length` and splice in new models.
            if (models.length) needsSort = sort;
            this.length += models.length;
            args = [at != null ? at : this.models.length, 0];
            push.apply(args, models);
            splice.apply(this.models, args);

            // Sort the collection if appropriate.
            if (needsSort && this.comparator && at == null) this.sort({silent: true});

            if (options && options.silent) return this;

            // Trigger `add` events.
            while (model = models.shift()) {
                model.trigger('add', model, this, options);
            }

            return this;
        },

        // Remove a model, or a list of models from the set. Pass silent to avoid
        // firing the `remove` event for every model removed.
        remove: function(models, options) {
            var i, l, index, model;
            options || (options = {});
            models = _.isArray(models) ? models.slice() : [models];
            for (i = 0, l = models.length; i < l; i++) {
                model = this.get(models[i]);
                if (!model) continue;
                delete this._byId[model.id];
                delete this._byCid[model.cid];
                index = this.indexOf(model);
                this.models.splice(index, 1);
                this.length--;
                if (!options.silent) {
                    options.index = index;
                    model.trigger('remove', model, this, options);
                }
                this._removeReference(model);
            }
            return this;
        },

        // Add a model to the end of the collection.
        push: function(model, options) {
            model = this._prepareModel(model, options);
            this.add(model, _.extend({at: this.length}, options));
            return model;
        },

        // Remove a model from the end of the collection.
        pop: function(options) {
            var model = this.at(this.length - 1);
            this.remove(model, options);
            return model;
        },

        // Add a model to the beginning of the collection.
        unshift: function(model, options) {
            model = this._prepareModel(model, options);
            this.add(model, _.extend({at: 0}, options));
            return model;
        },

        // Remove a model from the beginning of the collection.
        shift: function(options) {
            var model = this.at(0);
            this.remove(model, options);
            return model;
        },

        // Slice out a sub-array of models from the collection.
        slice: function(begin, end) {
            return this.models.slice(begin, end);
        },

        // Get a model from the set by id.
        get: function(obj) {
            if (obj == null) return void 0;
            return this._byId[obj.id != null ? obj.id : obj] || this._byCid[obj.cid || obj];
        },

        // Get the model at the given index.
        at: function(index) {
            return this.models[index];
        },

        // Return models with matching attributes. Useful for simple cases of `filter`.
        where: function(attrs) {
            if (_.isEmpty(attrs)) return [];
            return this.filter(function(model) {
                for (var key in attrs) {
                    if (attrs[key] !== model.get(key)) return false;
                }
                return true;
            });
        },

        // Force the collection to re-sort itself. You don't need to call this under
        // normal circumstances, as the set will maintain sort order as each item
        // is added.
        sort: function(options) {
            if (!this.comparator) {
                throw new Error('Cannot sort a set without a comparator');
            }

            if (_.isString(this.comparator) || this.comparator.length === 1) {
                this.models = this.sortBy(this.comparator, this);
            } else {
                this.models.sort(_.bind(this.comparator, this));
            }

            if (!options || !options.silent) this.trigger('sort', this, options);
            return this;
        },

        // Pluck an attribute from each model in the collection.
        pluck: function(attr) {
            return _.invoke(this.models, 'get', attr);
        },

        // Smartly update a collection with a change set of models, adding,
        // removing, and merging as necessary.
        update: function(models, options) {
            var model, i, l, existing;
            var add = [], remove = [], modelMap = {};
            var idAttr = this.model.prototype.idAttribute;
            options = _.extend({add: true, merge: true, remove: true}, options);
            if (options.parse) models = this.parse(models);

            // Allow a single model (or no argument) to be passed.
            if (!_.isArray(models)) models = models ? [models] : [];

            // Proxy to `add` for this case, no need to iterate...
            if (options.add && !options.remove) return this.add(models, options);

            // Determine which models to add and merge, and which to remove.
            for (i = 0, l = models.length; i < l; i++) {
                model = models[i];
                existing = this.get(model.id || model.cid || model[idAttr]);
                if (options.remove && existing) modelMap[existing.cid] = true;
                if ((options.add && !existing) || (options.merge && existing)) {
                    add.push(model);
                }
            }
            if (options.remove) {
                for (i = 0, l = this.models.length; i < l; i++) {
                    model = this.models[i];
                    if (!modelMap[model.cid]) remove.push(model);
                }
            }

            // Remove models (if applicable) before we add and merge the rest.
            if (remove.length) this.remove(remove, options);
            if (add.length) this.add(add, options);
            return this;
        },

        // When you have more items than you want to add or remove individually,
        // you can reset the entire set with a new list of models, without firing
        // any `add` or `remove` events. Fires `reset` when finished.
        reset: function(models, options) {
            options || (options = {});
            if (options.parse) models = this.parse(models);
            for (var i = 0, l = this.models.length; i < l; i++) {
                this._removeReference(this.models[i]);
            }
            options.previousModels = this.models;
            this._reset();
            if (models) this.add(models, _.extend({silent: true}, options));
            if (!options.silent) this.trigger('reset', this, options);
            return this;
        },

        // Fetch the default set of models for this collection, resetting the
        // collection when they arrive. If `add: true` is passed, appends the
        // models to the collection instead of resetting.
        fetch: function(options) {
            options = options ? _.clone(options) : {};
            if (options.parse === void 0) options.parse = true;
            var collection = this;
            var success = options.success;
            options.success = function(resp, status, xhr) {
                var method = options.update ? 'update' : 'reset';
                collection[method](resp, options);
                if (success) success(collection, resp, options);
            };
            return this.sync('read', this, options);
        },

        // Create a new instance of a model in this collection. Add the model to the
        // collection immediately, unless `wait: true` is passed, in which case we
        // wait for the server to agree.
        create: function(model, options) {
            var collection = this;
            options = options ? _.clone(options) : {};
            model = this._prepareModel(model, options);
            if (!model) return false;
            if (!options.wait) collection.add(model, options);
            var success = options.success;
            options.success = function(model, resp, options) {
                if (options.wait) collection.add(model, options);
                if (success) success(model, resp, options);
            };
            model.save(null, options);
            return model;
        },

        // **parse** converts a response into a list of models to be added to the
        // collection. The default implementation is just to pass it through.
        parse: function(resp) {
            return resp;
        },

        // Create a new collection with an identical list of models as this one.
        clone: function() {
            return new this.constructor(this.models);
        },

        // Proxy to _'s chain. Can't be proxied the same way the rest of the
        // underscore methods are proxied because it relies on the underscore
        // constructor.
        chain: function() {
            return _(this.models).chain();
        },

        // Reset all internal state. Called when the collection is reset.
        _reset: function() {
            this.length = 0;
            this.models = [];
            this._byId  = {};
            this._byCid = {};
        },

        // Prepare a model or hash of attributes to be added to this collection.
        _prepareModel: function(attrs, options) {
            if (attrs instanceof Model) {
                if (!attrs.collection) attrs.collection = this;
                return attrs;
            }
            options || (options = {});
            options.collection = this;
            var model = new this.model(attrs, options);
            if (!model._validate(attrs, options)) return false;
            return model;
        },

        // Internal method to remove a model's ties to a collection.
        _removeReference: function(model) {
            if (this === model.collection) delete model.collection;
            model.off('all', this._onModelEvent, this);
        },

        // Internal method called every time a model in the set fires an event.
        // Sets need to update their indexes when models change ids. All other
        // events simply proxy through. "add" and "remove" events that originate
        // in other collections are ignored.
        _onModelEvent: function(event, model, collection, options) {
            if ((event === 'add' || event === 'remove') && collection !== this) return;
            if (event === 'destroy') this.remove(model, options);
            if (model && event === 'change:' + model.idAttribute) {
                delete this._byId[model.previous(model.idAttribute)];
                if (model.id != null) this._byId[model.id] = model;
            }
            this.trigger.apply(this, arguments);
        }

    });

    // Underscore methods that we want to implement on the Collection.
    var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
        'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
        'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
        'max', 'min', 'sortedIndex', 'toArray', 'size', 'first', 'head', 'take',
        'initial', 'rest', 'tail', 'last', 'without', 'indexOf', 'shuffle',
        'lastIndexOf', 'isEmpty'];

    // Mix in each Underscore method as a proxy to `Collection#models`.
    _.each(methods, function(method) {
        Collection.prototype[method] = function() {
            var args = slice.call(arguments);
            args.unshift(this.models);
            return _[method].apply(_, args);
        };
    });

    // Underscore methods that take a property name as an argument.
    var attributeMethods = ['groupBy', 'countBy', 'sortBy'];

    // Use attributes instead of properties.
    _.each(attributeMethods, function(method) {
        Collection.prototype[method] = function(value, context) {
            var iterator = _.isFunction(value) ? value : function(model) {
                return model.get(value);
            };
            return _[method](this.models, iterator, context);
        };
    });

    // Backbone.Router
    // ---------------

    // Routers map faux-URLs to actions, and fire events when routes are
    // matched. Creating a new one sets its `routes` hash, if not set statically.
    var Router = Backbone.Router = function(options) {
        options || (options = {});
        if (options.routes) this.routes = options.routes;
        this._bindRoutes();
        this.initialize.apply(this, arguments);
    };

    // Cached regular expressions for matching named param parts and splatted
    // parts of route strings.
    var optionalParam = /\((.*?)\)/g;
    var namedParam    = /:\w+/g;
    var splatParam    = /\*\w+/g;
    var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

    // Set up all inheritable **Backbone.Router** properties and methods.
    _.extend(Router.prototype, Events, {

        // Initialize is an empty function by default. Override it with your own
        // initialization logic.
        initialize: function(){},

        // Manually bind a single named route to a callback. For example:
        //
        //     this.route('search/:query/p:num', 'search', function(query, num) {
        //       ...
        //     });
        //
        route: function(route, name, callback) {
            if (!_.isRegExp(route)) route = this._routeToRegExp(route);
            if (!callback) callback = this[name];
            Backbone.history.route(route, _.bind(function(fragment) {
                var args = this._extractParameters(route, fragment);
                callback && callback.apply(this, args);
                this.trigger.apply(this, ['route:' + name].concat(args));
                Backbone.history.trigger('route', this, name, args);
            }, this));
            return this;
        },

        // Simple proxy to `Backbone.history` to save a fragment into the history.
        navigate: function(fragment, options) {
            Backbone.history.navigate(fragment, options);
            return this;
        },

        // Bind all defined routes to `Backbone.history`. We have to reverse the
        // order of the routes here to support behavior where the most general
        // routes can be defined at the bottom of the route map.
        _bindRoutes: function() {
            if (!this.routes) return;
            var route, routes = _.keys(this.routes);
            while ((route = routes.pop()) != null) {
                this.route(route, this.routes[route]);
            }
        },

        // Convert a route string into a regular expression, suitable for matching
        // against the current location hash.
        _routeToRegExp: function(route) {
            route = route.replace(escapeRegExp, '\\$&')
                .replace(optionalParam, '(?:$1)?')
                .replace(namedParam, '([^\/]+)')
                .replace(splatParam, '(.*?)');
            return new RegExp('^' + route + '$');
        },

        // Given a route, and a URL fragment that it matches, return the array of
        // extracted parameters.
        _extractParameters: function(route, fragment) {
            return route.exec(fragment).slice(1);
        }

    });

    // Backbone.History
    // ----------------

    // Handles cross-browser history management, based on URL fragments. If the
    // browser does not support `onhashchange`, falls back to polling.
    var History = Backbone.History = function() {
        this.handlers = [];
        _.bindAll(this, 'checkUrl');

        // Ensure that `History` can be used outside of the browser.
        if (typeof window !== 'undefined') {
            this.location = window.location;
            this.history = window.history;
        }
    };

    // Cached regex for stripping a leading hash/slash and trailing space.
    var routeStripper = /^[#\/]|\s+$/g;

    // Cached regex for stripping leading and trailing slashes.
    var rootStripper = /^\/+|\/+$/g;

    // Cached regex for detecting MSIE.
    var isExplorer = /msie [\w.]+/;

    // Cached regex for removing a trailing slash.
    var trailingSlash = /\/$/;

    // Has the history handling already been started?
    History.started = false;

    // Set up all inheritable **Backbone.History** properties and methods.
    _.extend(History.prototype, Events, {

        // The default interval to poll for hash changes, if necessary, is
        // twenty times a second.
        interval: 50,

        // Gets the true hash value. Cannot use location.hash directly due to bug
        // in Firefox where location.hash will always be decoded.
        getHash: function(window) {
            var match = (window || this).location.href.match(/#(.*)$/);
            return match ? match[1] : '';
        },

        // Get the cross-browser normalized URL fragment, either from the URL,
        // the hash, or the override.
        getFragment: function(fragment, forcePushState) {
            if (fragment == null) {
                if (this._hasPushState || !this._wantsHashChange || forcePushState) {
                    fragment = this.location.pathname;
                    // dan added following line
                    if (!this.root) this.root = '';
                    //
                    var root = this.root.replace(trailingSlash, '');
                    if (!fragment.indexOf(root)) fragment = fragment.substr(root.length);
                } else {
                    fragment = this.getHash();
                }
            }
            return fragment.replace(routeStripper, '');
        },

        // Start the hash change handling, returning `true` if the current URL matches
        // an existing route, and `false` otherwise.
        start: function(options) {
            if (History.started) throw new Error("Backbone.history has already been started");
            History.started = true;

            // Figure out the initial configuration. Do we need an iframe?
            // Is pushState desired ... is it available?
            this.options          = _.extend({}, {root: '/'}, this.options, options);
            this.root             = this.options.root;
            this._wantsHashChange = this.options.hashChange !== false;
            this._wantsPushState  = !!this.options.pushState;
            this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
            var fragment          = this.getFragment();
            var docMode           = document.documentMode;
            var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

            // Normalize root to always include a leading and trailing slash.
            this.root = ('/' + this.root + '/').replace(rootStripper, '/');

            if (oldIE && this._wantsHashChange) {
                this.iframe = Backbone.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
                this.navigate(fragment);
            }

            // Depending on whether we're using pushState or hashes, and whether
            // 'onhashchange' is supported, determine how we check the URL state.
            if (this._hasPushState) {
                Backbone.$(window).bind('popstate', this.checkUrl);
            } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
                Backbone.$(window).bind('hashchange', this.checkUrl);
            } else if (this._wantsHashChange) {
                this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
            }

            // Determine if we need to change the base url, for a pushState link
            // opened by a non-pushState browser.
            this.fragment = fragment;
            var loc = this.location;
            var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === this.root;

            // If we've started off with a route from a `pushState`-enabled browser,
            // but we're currently in a browser that doesn't support it...
            if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {
                this.fragment = this.getFragment(null, true);
                this.location.replace(this.root + this.location.search + '#' + this.fragment);
                // Return immediately as browser will do redirect to new url
                return true;

                // Or if we've started out with a hash-based route, but we're currently
                // in a browser where it could be `pushState`-based instead...
            } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {
                this.fragment = this.getHash().replace(routeStripper, '');
                this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);
            }

            if (!this.options.silent) return this.loadUrl();
        },

        // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
        // but possibly useful for unit testing Routers.
        stop: function() {
            Backbone.$(window).unbind('popstate', this.checkUrl).unbind('hashchange', this.checkUrl);
            clearInterval(this._checkUrlInterval);
            History.started = false;
        },

        // Add a route to be tested when the fragment changes. Routes added later
        // may override previous routes.
        route: function(route, callback) {
            this.handlers.unshift({route: route, callback: callback});
        },

        // Checks the current URL to see if it has changed, and if it has,
        // calls `loadUrl`, normalizing across the hidden iframe.
        checkUrl: function(e) {
            var current = this.getFragment();
            if (current === this.fragment && this.iframe) {
                current = this.getFragment(this.getHash(this.iframe));
            }
            if (current === this.fragment) return false;
            if (this.iframe) this.navigate(current);
            this.loadUrl() || this.loadUrl(this.getHash());
        },

        // Attempt to load the current URL fragment. If a route succeeds with a
        // match, returns `true`. If no defined routes matches the fragment,
        // returns `false`.
        loadUrl: function(fragmentOverride) {
            var fragment = this.fragment = this.getFragment(fragmentOverride);
            var matched = _.any(this.handlers, function(handler) {
                if (handler.route.test(fragment)) {
                    handler.callback(fragment);
                    return true;
                }
            });
            return matched;
        },

        // Save a fragment into the hash history, or replace the URL state if the
        // 'replace' option is passed. You are responsible for properly URL-encoding
        // the fragment in advance.
        //
        // The options object can contain `trigger: true` if you wish to have the
        // route callback be fired (not usually desirable), or `replace: true`, if
        // you wish to modify the current URL without adding an entry to the history.
        navigate: function(fragment, options) {
            if (!History.started) return false;
            if (!options || options === true) options = {trigger: options};
            fragment = this.getFragment(fragment || '');
            if (this.fragment === fragment) return;
            this.fragment = fragment;
            var url = this.root + fragment;

            // If pushState is available, we use it to set the fragment as a real URL.
            if (this._hasPushState) {
                this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

                // If hash changes haven't been explicitly disabled, update the hash
                // fragment to store history.
            } else if (this._wantsHashChange) {
                this._updateHash(this.location, fragment, options.replace);
                if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
                    // Opening and closing the iframe tricks IE7 and earlier to push a
                    // history entry on hash-tag change.  When replace is true, we don't
                    // want this.
                    if(!options.replace) this.iframe.document.open().close();
                    this._updateHash(this.iframe.location, fragment, options.replace);
                }

                // If you've told us that you explicitly don't want fallback hashchange-
                // based history, then `navigate` becomes a page refresh.
            } else {
                return this.location.assign(url);
            }
            if (options.trigger) this.loadUrl(fragment);
        },

        // Update the hash location, either replacing the current entry, or adding
        // a new one to the browser history.
        _updateHash: function(location, fragment, replace) {
            if (replace) {
                var href = location.href.replace(/(javascript:|#).*$/, '');
                location.replace(href + '#' + fragment);
            } else {
                // Some browsers require that `hash` contains a leading #.
                location.hash = '#' + fragment;
            }
        }

    });

    // Create the default Backbone.history.
    Backbone.history = new History;

    // Backbone.View
    // -------------

    // Creating a Backbone.View creates its initial element outside of the DOM,
    // if an existing element is not provided...
    var View = Backbone.View = function(options) {
        this.cid = _.uniqueId('view');
        this._configure(options || {});
        this._ensureElement();
        this.initialize.apply(this, arguments);
        this.delegateEvents();
    };

    // Cached regex to split keys for `delegate`.
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;

    // List of view options to be merged as properties.
    var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

    // Set up all inheritable **Backbone.View** properties and methods.
    _.extend(View.prototype, Events, {

        // The default `tagName` of a View's element is `"div"`.
        tagName: 'div',

        // jQuery delegate for element lookup, scoped to DOM elements within the
        // current view. This should be prefered to global lookups where possible.
        $: function(selector) {
            return this.$el.find(selector);
        },

        // Initialize is an empty function by default. Override it with your own
        // initialization logic.
        initialize: function(){},

        // **render** is the core function that your view should override, in order
        // to populate its element (`this.el`), with the appropriate HTML. The
        // convention is for **render** to always return `this`.
        render: function() {
            return this;
        },

        // Remove this view by taking the element out of the DOM, and removing any
        // applicable Backbone.Events listeners.
        remove: function() {
            this.$el.remove();
            this.stopListening();
            return this;
        },

        // For small amounts of DOM Elements, where a full-blown template isn't
        // needed, use **make** to manufacture elements, one at a time.
        //
        //     var el = this.make('li', {'class': 'row'}, this.model.escape('title'));
        //
        make: function(tagName, attributes, content) {
            var el = document.createElement(tagName);
            if (attributes) Backbone.$(el).attr(attributes);
            if (content != null) Backbone.$(el).html(content);
            return el;
        },

        // Change the view's element (`this.el` property), including event
        // re-delegation.
        setElement: function(element, delegate) {
            if (this.$el) this.undelegateEvents();
            this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
            this.el = this.$el[0];
            if (delegate !== false) this.delegateEvents();
            return this;
        },

        // Set callbacks, where `this.events` is a hash of
        //
        // *{"event selector": "callback"}*
        //
        //     {
        //       'mousedown .title':  'edit',
        //       'click .button':     'save'
        //       'click .open':       function(e) { ... }
        //     }
        //
        // pairs. Callbacks will be bound to the view, with `this` set properly.
        // Uses event delegation for efficiency.
        // Omitting the selector binds the event to `this.el`.
        // This only works for delegate-able events: not `focus`, `blur`, and
        // not `change`, `submit`, and `reset` in Internet Explorer.
        delegateEvents: function(events) {
            if (!(events || (events = _.result(this, 'events')))) return;
            this.undelegateEvents();
            for (var key in events) {
                var method = events[key];
                if (!_.isFunction(method)) method = this[events[key]];
                if (!method) throw new Error('Method "' + events[key] + '" does not exist');
                var match = key.match(delegateEventSplitter);
                var eventName = match[1], selector = match[2];
                method = _.bind(method, this);
                eventName += '.delegateEvents' + this.cid;
                if (selector === '') {
                    this.$el.bind(eventName, method);
                } else {
                    this.$el.delegate(selector, eventName, method);
                }
            }
        },

        // Clears all callbacks previously bound to the view with `delegateEvents`.
        // You usually don't need to use this, but may wish to if you have multiple
        // Backbone views attached to the same DOM element.
        undelegateEvents: function() {
            this.$el.unbind('.delegateEvents' + this.cid);
        },

        // Performs the initial configuration of a View with a set of options.
        // Keys with special meaning *(model, collection, id, className)*, are
        // attached directly to the view.
        _configure: function(options) {
            if (this.options) options = _.extend({}, _.result(this, 'options'), options);
            _.extend(this, _.pick(options, viewOptions));
            this.options = options;
        },

        // Ensure that the View has a DOM element to render into.
        // If `this.el` is a string, pass it through `$()`, take the first
        // matching element, and re-assign it to `el`. Otherwise, create
        // an element from the `id`, `className` and `tagName` properties.
        _ensureElement: function() {
            if (!this.el) {
                var attrs = _.extend({}, _.result(this, 'attributes'));
                if (this.id) attrs.id = _.result(this, 'id');
                if (this.className) attrs['class'] = _.result(this, 'className');
                this.setElement(this.make(_.result(this, 'tagName'), attrs), false);
            } else {
                this.setElement(_.result(this, 'el'), false);
            }
        }

    });

    // Backbone.sync
    // -------------

    // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
    var methodMap = {
        'create': 'POST',
        'update': 'PUT',
        'patch':  'PATCH',
        'delete': 'DELETE',
        'read':   'GET'
    };

    // Override this function to change the manner in which Backbone persists
    // models to the server. You will be passed the type of request, and the
    // model in question. By default, makes a RESTful Ajax request
    // to the model's `url()`. Some possible customizations could be:
    //
    // * Use `setTimeout` to batch rapid-fire updates into a single request.
    // * Send up the models as XML instead of JSON.
    // * Persist models via WebSockets instead of Ajax.
    //
    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
    // as `POST`, with a `_method` parameter containing the true HTTP method,
    // as well as all requests with the body as `application/x-www-form-urlencoded`
    // instead of `application/json` with the model in a param named `model`.
    // Useful when interfacing with server-side languages like **PHP** that make
    // it difficult to read the body of `PUT` requests.
    Backbone.sync = function(method, model, options) {
        var type = methodMap[method];

        // Default options, unless specified.
        _.defaults(options || (options = {}), {
            emulateHTTP: Backbone.emulateHTTP,
            emulateJSON: Backbone.emulateJSON
        });

        // Default JSON-request options.
        var params = {type: type, dataType: 'json'};

        // Ensure that we have a URL.
        if (!options.url) {
            params.url = _.result(model, 'url') || urlError();
        }

        // Ensure that we have the appropriate request data.
        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
            params.contentType = 'application/json';
            params.data = JSON.stringify(options.attrs || model.toJSON(options));
        }

        // For older servers, emulate JSON by encoding the request into an HTML-form.
        if (options.emulateJSON) {
            params.contentType = 'application/x-www-form-urlencoded';
            params.data = params.data ? {model: params.data} : {};
        }

        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
        // And an `X-HTTP-Method-Override` header.
        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
            params.type = 'POST';
            if (options.emulateJSON) params.data._method = type;
            var beforeSend = options.beforeSend;
            options.beforeSend = function(xhr) {
                xhr.setRequestHeader('X-HTTP-Method-Override', type);
                if (beforeSend) return beforeSend.apply(this, arguments);
            };
        }

        // Don't process data on a non-GET request.
        if (params.type !== 'GET' && !options.emulateJSON) {
            params.processData = false;
        }

        var success = options.success;
        options.success = function(resp, status, xhr) {
            if (success) success(resp, status, xhr);
            model.trigger('sync', model, resp, options);
        };

        var error = options.error;
        options.error = function(xhr, status, thrown) {
            if (error) error(model, xhr, options);
            model.trigger('error', model, xhr, options);
        };

        // Make the request, allowing the user to override any Ajax options.
        var xhr = Backbone.ajax(_.extend(params, options));
        model.trigger('request', model, xhr, options);
        return xhr;
    };

    // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
    Backbone.ajax = function() {
        return Backbone.$.ajax.apply(Backbone.$, arguments);
    };

    // Helpers
    // -------

    // Helper function to correctly set up the prototype chain, for subclasses.
    // Similar to `goog.inherits`, but uses a hash of prototype properties and
    // class properties to be extended.
    var extend = function(protoProps, staticProps) {
        var parent = this;
        var child;

        // The constructor function for the new subclass is either defined by you
        // (the "constructor" property in your `extend` definition), or defaulted
        // by us to simply call the parent's constructor.
        if (protoProps && _.has(protoProps, 'constructor')) {
            child = protoProps.constructor;
        } else {
            child = function(){ parent.apply(this, arguments); };
        }

        // Add static properties to the constructor function, if supplied.
        _.extend(child, parent, staticProps);

        // Set the prototype chain to inherit from `parent`, without calling
        // `parent`'s constructor function.
        var Surrogate = function(){ this.constructor = child; };
        Surrogate.prototype = parent.prototype;
        child.prototype = new Surrogate;

        // Add prototype properties (instance properties) to the subclass,
        // if supplied.
        if (protoProps) _.extend(child.prototype, protoProps);

        // Set a convenience property in case the parent's prototype is needed
        // later.
        child.__super__ = parent.prototype;

        return child;
    };

    // Set up inheritance for the model, collection, router, view and history.
    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

    // Throw an error when a URL is needed, and none is supplied.
    var urlError = function() {
        throw new Error('A "url" property or function must be specified');
    };

}).call(this);
/*
 Copyright (c) 2011-2013 @WalmartLabs

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to
 deal in the Software without restriction, including without limitation the
 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 sell copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
 */

;;
(function() {

    /*global cloneInheritVars, createInheritVars, createRegistryWrapper, getValue, inheritVars */

//support zepto.forEach on jQuery
    if (!$.fn.forEach) {
        $.fn.forEach = function(iterator, context) {
            $.fn.each.call(this, function(index) {
                iterator.call(context || this, this, index);
            });
        };
    }

    var viewNameAttributeName = 'data-view-name',
        viewCidAttributeName = 'data-view-cid',
        viewHelperAttributeName = 'data-view-helper';

//view instances
    var viewsIndexedByCid = {};

    if (!Handlebars.templates) {
        Handlebars.templates = {};
    }

    var Thorax = this.Thorax = {
        VERSION: '2.0.0rc4',
        templatePathPrefix: '',
        //view classes
        Views: {},
        //certain error prone pieces of code (on Android only it seems)
        //are wrapped in a try catch block, then trigger this handler in
        //the catch, with the name of the function or event that was
        //trying to be executed. Override this with a custom handler
        //to debug / log / etc
        onException: function(name, err) {
            throw err;
        },
        //deprecated, here to ensure existing projects aren't mucked with
        templates: Handlebars.templates
    };

    Thorax.View = Backbone.View.extend({
        constructor: function() {
            var response = Backbone.View.apply(this, arguments);
            _.each(inheritVars, function(obj) {
                if (obj.ctor) {
                    obj.ctor.call(this, response);
                }
            }, this);
            return response;
        },
        _configure: function(options) {
            var self = this;

            this._objectOptionsByCid = {};
            this._boundDataObjectsByCid = {};

            // Setup object event tracking
            _.each(inheritVars, function(obj) {
                self[obj.name] = [];
            });

            viewsIndexedByCid[this.cid] = this;
            this.children = {};
            this._renderCount = 0;

            //this.options is removed in Thorax.View, we merge passed
            //properties directly with the view and template context
            _.extend(this, options || {});

            // Setup helpers
            bindHelpers.call(this);

            _.each(inheritVars, function(obj) {
                if (obj.configure) {
                    obj.configure.call(this);
                }
            }, this);
        },

        setElement : function() {
            var response = Backbone.View.prototype.setElement.apply(this, arguments);
            this.name && this.$el.attr(viewNameAttributeName, this.name);
            this.$el.attr(viewCidAttributeName, this.cid);
            return response;
        },

        _addChild: function(view) {
            this.children[view.cid] = view;
            if (!view.parent) {
                view.parent = this;
            }
            this.trigger('child', view);
            return view;
        },

        _removeChild: function(view) {
            delete this.children[view.cid];
            view.parent = null;
            return view;
        },

        destroy: function(options) {
            options = _.defaults(options || {}, {
                children: true
            });
            _.each(this._boundDataObjectsByCid, this.unbindDataObject, this);
            this.trigger('destroyed');
            delete viewsIndexedByCid[this.cid];
            _.each(this.children, function(child) {
                this._removeChild(child);
                if (options.children) {
                    child.destroy();
                }
            }, this);

            if (this.parent) {
                this.parent._removeChild(this);
            }

            if (this.el) {
                this.undelegateEvents();
                this.remove(); // Will call stopListening()
            }

            // Absolute worst case scenario, kill off some known fields to minimize the impact
            // of being retained.
            this.el = this.$el = undefined;
            this.parent = undefined;
            this.model = this.collection = this._collection = undefined;
            this._helperOptions = undefined;
        },

        render: function(output) {
            if (this._rendering) {
                // Nested rendering of the same view instances can lead to some very nasty issues with
                // the root render process overwriting any updated data that may have been output in the child
                // execution. If in a situation where you need to rerender in response to an event that is
                // triggered sync in the rendering lifecycle it's recommended to defer the subsequent render
                // or refactor so that all preconditions are known prior to exec.
                throw new Error('nested-render');
            }

            this._previousHelpers = _.filter(this.children, function(child) { return child._helperOptions; });

            var children = {};
            _.each(this.children, function(child, key) {
                if (!child._helperOptions) {
                    children[key] = child;
                }
            });
            this.children = children;

            this._rendering = true;

            try{
                if (_.isUndefined(output) || (!_.isElement(output) && !Thorax.Util.is$(output) && !(output && output.el) && !_.isString(output) && !_.isFunction(output))) {
                    // try one more time to assign the template, if we don't
                    // yet have one we must raise
                    assignTemplate.call(this, 'template', {
                        required: true
                    });
                    output = this.renderTemplate(this.template);
                } else if (_.isFunction(output)) {
                    output = this.renderTemplate(output);
                }
            } finally {
                this._rendering = false;
            }

            // Destroy any helpers that may be lingering
            _.each(this._previousHelpers, function(child) {
                child.destroy();
                child.parent = undefined;
            });
            this._previousHelpers = undefined;

            //accept a view, string, Handlebars.SafeString or DOM element
            this.html((output && output.el) || (output && output.string) || output);
            ++this._renderCount;
            this.trigger('rendered');
            return output;
        },

        context: function() {
            return _.extend({}, (this.model && this.model.attributes) || {});
        },

        _getContext: function() {
            return _.extend({}, this, getValue(this, 'context') || {});
        },

        // Private variables in handlebars / options.data in template helpers
        _getData: function(data) {
            return {
                view: this,
                cid: _.uniqueId('t'),
                yield: function() {
                    // fn is seeded by template helper passing context to data
                    return data.fn && data.fn(data);
                }
            };
        },

        _getHelpers: function() {
            if (this.helpers) {
                return _.extend({}, Handlebars.helpers, this.helpers);
            } else {
                return Handlebars.helpers;
            }

        },

        renderTemplate: function(file, context, ignoreErrors) {
            var template;
            context = context || this._getContext();
            if (_.isFunction(file)) {
                template = file;
            } else {
                template = Thorax.Util.getTemplate(file, ignoreErrors);
            }
            if (!template) {
                return '';
            } else {
                return template(context, {
                    helpers: this._getHelpers(),
                    data: this._getData(context)
                });
            }
        },

        ensureRendered: function() {
            !this._renderCount && this.render();
        },
        shouldRender: function(flag) {
            // Render if flag is truthy or if we have already rendered and flag is undefined/null
            return flag || (flag == null && this._renderCount);
        },
        conditionalRender: function(flag) {
            if (this.shouldRender(flag)) {
                this.render();
            }
        },

        appendTo: function(el) {
            this.ensureRendered();
            $(el).append(this.el);
            this.trigger('ready', {target: this});
        },

        html: function(html) {
            if (_.isUndefined(html)) {
                return this.el.innerHTML;
            } else {
                // Event for IE element fixes
                this.trigger('before:append');
                var element = this._replaceHTML(html);
                this.trigger('append');
                return element;
            }
        },

        _replaceHTML: function(html) {
            this.el.innerHTML = "";
            return this.$el.append(html);
        },

        _anchorClick: function(event) {
            var target = $(event.currentTarget),
                href = target.attr('href');
            // Route anything that starts with # or / (excluding //domain urls)
            if (href && (href[0] === '#' || (href[0] === '/' && href[1] !== '/'))) {
                Backbone.history.navigate(href, {
                    trigger: true
                });
                return false;
            }
            return true;
        }
    });

    Thorax.View.extend = function() {
        createInheritVars(this);

        var child = Backbone.View.extend.apply(this, arguments);
        child.__parent__ = this;

        resetInheritVars(child);

        return child;
    };

    createRegistryWrapper(Thorax.View, Thorax.Views);

    function bindHelpers() {
        if (this.helpers) {
            _.each(this.helpers, function(helper, name) {
                var view = this;
                this.helpers[name] = function() {
                    var args = _.toArray(arguments),
                        options = _.last(args);
                    options.context = this;
                    return helper.apply(view, args);
                };
            }, this);
        }
    }

//$(selector).view() helper
    $.fn.view = function(options) {
        options = _.defaults(options || {}, {
            helper: true
        });
        var selector = '[' + viewCidAttributeName + ']';
        if (!options.helper) {
            selector += ':not([' + viewHelperAttributeName + '])';
        }
        var el = $(this).closest(selector);
        return (el && viewsIndexedByCid[el.attr(viewCidAttributeName)]) || false;
    };

    ;;
    /*global createRegistryWrapper:true, cloneEvents: true */
    function createRegistryWrapper(klass, hash) {
        var $super = klass.extend;
        klass.extend = function() {
            var child = $super.apply(this, arguments);
            if (child.prototype.name) {
                hash[child.prototype.name] = child;
            }
            return child;
        };
    }

    function registryGet(object, type, name, ignoreErrors) {
        var target = object[type],
            value;
        if (_.indexOf(name, '.') >= 0) {
            var bits = name.split(/\./);
            name = bits.pop();
            _.each(bits, function(key) {
                target = target[key];
            });
        }
        target && (value = target[name]);
        if (!value && !ignoreErrors) {
            throw new Error(type + ': ' + name + ' does not exist.');
        } else {
            return value;
        }
    }

    function assignTemplate(attributeName, options) {
        var template;
        // if attribute is the name of template to fetch
        if (_.isString(this[attributeName])) {
            template = Thorax.Util.getTemplate(this[attributeName], true);
            // else try and fetch the template based on the name
        } else if (this.name && !_.isFunction(this[attributeName])) {
            template = Thorax.Util.getTemplate(this.name + (options.extension || ''), true);
        }
        // CollectionView and LayoutView have a defaultTemplate that may be used if none
        // was found, regular views must have a template if render() is called
        if (!template && attributeName === 'template' && this._defaultTemplate) {
            template = this._defaultTemplate;
        }
        // if we found something, assign it
        if (template && !_.isFunction(this[attributeName])) {
            this[attributeName] = template;
        }
        // if nothing was found and it's required, throw
        if (options.required && !_.isFunction(this[attributeName])) {
            throw new Error('View ' + (this.name || this.cid) + ' requires: ' + attributeName);
        }
    }

// getValue is used instead of _.result because we
// need an extra scope parameter, and will minify
// better than _.result
    function getValue(object, prop, scope) {
        if (!(object && object[prop])) {
            return null;
        }
        return _.isFunction(object[prop])
            ? object[prop].call(scope || object)
            : object[prop];
    }

    var inheritVars = {};
    function createInheritVars(self) {
        // Ensure that we have our static event objects
        _.each(inheritVars, function(obj) {
            if (!self[obj.name]) {
                self[obj.name] = [];
            }
        });
    }
    function resetInheritVars(self) {
        // Ensure that we have our static event objects
        _.each(inheritVars, function(obj) {
            self[obj.name] = [];
        });
    }
    function walkInheritTree(source, fieldName, isStatic, callback) {
        var tree = [];
        if (_.has(source, fieldName)) {
            tree.push(source);
        }
        var iterate = source;
        if (isStatic) {
            while (iterate = iterate.__parent__) {
                if (_.has(iterate, fieldName)) {
                    tree.push(iterate);
                }
            }
        } else {
            iterate = iterate.constructor;
            while (iterate) {
                if (iterate.prototype && _.has(iterate.prototype, fieldName)) {
                    tree.push(iterate.prototype);
                }
                iterate = iterate.__super__ && iterate.__super__.constructor;
            }
        }

        var i = tree.length;
        while (i--) {
            _.each(getValue(tree[i], fieldName, source), callback);
        }
    }

    function objectEvents(target, eventName, callback, context) {
        if (_.isObject(callback)) {
            var spec = inheritVars[eventName];
            if (spec && spec.event) {
                addEvents(target['_' + eventName + 'Events'], callback, context);
                return true;
            }
        }
    }
    function addEvents(target, source, context) {
        _.each(source, function(callback, eventName) {
            if (_.isArray(callback)) {
                _.each(callback, function(cb) {
                    target.push([eventName, cb, context]);
                });
            } else {
                target.push([eventName, callback, context]);
            }
        });
    }

    function getOptionsData(options) {
        if (!options || !options.data) {
            throw new Error('Handlebars template compiled without data, use: Handlebars.compile(template, {data: true})');
        }
        return options.data;
    }

// These whitelisted attributes will be the only ones passed
// from the options hash to Thorax.Util.tag
    var htmlAttributesToCopy = ['id', 'className', 'tagName'];

// In helpers "tagName" or "tag" may be specified, as well
// as "class" or "className". Normalize to "tagName" and
// "className" to match the property names used by Backbone
// jQuery, etc. Special case for "className" in
// Thorax.Util.tag: will be rewritten as "class" in
// generated HTML.
    function normalizeHTMLAttributeOptions(options) {
        if (options.tag) {
            options.tagName = options.tag;
            delete options.tag;
        }
        if (options['class']) {
            options.className = options['class'];
            delete options['class'];
        }
    }

    Thorax.Util = {
        getViewInstance: function(name, attributes) {
            attributes = attributes || {};
            if (_.isString(name)) {
                var Klass = registryGet(Thorax, 'Views', name, false);
                return Klass.cid ? _.extend(Klass, attributes || {}) : new Klass(attributes);
            } else if (_.isFunction(name)) {
                return new name(attributes);
            } else {
                return name;
            }
        },

        getTemplate: function(file, ignoreErrors) {
            //append the template path prefix if it is missing
            var pathPrefix = Thorax.templatePathPrefix,
                template;
            if (pathPrefix && file.substr(0, pathPrefix.length) !== pathPrefix) {
                file = pathPrefix + file;
            }

            // Without extension
            file = file.replace(/\.handlebars$/, '');
            template = Handlebars.templates[file];
            if (!template) {
                // With extension
                file = file + '.handlebars';
                template = Handlebars.templates[file];
            }

            if (!template && !ignoreErrors) {
                throw new Error('templates: ' + file + ' does not exist.');
            }
            return template;
        },

        //'selector' is not present in $('<p></p>')
        //TODO: investigage a better detection method
        is$: function(obj) {
            return _.isObject(obj) && ('length' in obj);
        },
        expandToken: function(input, scope) {
            if (input && input.indexOf && input.indexOf('{{') >= 0) {
                var re = /(?:\{?[^{]+)|(?:\{\{([^}]+)\}\})/g,
                    match,
                    ret = [];
                function deref(token, scope) {
                    if (token.match(/^("|')/) && token.match(/("|')$/)) {
                        return token.replace(/(^("|')|('|")$)/g, '');
                    }
                    var segments = token.split('.'),
                        len = segments.length;
                    for (var i = 0; scope && i < len; i++) {
                        if (segments[i] !== 'this') {
                            scope = scope[segments[i]];
                        }
                    }
                    return scope;
                }
                while (match = re.exec(input)) {
                    if (match[1]) {
                        var params = match[1].split(/\s+/);
                        if (params.length > 1) {
                            var helper = params.shift();
                            params = _.map(params, function(param) { return deref(param, scope); });
                            if (Handlebars.helpers[helper]) {
                                ret.push(Handlebars.helpers[helper].apply(scope, params));
                            } else {
                                // If the helper is not defined do nothing
                                ret.push(match[0]);
                            }
                        } else {
                            ret.push(deref(params[0], scope));
                        }
                    } else {
                        ret.push(match[0]);
                    }
                }
                input = ret.join('');
            }
            return input;
        },
        tag: function(attributes, content, scope) {
            var htmlAttributes = _.omit(attributes, 'tagName'),
                tag = attributes.tagName || 'div';
            return '<' + tag + ' ' + _.map(htmlAttributes, function(value, key) {
                if (_.isUndefined(value) || key === 'expand-tokens') {
                    return '';
                }
                var formattedValue = value;
                if (scope) {
                    formattedValue = Thorax.Util.expandToken(value, scope);
                }
                return (key === 'className' ? 'class' : key) + '="' + Handlebars.Utils.escapeExpression(formattedValue) + '"';
            }).join(' ') + '>' + (_.isUndefined(content) ? '' : content) + '</' + tag + '>';
        }
    };

    ;;
    /*global createInheritVars, inheritVars */
    Thorax.Mixins = {};

    inheritVars.mixins = {
        name: 'mixins',
        configure: function() {
            _.each(this.constructor.mixins, this.mixin, this);
            _.each(this.mixins, this.mixin, this);
        }
    };

    _.extend(Thorax.View, {
        mixin: function(mixin) {
            createInheritVars(this);
            this.mixins.push(mixin);
        },
        registerMixin: function(name, callback, methods) {
            Thorax.Mixins[name] = [callback, methods];
        }
    });

    Thorax.View.prototype.mixin = function(name) {
        if (!this._appliedMixins) {
            this._appliedMixins = [];
        }
        if (_.indexOf(this._appliedMixins, name) === -1) {
            this._appliedMixins.push(name);
            if (_.isFunction(name)) {
                name.call(this);
            } else {
                var mixin = Thorax.Mixins[name];
                _.extend(this, mixin[1]);
                //mixin callback may be an array of [callback, arguments]
                if (_.isArray(mixin[0])) {
                    mixin[0][0].apply(this, mixin[0][1]);
                } else {
                    mixin[0].apply(this, _.toArray(arguments).slice(1));
                }
            }
        }
    };

    ;;
    /*global createInheritVars, inheritVars, objectEvents, walkInheritTree */
// Save a copy of the _on method to call as a $super method
    var _on = Thorax.View.prototype.on;

    inheritVars.event = {
        name: '_events',

        configure: function() {
            var self = this;
            walkInheritTree(this.constructor, '_events', true, function(event) {
                self.on.apply(self, event);
            });
            walkInheritTree(this, 'events', false, function(handler, eventName) {
                self.on(eventName, handler, self);
            });
        }
    };

    _.extend(Thorax.View, {
        on: function(eventName, callback) {
            createInheritVars(this);

            if (objectEvents(this, eventName, callback)) {
                return this;
            }

            //accept on({"rendered": handler})
            if (_.isObject(eventName)) {
                _.each(eventName, function(value, key) {
                    this.on(key, value);
                }, this);
            } else {
                //accept on({"rendered": [handler, handler]})
                if (_.isArray(callback)) {
                    _.each(callback, function(cb) {
                        this._events.push([eventName, cb]);
                    }, this);
                    //accept on("rendered", handler)
                } else {
                    this._events.push([eventName, callback]);
                }
            }
            return this;
        }
    });

    _.extend(Thorax.View.prototype, {
        on: function(eventName, callback, context) {
            if (objectEvents(this, eventName, callback, context)) {
                return this;
            }

            if (_.isObject(eventName) && arguments.length < 3) {
                //accept on({"rendered": callback})
                _.each(eventName, function(value, key) {
                    this.on(key, value, callback || this);    // callback is context in this form of the call
                }, this);
            } else {
                //accept on("rendered", callback, context)
                //accept on("click a", callback, context)
                _.each((_.isArray(callback) ? callback : [callback]), function(callback) {
                    var params = eventParamsFromEventItem.call(this, eventName, callback, context || this);
                    if (params.type === 'DOM') {
                        //will call _addEvent during delegateEvents()
                        if (!this._eventsToDelegate) {
                            this._eventsToDelegate = [];
                        }
                        this._eventsToDelegate.push(params);
                    } else {
                        this._addEvent(params);
                    }
                }, this);
            }
            return this;
        },
        delegateEvents: function(events) {
            this.undelegateEvents();
            if (events) {
                if (_.isFunction(events)) {
                    events = events.call(this);
                }
                this._eventsToDelegate = [];
                this.on(events);
            }
            this._eventsToDelegate && _.each(this._eventsToDelegate, this._addEvent, this);
        },
        //params may contain:
        //- name
        //- originalName
        //- selector
        //- type "view" || "DOM"
        //- handler
        _addEvent: function(params) {
            if (params.type === 'view') {
                _.each(params.name.split(/\s+/), function(name) {
                    // Must pass context here so stopListening will clean up our junk
                    _on.call(this, name, bindEventHandler.call(this, 'view-event:', params), params.context || this);
                }, this);
            } else {
                var boundHandler = bindEventHandler.call(this, 'dom-event:', params);
                if (!params.nested) {
                    boundHandler = containHandlerToCurentView(boundHandler, this.cid);
                }

                var name = params.name + '.delegateEvents' + this.cid;
                if (params.selector) {
                    this.$el.on(name, params.selector, boundHandler);
                } else {
                    this.$el.on(name, boundHandler);
                }
            }
        }
    });

// When view is ready trigger ready event on all
// children that are present, then register an
// event that will trigger ready on new children
// when they are added
    Thorax.View.on('ready', function(options) {
        if (!this._isReady) {
            this._isReady = true;
            function triggerReadyOnChild(child) {
                child.trigger('ready', options);
            }
            _.each(this.children, triggerReadyOnChild);
            this.on('child', triggerReadyOnChild);
        }
    });

    var eventSplitter = /^(nested\s+)?(\S+)(?:\s+(.+))?/;

    var domEvents = [],
        domEventRegexp;
    function pushDomEvents(events) {
        domEvents.push.apply(domEvents, events);
        domEventRegexp = new RegExp('^(nested\\s+)?(' + domEvents.join('|') + ')(?:\\s|$)');
    }
    pushDomEvents([
        'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout',
        'touchstart', 'touchend', 'touchmove',
        'click', 'dblclick',
        'keyup', 'keydown', 'keypress',
        'submit', 'change',
        'focus', 'blur'
    ]);

    function containHandlerToCurentView(handler, cid) {
        return function(event) {
            var view = $(event.target).view({helper: false});
            if (view && view.cid === cid) {
                event.originalContext = this;
                handler(event);
            }
        };
    }

    function bindEventHandler(eventName, params) {
        eventName += params.originalName;

        var callback = params.handler,
            method = _.isFunction(callback) ? callback : this[callback];
        if (!method) {
            throw new Error('Event "' + callback + '" does not exist ' + (this.name || this.cid) + ':' + eventName);
        }

        var context = params.context || this;
        function ret() {
            try {
                method.apply(context, arguments);
            } catch (e) {
                Thorax.onException('thorax-exception: ' + (context.name || context.cid) + ':' + eventName, e);
            }
        }
        // Backbone will delegate to _callback in off calls so we should still be able to support
        // calling off on specific handlers.
        ret._callback = method;
        return ret;
    }

    function eventParamsFromEventItem(name, handler, context) {
        var params = {
            originalName: name,
            handler: _.isString(handler) ? this[handler] : handler
        };
        if (name.match(domEventRegexp)) {
            var match = eventSplitter.exec(name);
            params.nested = !!match[1];
            params.name = match[2];
            params.type = 'DOM';
            params.selector = match[3];
        } else {
            params.name = name;
            params.type = 'view';
        }
        params.context = context;
        return params;
    }

    ;;
    /*global getOptionsData, htmlAttributesToCopy, normalizeHTMLAttributeOptions, viewHelperAttributeName */
    var viewPlaceholderAttributeName = 'data-view-tmp',
        viewTemplateOverrides = {};

// Will be shared by HelperView and CollectionHelperView
    var helperViewPrototype = {
        _ensureElement: function() {
            Thorax.View.prototype._ensureElement.apply(this, arguments);
            this.$el.attr(viewHelperAttributeName, this._helperName);
        },
        _getContext: function() {
            return this.parent._getContext.apply(this.parent, arguments);
        }
    };

    Thorax.HelperView = Thorax.View.extend(helperViewPrototype);

// Ensure nested inline helpers will always have this.parent
// set to the view containing the template
    function getParent(parent) {
        // The `view` helper is a special case as it embeds
        // a view instead of creating a new one
        while (parent._helperName && parent._helperName !== 'view') {
            parent = parent.parent;
        }
        return parent;
    }

    Handlebars.registerViewHelper = function(name, ViewClass, callback) {
        if (arguments.length === 2) {
            if (ViewClass.factory) {
                callback = ViewClass.callback;
            } else {
                callback = ViewClass;
                ViewClass = Thorax.HelperView;
            }
        }
        Handlebars.registerHelper(name, function() {
            var args = _.toArray(arguments),
                options = args.pop(),
                declaringView = getOptionsData(options).view;

            var viewOptions = {
                template: options.fn || Handlebars.VM.noop,
                inverse: options.inverse,
                options: options.hash,
                declaringView: declaringView,
                parent: getParent(declaringView),
                _helperName: name,
                _helperOptions: {
                    options: cloneHelperOptions(options),
                    args: _.clone(args)
                }
            };

            normalizeHTMLAttributeOptions(options.hash);
            _.extend(viewOptions, _.pick(options.hash, htmlAttributesToCopy));

            // Check to see if we have an existing instance that we can reuse
            var instance = _.find(declaringView._previousHelpers, function(child) {
                return compareHelperOptions(viewOptions, child);
            });

            // Create the instance if we don't already have one
            if (!instance) {
                if (ViewClass.factory) {
                    instance = ViewClass.factory(args, viewOptions);
                    if (!instance) {
                        return '';
                    }

                    instance._helperName = viewOptions._helperName;
                    instance._helperOptions = viewOptions._helperOptions;
                } else {
                    instance = new ViewClass(viewOptions);
                }

                args.push(instance);
                declaringView._addChild(instance);
                declaringView.trigger.apply(declaringView, ['helper', name].concat(args));
                declaringView.trigger.apply(declaringView, ['helper:' + name].concat(args));

                callback && callback.apply(this, args);
            } else {
                declaringView._previousHelpers = _.without(declaringView._previousHelpers, instance);
                declaringView.children[instance.cid] = instance;
            }

            var htmlAttributes = _.pick(options.hash, htmlAttributesToCopy);
            htmlAttributes[viewPlaceholderAttributeName] = instance.cid;

            var expandTokens = options.hash['expand-tokens'];
            return new Handlebars.SafeString(Thorax.Util.tag(htmlAttributes, '', expandTokens ? this : null));
        });
        var helper = Handlebars.helpers[name];
        return helper;
    };

    Thorax.View.on('append', function(scope, callback) {
        (scope || this.$el).find('[' + viewPlaceholderAttributeName + ']').forEach(function(el) {
            var placeholderId = el.getAttribute(viewPlaceholderAttributeName),
                view = this.children[placeholderId];
            if (view) {
                //see if the view helper declared an override for the view
                //if not, ensure the view has been rendered at least once
                if (viewTemplateOverrides[placeholderId]) {
                    view.render(viewTemplateOverrides[placeholderId]);
                    delete viewTemplateOverrides[placeholderId];
                } else {
                    view.ensureRendered();
                }
                $(el).replaceWith(view.el);
                callback && callback(view.el);
            }
        }, this);
    });


    /**
     * Clones the helper options, dropping items that are known to change
     * between rendering cycles as appropriate.
     */
    function cloneHelperOptions(options) {
        var ret = _.pick(options, 'fn', 'inverse', 'hash', 'data');
        ret.data = _.omit(options.data, 'cid', 'view', 'yield');
        return ret;
    }

    /**
     * Checks for basic equality between two sets of parameters for a helper view.
     *
     * Checked fields include:
     *  - _helperName
     *  - All args
     *  - Hash
     *  - Data
     *  - Function and Invert (id based if possible)
     *
     * This method allows us to determine if the inputs to a given view are the same. If they
     * are then we make the assumption that the rendering will be the same (or the child view will
     * otherwise rerendering it by monitoring it's parameters as necessary) and reuse the view on
     * rerender of the parent view.
     */
    function compareHelperOptions(a, b) {
        function compareValues(a, b) {
            return _.every(a, function(value, key) {
                return b[key] === value;
            });
        }

        if (a._helperName !== b._helperName) {
            return false;
        }

        a = a._helperOptions;
        b = b._helperOptions;

        // Implements a first level depth comparison
        return a.args.length === b.args.length
            && compareValues(a.args, b.args)
            && _.isEqual(_.keys(a.options), _.keys(b.options))
            && _.every(a.options, function(value, key) {
                if (key === 'data' || key === 'hash') {
                    return compareValues(a.options[key], b.options[key]);
                } else if (key === 'fn' || key === 'inverse') {
                    if (b.options[key] === value) {
                        return true;
                    }

                    var other = b.options[key] || {};
                    return value && _.has(value, 'program') && !value.depth && other.program === value.program;
                }
                return b.options[key] === value;
            });
    }

    ;;
    /*global getValue, inheritVars, walkInheritTree */

    function dataObject(type, spec) {
        spec = inheritVars[type] = _.defaults({
            name: '_' + type + 'Events',
            event: true
        }, spec);

        // Add a callback in the view constructor
        spec.ctor = function() {
            if (this[type]) {
                // Need to null this.model/collection so setModel/Collection will
                // not treat it as the old model/collection and immediately return
                var object = this[type];
                this[type] = null;
                this[spec.set](object);
            }
        };

        function setObject(dataObject, options) {
            var old = this[type],
                $el = getValue(this, spec.$el);

            if (dataObject === old) {
                return this;
            }
            if (old) {
                this.unbindDataObject(old);
            }

            if (dataObject) {
                this[type] = dataObject;

                if (spec.loading) {
                    spec.loading.call(this);
                }

                this.bindDataObject(type, dataObject, _.extend({}, this.options, options));
                $el && $el.attr(spec.cidAttrName, dataObject.cid);
                dataObject.trigger('set', dataObject, old);
            } else {
                this[type] = false;
                if (spec.change) {
                    spec.change.call(this, false);
                }
                $el && $el.removeAttr(spec.cidAttrName);
            }
            this.trigger('change:data-object', type, dataObject, old);
            return this;
        }

        Thorax.View.prototype[spec.set] = setObject;
    }

    _.extend(Thorax.View.prototype, {
        bindDataObject: function(type, dataObject, options) {
            if (this._boundDataObjectsByCid[dataObject.cid]) {
                return false;
            }
            this._boundDataObjectsByCid[dataObject.cid] = dataObject;

            var options = this._modifyDataObjectOptions(dataObject, _.extend({}, inheritVars[type].defaultOptions, options));
            this._objectOptionsByCid[dataObject.cid] = options;

            bindEvents.call(this, type, dataObject, this.constructor);
            bindEvents.call(this, type, dataObject, this);

            var spec = inheritVars[type];
            spec.bindCallback && spec.bindCallback.call(this, dataObject, options);

            if (dataObject.shouldFetch && dataObject.shouldFetch(options)) {
                loadObject(dataObject, options);
            } else if (inheritVars[type].change) {
                // want to trigger built in rendering without triggering event on model
                inheritVars[type].change.call(this, dataObject, options);
            }

            return true;
        },

        unbindDataObject: function (dataObject) {
            if (!this._boundDataObjectsByCid[dataObject.cid]) {
                return false;
            }
            delete this._boundDataObjectsByCid[dataObject.cid];
            this.stopListening(dataObject);
            delete this._objectOptionsByCid[dataObject.cid];
            return true;
        },

        _modifyDataObjectOptions: function(dataObject, options) {
            return options;
        }
    });

    function bindEvents(type, target, source) {
        var context = this;
        walkInheritTree(source, '_' + type + 'Events', true, function(event) {
            // getEventCallback will resolve if it is a string or a method
            // and return a method
            var callback = getEventCallback(event[1], context),
                eventContext = event[2] || context,
                destroyedCount = 0;

            function eventHandler() {
                if (context.el) {
                    callback.apply(eventContext, arguments);
                } else {
                    // If our event handler is removed by destroy while another event is processing then we
                    // we might see one latent event percolate through due to caching in the event loop. If we
                    // see multiple events this is a concern and a sign that something was not cleaned properly.
                    if (destroyedCount) {
                        throw new Error('destroyed-event:' + context.name + ':' + event[0]);
                    }
                    destroyedCount++;
                }
            }
            eventHandler._callback = callback;
            context.listenTo(target, event[0], eventHandler);
        });
    }

    function loadObject(dataObject, options) {
        if (dataObject.load) {
            dataObject.load(function() {
                options && options.success && options.success(dataObject);
            }, options);
        } else {
            dataObject.fetch(options);
        }
    }

    function getEventCallback(callback, context) {
        if (_.isFunction(callback)) {
            return callback;
        } else {
            return context[callback];
        }
    }

    ;;
    /*global createRegistryWrapper, dataObject, getValue */
    var modelCidAttributeName = 'data-model-cid';

    Thorax.Model = Backbone.Model.extend({
        isEmpty: function() {
            return !this.isPopulated();
        },
        isPopulated: function() {
            // We are populated if we have attributes set
            var attributes = _.clone(this.attributes),
                defaults = getValue(this, 'defaults') || {};
            for (var default_key in defaults) {
                if (attributes[default_key] != defaults[default_key]) {
                    return true;
                }
                delete attributes[default_key];
            }
            var keys = _.keys(attributes);
            return keys.length > 1 || (keys.length === 1 && keys[0] !== this.idAttribute);
        },
        shouldFetch: function(options) {
            // url() will throw if model has no `urlRoot` and no `collection`
            // or has `collection` and `collection` has no `url`
            var url;
            try {
                url = getValue(this, 'url');
            } catch(e) {
                url = false;
            }
            return options.fetch && !!url && !this.isPopulated();
        }
    });

    Thorax.Models = {};
    createRegistryWrapper(Thorax.Model, Thorax.Models);

    dataObject('model', {
        set: 'setModel',
        defaultOptions: {
            render: undefined,    // Default to deferred rendering
            fetch: true,
            success: false,
            errors: true
        },
        change: onModelChange,
        $el: '$el',
        cidAttrName: modelCidAttributeName
    });

    function onModelChange(model) {
        var modelOptions = model && this._objectOptionsByCid[model.cid];
        // !modelOptions will be true when setModel(false) is called
        this.conditionalRender(modelOptions && modelOptions.render);
    }

    Thorax.View.on({
        model: {
            error: function(model, errors) {
                if (this._objectOptionsByCid[model.cid].errors) {
                    this.trigger('error', errors, model);
                }
            },
            change: function(model) {
                onModelChange.call(this, model);
            }
        }
    });

    $.fn.model = function(view) {
        var $this = $(this),
            modelElement = $this.closest('[' + modelCidAttributeName + ']'),
            modelCid = modelElement && modelElement.attr(modelCidAttributeName);
        if (modelCid) {
            var view = view || $this.view();
            if (view && view.model && view.model.cid === modelCid) {
                return view.model || false;
            }
            var collection = $this.collection(view);
            if (collection) {
                return collection.get(modelCid);
            }
        }
        return false;
    };

    ;;
    /*global createRegistryWrapper, dataObject, getEventCallback, getValue, modelCidAttributeName, viewCidAttributeName */
    var _fetch = Backbone.Collection.prototype.fetch,
        _reset = Backbone.Collection.prototype.reset,
        _replaceHTML = Thorax.View.prototype._replaceHTML,
        collectionCidAttributeName = 'data-collection-cid',
        collectionEmptyAttributeName = 'data-collection-empty',
        collectionElementAttributeName = 'data-collection-element',
        ELEMENT_NODE_TYPE = 1;

    Thorax.Collection = Backbone.Collection.extend({
        model: Thorax.Model || Backbone.Model,
        initialize: function() {
            this.cid = _.uniqueId('collection');
            return Backbone.Collection.prototype.initialize.apply(this, arguments);
        },
        isEmpty: function() {
            if (this.length > 0) {
                return false;
            } else {
                return this.length === 0 && this.isPopulated();
            }
        },
        isPopulated: function() {
            return this._fetched || this.length > 0 || (!this.length && !getValue(this, 'url'));
        },
        shouldFetch: function(options) {
            return options.fetch && !!getValue(this, 'url') && !this.isPopulated();
        },
        fetch: function(options) {
            options = options || {};
            var success = options.success;
            options.success = function(collection, response) {
                collection._fetched = true;
                success && success(collection, response);
            };
            return _fetch.apply(this, arguments);
        },
        reset: function(models, options) {
            this._fetched = !!models;
            return _reset.call(this, models, options);
        }
    });

    Thorax.Collections = {};
    createRegistryWrapper(Thorax.Collection, Thorax.Collections);

    dataObject('collection', {
        set: 'setCollection',
        bindCallback: onSetCollection,
        defaultOptions: {
            render: undefined,    // Default to deferred rendering
            fetch: true,
            success: false,
            errors: true
        },
        change: onCollectionReset,
        $el: 'getCollectionElement',
        cidAttrName: collectionCidAttributeName
    });

    Thorax.CollectionView = Thorax.View.extend({
        _defaultTemplate: Handlebars.VM.noop,
        _collectionSelector: '[' + collectionElementAttributeName + ']',

        // preserve collection element if it was not created with {{collection}} helper
        _replaceHTML: function(html) {
            if (this.collection && this._objectOptionsByCid[this.collection.cid] && this._renderCount) {
                var element;
                var oldCollectionElement = this.getCollectionElement();
                element = _replaceHTML.call(this, html);
                if (!oldCollectionElement.attr('data-view-cid')) {
                    this.getCollectionElement().replaceWith(oldCollectionElement);
                }
            } else {
                return _replaceHTML.call(this, html);
            }
        },

        render: function() {
            var shouldRender = this.shouldRender();

            Thorax.View.prototype.render.apply(this, arguments);
            if (!shouldRender) {
                this.renderCollection();
            }
        },

        //appendItem(model [,index])
        //appendItem(html_string, index)
        //appendItem(view, index)
        appendItem: function(model, index, options) {
            //empty item
            if (!model) {
                return;
            }
            var itemView,
                $el = this.getCollectionElement();
            options = _.defaults(options || {}, {
                filter: true
            });
            //if index argument is a view
            index && index.el && (index = $el.children().indexOf(index.el) + 1);
            //if argument is a view, or html string
            if (model.el || _.isString(model)) {
                itemView = model;
                model = false;
            } else {
                index = index || this.collection.indexOf(model) || 0;
                itemView = this.renderItem(model, index);
            }

            if (itemView) {
                if (itemView.cid) {
                    itemView.ensureRendered();
                    this._addChild(itemView);
                }

                //if the renderer's output wasn't contained in a tag, wrap it in a div
                //plain text, or a mixture of top level text nodes and element nodes
                //will get wrapped
                if (_.isString(itemView) && !itemView.match(/^\s*</m)) {
                    itemView = '<div>' + itemView + '</div>';
                }
                var itemElement = itemView.$el ? itemView.$el : _.filter($($.trim(itemView)), function(node) {
                    //filter out top level whitespace nodes
                    return node.nodeType === ELEMENT_NODE_TYPE;
                });
                model && $(itemElement).attr(modelCidAttributeName, model.cid);
                var previousModel = index > 0 ? this.collection.at(index - 1) : false;
                if (!previousModel) {
                    $el.prepend(itemElement);
                } else {
                    //use last() as appendItem can accept multiple nodes from a template
                    var last = $el.children('[' + modelCidAttributeName + '="' + previousModel.cid + '"]').last();
                    last.after(itemElement);
                }

                this.trigger('append', null, function(el) {
                    el.setAttribute(modelCidAttributeName, model.cid);
                });

                !options.silent && this.trigger('rendered:item', this, this.collection, model, itemElement, index);
                options.filter && applyItemVisiblityFilter.call(this, model);
            }
            return itemView;
        },

        // updateItem only useful if there is no item view, otherwise
        // itemView.render() provides the same functionality
        updateItem: function(model) {
            var $el = this.getCollectionElement(),
                viewEl = $el.find('[' + modelCidAttributeName + '="' + model.cid + '"]');

            // NOP For views
            if (viewEl.attr(viewCidAttributeName)) {
                return;
            }

            this.removeItem(viewEl);
            this.appendItem(model);
        },

        removeItem: function(model) {
            var viewEl = model;
            if (model.cid) {
                var $el = this.getCollectionElement();
                viewEl = $el.find('[' + modelCidAttributeName + '="' + model.cid + '"]');
            }
            if (!viewEl.length) {
                return false;
            }
            viewEl.remove();
            var viewCid = viewEl.attr(viewCidAttributeName),
                child = this.children[viewCid];
            if (child) {
                this._removeChild(child);
                child.destroy();
            }
            return true;
        },

        renderCollection: function() {
            if (this.collection) {
                if (this.collection.isEmpty()) {
                    handleChangeFromNotEmptyToEmpty.call(this);
                } else {
                    handleChangeFromEmptyToNotEmpty.call(this);
                    this.collection.forEach(function(item, i) {
                        this.appendItem(item, i);
                    }, this);
                }
                this.trigger('rendered:collection', this, this.collection);
            } else {
                handleChangeFromNotEmptyToEmpty.call(this);
            }
        },
        emptyClass: 'empty',
        renderEmpty: function() {
            if (!this.emptyTemplate && !this.emptyView) {
                assignTemplate.call(this, 'emptyTemplate', {
                    extension: '-empty',
                    required: false
                });
            }
            if (this.emptyView) {
                var viewOptions = {};
                if (this.emptyTemplate) {
                    viewOptions.template = this.emptyTemplate;
                }
                var view = Thorax.Util.getViewInstance(this.emptyView, viewOptions);
                view.ensureRendered();
                return view;
            } else {
                return this.emptyTemplate && this.renderTemplate(this.emptyTemplate);
            }
        },
        renderItem: function(model, i) {
            if (!this.itemTemplate && !this.itemView) {
                assignTemplate.call(this, 'itemTemplate', {
                    extension: '-item',
                    // only require an itemTemplate if an itemView
                    // is not present
                    required: !this.itemView
                });
            }
            if (this.itemView) {
                var viewOptions = {
                    model: model
                };
                if (this.itemTemplate) {
                    viewOptions.template = this.itemTemplate;
                }
                return Thorax.Util.getViewInstance(this.itemView, viewOptions);
            } else {
                return this.renderTemplate(this.itemTemplate, this.itemContext(model, i));
            }
        },
        itemContext: function(model /*, i */) {
            return model.attributes;
        },
        appendEmpty: function() {
            var $el = this.getCollectionElement();
            $el.empty();
            var emptyContent = this.renderEmpty();
            emptyContent && this.appendItem(emptyContent, 0, {
                silent: true,
                filter: false
            });
            this.trigger('rendered:empty', this, this.collection);
        },
        getCollectionElement: function() {
            var element = this.$(this._collectionSelector);
            return element.length === 0 ? this.$el : element;
        }
    });

    Thorax.CollectionView.on({
        collection: {
            reset: onCollectionReset,
            sort: onCollectionReset,
            filter: function() {
                applyVisibilityFilter.call(this);
            },
            change: function(model) {
                this.updateItem(model);
                applyItemVisiblityFilter.call(this, model);
            },
            add: function(model) {
                var $el = this.getCollectionElement();
                this.collection.length === 1 && $el.length && handleChangeFromEmptyToNotEmpty.call(this);
                if ($el.length) {
                    var index = this.collection.indexOf(model);
                    this.appendItem(model, index);
                }
            },
            remove: function(model) {
                var $el = this.getCollectionElement();
                this.removeItem(model);
                this.collection.length === 0 && $el.length && handleChangeFromNotEmptyToEmpty.call(this);
            }
        }
    });

    Thorax.View.on({
        collection: {
            error: function(collection, message) {
                if (this._objectOptionsByCid[collection.cid].errors) {
                    this.trigger('error', message, collection);
                }
            }
        }
    });

    function onCollectionReset(collection) {
        // Undefined to force conditional render
        var options = (collection && this._objectOptionsByCid[collection.cid]) || undefined;
        if (this.shouldRender(options && options.render)) {
            this.renderCollection && this.renderCollection();
        }
    }

// Even if the view is not a CollectionView
// ensureRendered() to provide similar behavior
// to a model
    function onSetCollection(collection) {
        // Undefined to force conditional render
        var options = (collection && this._objectOptionsByCid[collection.cid]) || undefined;
        if (this.shouldRender(options && options.render)) {
            // Ensure that something is there if we are going to render the collection.
            this.ensureRendered();
        }
    }

    function applyVisibilityFilter() {
        if (this.itemFilter) {
            this.collection.forEach(applyItemVisiblityFilter, this);
        }
    }

    function applyItemVisiblityFilter(model) {
        var $el = this.getCollectionElement();
        this.itemFilter && $el.find('[' + modelCidAttributeName + '="' + model.cid + '"]')[itemShouldBeVisible.call(this, model) ? 'show' : 'hide']();
    }

    function itemShouldBeVisible(model) {
        return this.itemFilter(model, this.collection.indexOf(model));
    }

    function handleChangeFromEmptyToNotEmpty() {
        var $el = this.getCollectionElement();
        this.emptyClass && $el.removeClass(this.emptyClass);
        $el.removeAttr(collectionEmptyAttributeName);
        $el.empty();
    }

    function handleChangeFromNotEmptyToEmpty() {
        var $el = this.getCollectionElement();
        this.emptyClass && $el.addClass(this.emptyClass);
        $el.attr(collectionEmptyAttributeName, true);
        this.appendEmpty();
    }

//$(selector).collection() helper
    $.fn.collection = function(view) {
        if (view && view.collection) {
            return view.collection;
        }
        var $this = $(this),
            collectionElement = $this.closest('[' + collectionCidAttributeName + ']'),
            collectionCid = collectionElement && collectionElement.attr(collectionCidAttributeName);
        if (collectionCid) {
            view = $this.view();
            if (view) {
                return view.collection;
            }
        }
        return false;
    };

    ;;
    /*global inheritVars */

    inheritVars.model.defaultOptions.populate = true;

    var oldModelChange = inheritVars.model.change;
    inheritVars.model.change = function() {
        oldModelChange.apply(this, arguments);
        // TODO : What can we do to remove this duplication?
        var modelOptions = this.model && this._objectOptionsByCid[this.model.cid];
        if (modelOptions && modelOptions.populate) {
            this.populate(this.model.attributes, modelOptions.populate === true ? {} : modelOptions.populate);
        }
    };
    inheritVars.model.defaultOptions.populate = true;

    _.extend(Thorax.View.prototype, {
        //serializes a form present in the view, returning the serialized data
        //as an object
        //pass {set:false} to not update this.model if present
        //can pass options, callback or event in any order
        serialize: function() {
            var callback, options, event;
            //ignore undefined arguments in case event was null
            for (var i = 0; i < arguments.length; ++i) {
                if (_.isFunction(arguments[i])) {
                    callback = arguments[i];
                } else if (_.isObject(arguments[i])) {
                    if ('stopPropagation' in arguments[i] && 'preventDefault' in arguments[i]) {
                        event = arguments[i];
                    } else {
                        options = arguments[i];
                    }
                }
            }

            if (event && !this._preventDuplicateSubmission(event)) {
                return;
            }

            options = _.extend({
                set: true,
                validate: true,
                children: true,
                silent: true
            }, options || {});

            var attributes = options.attributes || {};

            //callback has context of element
            var view = this;
            var errors = [];
            eachNamedInput.call(this, options, function() {
                var value = view._getInputValue(this, options, errors);
                if (!_.isUndefined(value)) {
                    objectAndKeyFromAttributesAndName.call(this, attributes, this.name, {mode: 'serialize'}, function(object, key) {
                        if (!object[key]) {
                            object[key] = value;
                        } else if (_.isArray(object[key])) {
                            object[key].push(value);
                        } else {
                            object[key] = [object[key], value];
                        }
                    });
                }
            });

            this.trigger('serialize', attributes, options);

            if (options.validate) {
                var validateInputErrors = this.validateInput(attributes);
                if (validateInputErrors && validateInputErrors.length) {
                    errors = errors.concat(validateInputErrors);
                }
                this.trigger('validate', attributes, errors, options);
                if (errors.length) {
                    this.trigger('error', errors);
                    return;
                }
            }

            if (options.set && this.model) {
                if (!this.model.set(attributes, {silent: options.silent})) {
                    return false;
                }
            }

            callback && callback.call(this, attributes, _.bind(resetSubmitState, this));
            return attributes;
        },

        _preventDuplicateSubmission: function(event, callback) {
            event.preventDefault();

            var form = $(event.target);
            if ((event.target.tagName || '').toLowerCase() !== 'form') {
                // Handle non-submit events by gating on the form
                form = $(event.target).closest('form');
            }

            if (!form.attr('data-submit-wait')) {
                form.attr('data-submit-wait', 'true');
                if (callback) {
                    callback.call(this, event);
                }
                return true;
            } else {
                return false;
            }
        },

        //populate a form from the passed attributes or this.model if present
        populate: function(attributes, options) {
            options = _.extend({
                children: true
            }, options || {});

            var value,
                attributes = attributes || this._getContext();

            //callback has context of element
            eachNamedInput.call(this, options, function() {
                objectAndKeyFromAttributesAndName.call(this, attributes, this.name, {mode: 'populate'}, function(object, key) {
                    value = object && object[key];

                    if (!_.isUndefined(value)) {
                        //will only execute if we have a name that matches the structure in attributes
                        if (this.type === 'checkbox' && _.isBoolean(value)) {
                            this.checked = value;
                        } else if (this.type === 'checkbox' || this.type === 'radio') {
                            this.checked = value == this.value;
                        } else {
                            this.value = value;
                        }
                    }
                });
            });

            this.trigger('populate', attributes);
        },

        //perform form validation, implemented by child class
        validateInput: function(/* attributes, options, errors */) {},

        _getInputValue: function(input /* , options, errors */) {
            if (input.type === 'checkbox' || input.type === 'radio') {
                if (input.checked) {
                    return input.value;
                }
            } else if (input.multiple === true) {
                var values = [];
                $('option', input).each(function() {
                    if (this.selected) {
                        values.push(this.value);
                    }
                });
                return values;
            } else {
                return input.value;
            }
        }
    });

    Thorax.View.on({
        error: function() {
            resetSubmitState.call(this);

            // If we errored with a model we want to reset the content but leave the UI
            // intact. If the user updates the data and serializes any overwritten data
            // will be restored.
            if (this.model && this.model.previousAttributes) {
                this.model.set(this.model.previousAttributes(), {
                    silent: true
                });
            }
        },
        deactivated: function() {
            resetSubmitState.call(this);
        }
    });

    function eachNamedInput(options, iterator, context) {
        var i = 0,
            self = this;

        this.$('select,input,textarea', options.root || this.el).each(function() {
            if (!options.children) {
                if (self !== $(this).view({helper: false})) {
                    return;
                }
            }
            if (this.type !== 'button' && this.type !== 'cancel' && this.type !== 'submit' && this.name && this.name !== '') {
                iterator.call(context || this, i, this);
                ++i;
            }
        });
    }

//calls a callback with the correct object fragment and key from a compound name
    function objectAndKeyFromAttributesAndName(attributes, name, options, callback) {
        var key,
            object = attributes,
            keys = name.split('['),
            mode = options.mode;

        for (var i = 0; i < keys.length - 1; ++i) {
            key = keys[i].replace(']', '');
            if (!object[key]) {
                if (mode === 'serialize') {
                    object[key] = {};
                } else {
                    return callback.call(this, false, key);
                }
            }
            object = object[key];
        }
        key = keys[keys.length - 1].replace(']', '');
        callback.call(this, object, key);
    }

    function resetSubmitState() {
        this.$('form').removeAttr('data-submit-wait');
    }

    ;;
    var layoutCidAttributeName = 'data-layout-cid';

    Thorax.LayoutView = Thorax.View.extend({
        _defaultTemplate: Handlebars.VM.noop,
        render: function() {
            var response = Thorax.View.prototype.render.apply(this, arguments);
            if (this.template === Handlebars.VM.noop) {
                // if there is no template setView will append to this.$el
                ensureLayoutCid.call(this);
            } else {
                // if a template was specified is must declare a layout-element
                ensureLayoutViewsTargetElement.call(this);
            }
            return response;
        },
        setView: function(view, options) {
            options = _.extend({
                scroll: true,
                destroy: true
            }, options || {});
            if (_.isString(view)) {
                view = new (Thorax.Util.registryGet(Thorax, 'Views', view, false))();
            }
            this.ensureRendered();
            var oldView = this._view;
            if (view === oldView) {
                return false;
            }
            if (options.destroy && view) {
                view._shouldDestroyOnNextSetView = true;
            }

            this.trigger('change:view:start', view, oldView, options);

            if (oldView) {
                this._removeChild(oldView);
                oldView.$el.remove();
                triggerLifecycleEvent.call(oldView, 'deactivated', options);
                if (oldView._shouldDestroyOnNextSetView) {
                    oldView.destroy();
                }
            }

            if (view) {
                triggerLifecycleEvent.call(this, 'activated', options);
                view.trigger('activated', options);
                this._addChild(view);
                this._view = view;
                this._view.appendTo(getLayoutViewsTargetElement.call(this));
            } else {
                this._view = undefined;
            }

            this.trigger('change:view:end', view, oldView, options);
            return view;
        },

        getView: function() {
            return this._view;
        }
    });

    Handlebars.registerHelper('layout-element', function(options) {
        var view = getOptionsData(options).view;
        // duck type check for LayoutView
        if (!view.getView) {
            throw new Error('layout-element must be used within a LayoutView');
        }
        options.hash[layoutCidAttributeName] = view.cid;
        normalizeHTMLAttributeOptions(options.hash);
        return new Handlebars.SafeString(Thorax.Util.tag.call(this, options.hash, '', this));
    });

    function triggerLifecycleEvent(eventName, options) {
        options = options || {};
        options.target = this;
        this.trigger(eventName, options);
        _.each(this.children, function(child) {
            child.trigger(eventName, options);
        });
    }

    function ensureLayoutCid() {
        ++this._renderCount;
        //set the layoutCidAttributeName on this.$el if there was no template
        this.$el.attr(layoutCidAttributeName, this.cid);
    }

    function ensureLayoutViewsTargetElement() {
        if (!this.$('[' + layoutCidAttributeName + '="' + this.cid + '"]')[0]) {
            throw new Error('No layout element found in ' + (this.name || this.cid));
        }
    }

    function getLayoutViewsTargetElement() {
        return this.$('[' + layoutCidAttributeName + '="' + this.cid + '"]')[0] || this.el[0] || this.el;
    }

    ;;
    /*global createRegistryWrapper */

//Router
    function initializeRouter() {
        Backbone.history || (Backbone.history = new Backbone.History());
        Backbone.history.on('route', onRoute, this);
        //router does not have a built in destroy event
        //but ViewController does
        this.on('destroyed', function() {
            Backbone.history.off('route', onRoute, this);
        });
    }

    Thorax.Router = Backbone.Router.extend({
        constructor: function() {
            var response = Thorax.Router.__super__.constructor.apply(this, arguments);
            initializeRouter.call(this);
            return response;
        },
        route: function(route, name, callback) {
            if (!callback) {
                callback = this[name];
            }
            //add a route:before event that is fired before the callback is called
            return Backbone.Router.prototype.route.call(this, route, name, function() {
                this.trigger.apply(this, ['route:before', route, name].concat(Array.prototype.slice.call(arguments)));
                return callback.apply(this, arguments);
            });
        }
    });

    Thorax.Routers = {};
    createRegistryWrapper(Thorax.Router, Thorax.Routers);

    function onRoute(router /* , name */) {
        if (this === router) {
            this.trigger.apply(this, ['route'].concat(Array.prototype.slice.call(arguments, 1)));
        }
    }

    ;;
    Thorax.CollectionHelperView = Thorax.CollectionView.extend({
        // Forward render events to the parent
        events: {
            'rendered:item': forwardRenderEvent('rendered:item'),
            'rendered:collection': forwardRenderEvent('rendered:collection'),
            'rendered:empty': forwardRenderEvent('rendered:empty')
        },

        constructor: function(options) {
            _.each(collectionOptionNames, function(viewAttributeName, helperOptionName) {
                if (options.options[helperOptionName]) {
                    var value = options.options[helperOptionName];
                    if (viewAttributeName === 'itemTemplate' || viewAttributeName === 'emptyTemplate') {
                        value = Thorax.Util.getTemplate(value);
                    }
                    options[viewAttributeName] = value;
                }
            });
            // Handlebars.VM.noop is passed in the handlebars options object as
            // a default for fn and inverse, if a block was present. Need to
            // check to ensure we don't pick the empty / null block up.
            if (!options.itemTemplate && options.template && options.template !== Handlebars.VM.noop) {
                options.itemTemplate = options.template;
                options.template = Handlebars.VM.noop;
            }
            if (!options.emptyTemplate && options.inverse && options.inverse !== Handlebars.VM.noop) {
                options.emptyTemplate = options.inverse;
                options.inverse = Handlebars.VM.noop;
            }
            var response = Thorax.HelperView.call(this, options);
            if (this.parent.name) {
                if (!this.emptyTemplate) {
                    this.emptyTemplate = Thorax.Util.getTemplate(this.parent.name + '-empty', true);
                }
                if (!this.itemTemplate) {
                    // item template must be present if an itemView is not
                    this.itemTemplate = Thorax.Util.getTemplate(this.parent.name + '-item', !!this.itemView);
                }
            }

            return response;
        },
        setAsPrimaryCollectionHelper: function() {
            _.each(forwardableProperties, function(propertyName) {
                forwardMissingProperty.call(this, propertyName);
            }, this);

            var self = this;
            _.each(['itemFilter', 'itemContext', 'renderItem', 'renderEmpty'], function(propertyName) {
                if (self.parent[propertyName] && !this[propertyName]) {
                    self[propertyName] = function() {
                        return self.parent[propertyName].apply(self.parent, arguments);
                    };
                }
            });
        }
    });

    _.extend(Thorax.CollectionHelperView.prototype, helperViewPrototype);

    var collectionOptionNames = {
        'item-template': 'itemTemplate',
        'empty-template': 'emptyTemplate',
        'item-view': 'itemView',
        'empty-view': 'emptyView',
        'empty-class': 'emptyClass'
    };

    function forwardRenderEvent(eventName) {
        return function() {
            var args = _.toArray(arguments);
            args.unshift(eventName);
            this.parent.trigger.apply(this.parent, args);
        }
    }

    var forwardableProperties = [
        'itemTemplate',
        'itemView',
        'emptyTemplate',
        'emptyView'
    ];

    function forwardMissingProperty(propertyName) {
        var parent = getParent(this);
        if (!this[propertyName]) {
            var prop = parent[propertyName];
            if (prop){
                this[propertyName] = prop;
            }
        }
    }

    Handlebars.registerViewHelper('collection', Thorax.CollectionHelperView, function(collection, view) {
        if (arguments.length === 1) {
            view = collection;
            collection = view.parent.collection;
            collection && view.setAsPrimaryCollectionHelper();
            view.$el.attr(collectionElementAttributeName, 'true');
            // propagate future changes to the parent's collection object
            // to the helper view
            view.listenTo(view.parent, 'change:data-object', function(type, dataObject) {
                if (type === 'collection') {
                    view.setAsPrimaryCollectionHelper();
                    view.setCollection(dataObject);
                }
            });
        }
        collection && view.setCollection(collection);
    });

    Handlebars.registerHelper('collection-element', function(options) {
        if (!getOptionsData(options).view.renderCollection) {
            throw new Error("collection-element helper must be declared inside of a CollectionView");
        }
        var hash = options.hash;
        normalizeHTMLAttributeOptions(hash);
        hash.tagName = hash.tagName || 'div';
        hash[collectionElementAttributeName] = true;
        return new Handlebars.SafeString(Thorax.Util.tag.call(this, hash, '', this));
    });

    ;;
    Handlebars.registerHelper('empty', function(dataObject, options) {
        if (arguments.length === 1) {
            options = dataObject;
        }
        var view = getOptionsData(options).view;
        if (arguments.length === 1) {
            dataObject = view.model;
        }
        // listeners for the empty helper rather than listeners
        // that are themselves empty
        if (!view._emptyListeners) {
            view._emptyListeners = {};
        }
        // duck type check for collection
        if (dataObject && !view._emptyListeners[dataObject.cid] && dataObject.models && ('length' in dataObject)) {
            view._emptyListeners[dataObject.cid] = true;
            view.listenTo(dataObject, 'remove', function() {
                if (dataObject.length === 0) {
                    view.render();
                }
            });
            view.listenTo(dataObject, 'add', function() {
                if (dataObject.length === 1) {
                    view.render();
                }
            });
            view.listenTo(dataObject, 'reset', function() {
                view.render();
            });
        }
        return !dataObject || dataObject.isEmpty() ? options.fn(this) : options.inverse(this);
    });

    ;;
    Handlebars.registerHelper('template', function(name, options) {
        var context = _.extend({fn: options && options.fn}, this, options ? options.hash : {});
        var output = getOptionsData(options).view.renderTemplate(name, context);
        return new Handlebars.SafeString(output);
    });

    Handlebars.registerHelper('yield', function(options) {
        return getOptionsData(options).yield && options.data.yield();
    });

    ;;
    Handlebars.registerHelper('url', function(url) {
        var fragment;
        if (arguments.length > 2) {
            fragment = _.map(_.head(arguments, arguments.length - 1), encodeURIComponent).join('/');
        } else {
            var options = arguments[1],
                hash = (options && options.hash) || options;
            if (hash && hash['expand-tokens']) {
                fragment = Thorax.Util.expandToken(url, this);
            } else {
                fragment = url;
            }
        }
        if (Backbone.history._hasPushState) {
            var root = Backbone.history.options.root;
            if (root === '/' && fragment.substr(0, 1) === '/') {
                return fragment;
            } else {
                return root + fragment;
            }
        } else {
            return '#' + fragment;
        }
    });

    ;;
    /*global viewTemplateOverrides */
    Handlebars.registerViewHelper('view', {
        factory: function(args, options) {
            var View = args.length >= 1 ? args[0] : Thorax.View;
            return Thorax.Util.getViewInstance(View, options.options);
        },
        callback: function() {
            var instance = arguments[arguments.length-1],
                options = instance._helperOptions.options,
                placeholderId = instance.cid;

            if (options.fn) {
                viewTemplateOverrides[placeholderId] = options.fn;
            }
        }
    });

    ;;
    var callMethodAttributeName = 'data-call-method',
        triggerEventAttributeName = 'data-trigger-event';

    Handlebars.registerHelper('button', function(method, options) {
        if (arguments.length === 1) {
            options = method;
            method = options.hash.method;
        }
        var hash = options.hash,
            expandTokens = hash['expand-tokens'];
        delete hash['expand-tokens'];
        if (!method && !options.hash.trigger) {
            throw new Error("button helper must have a method name as the first argument or a 'trigger', or a 'method' attribute specified.");
        }
        normalizeHTMLAttributeOptions(hash);
        hash.tagName = hash.tagName || 'button';
        hash.trigger && (hash[triggerEventAttributeName] = hash.trigger);
        delete hash.trigger;
        method && (hash[callMethodAttributeName] = method);
        return new Handlebars.SafeString(Thorax.Util.tag(hash, options.fn ? options.fn(this) : '', expandTokens ? this : null));
    });

    Handlebars.registerHelper('link', function() {
        var args = _.toArray(arguments),
            options = args.pop(),
            hash = options.hash,
        // url is an array that will be passed to the url helper
            url = args.length === 0 ? [hash.href] : args,
            expandTokens = hash['expand-tokens'];
        delete hash['expand-tokens'];
        if (!url[0] && url[0] !== '') {
            throw new Error("link helper requires an href as the first argument or an 'href' attribute");
        }
        normalizeHTMLAttributeOptions(hash);
        url.push(options);
        hash.href = Handlebars.helpers.url.apply(this, url);
        hash.tagName = hash.tagName || 'a';
        hash.trigger && (hash[triggerEventAttributeName] = options.hash.trigger);
        delete hash.trigger;
        hash[callMethodAttributeName] = '_anchorClick';
        return new Handlebars.SafeString(Thorax.Util.tag(hash, options.fn ? options.fn(this) : '', expandTokens ? this : null));
    });

    var clickSelector = '[' + callMethodAttributeName + '], [' + triggerEventAttributeName + ']';

    function handleClick(event) {
        var target = $(event.target),
            view = target.view({helper: false}),
            methodName = target.attr(callMethodAttributeName),
            eventName = target.attr(triggerEventAttributeName),
            methodResponse = false;
        methodName && (methodResponse = view[methodName].call(view, event));
        eventName && view.trigger(eventName, event);
        target.tagName === "A" && methodResponse === false && event.preventDefault();
    }

    var lastClickHandlerEventName;

    function registerClickHandler() {
        unregisterClickHandler();
        lastClickHandlerEventName = Thorax._fastClickEventName || 'click';
        $(document).on(lastClickHandlerEventName, clickSelector, handleClick);
    }

    function unregisterClickHandler() {
        lastClickHandlerEventName && $(document).off(lastClickHandlerEventName, clickSelector, handleClick);
    }

    $(document).ready(function() {
        if (!Thorax._fastClickEventName) {
            registerClickHandler();
        }
    });

    ;;
    var elementPlaceholderAttributeName = 'data-element-tmp';

    Handlebars.registerHelper('element', function(element, options) {
        normalizeHTMLAttributeOptions(options.hash);
        var cid = _.uniqueId('element'),
            declaringView = getOptionsData(options).view,
            htmlAttributes = _.pick(options.hash, htmlAttributesToCopy);
        htmlAttributes[elementPlaceholderAttributeName] = cid;
        declaringView._elementsByCid || (declaringView._elementsByCid = {});
        declaringView._elementsByCid[cid] = element;
        return new Handlebars.SafeString(Thorax.Util.tag(htmlAttributes));
    });

    Thorax.View.on('append', function(scope, callback) {
        (scope || this.$el).find('[' + elementPlaceholderAttributeName + ']').forEach(function(el) {
            var $el = $(el),
                cid = $el.attr(elementPlaceholderAttributeName),
                element = this._elementsByCid[cid];
            // A callback function may be specified as the value
            if (_.isFunction(element)) {
                element = element.call(this);
            }
            $el.replaceWith(element);
            callback && callback(element);
        }, this);
    });

    ;;
    Handlebars.registerHelper('super', function(options) {
        var declaringView = getOptionsData(options).view,
            parent = declaringView.constructor && declaringView.constructor.__super__;
        if (parent) {
            var template = parent.template;
            if (!template) {
                if (!parent.name) {
                    throw new Error('Cannot use super helper when parent has no name or template.');
                }
                template = parent.name;
            }
            if (_.isString(template)) {
                template = Thorax.Util.getTemplate(template, false);
            }
            return new Handlebars.SafeString(template(this, options));
        } else {
            return '';
        }
    });

    ;;
    /*global collectionOptionNames, inheritVars */

    var loadStart = 'load:start',
        loadEnd = 'load:end',
        rootObject;

    Thorax.setRootObject = function(obj) {
        rootObject = obj;
    };

    Thorax.loadHandler = function(start, end, context) {
        var loadCounter = _.uniqueId('load');
        return function(message, background, object) {
            var self = context || this;
            self._loadInfo = self._loadInfo || {};
            var loadInfo = self._loadInfo[loadCounter];

            function startLoadTimeout() {

                // If the timeout has been set already but has not triggered yet do nothing
                // Otherwise set a new timeout (either initial or for going from background to
                // non-background loading)
                if (loadInfo.timeout && !loadInfo.run) {
                    return;
                }

                var loadingTimeout = self._loadingTimeoutDuration !== undefined ?
                    self._loadingTimeoutDuration : Thorax.View.prototype._loadingTimeoutDuration;
                loadInfo.timeout = setTimeout(function() {
                    try {
                        loadInfo.run = true;
                        start.call(self, loadInfo.message, loadInfo.background, loadInfo);
                    } catch (e) {
                        Thorax.onException('loadStart', e);
                    }
                }, loadingTimeout * 1000);
            }

            if (!loadInfo) {
                loadInfo = self._loadInfo[loadCounter] = _.extend({
                    isLoading: function() {
                        return loadInfo.events.length;
                    },

                    cid: loadCounter,
                    events: [],
                    timeout: 0,
                    message: message,
                    background: !!background
                }, Backbone.Events);
                startLoadTimeout();
            } else {
                clearTimeout(loadInfo.endTimeout);

                loadInfo.message = message;
                if (!background && loadInfo.background) {
                    loadInfo.background = false;
                    startLoadTimeout();
                }
            }

            // Prevent binds to the same object multiple times as this can cause very bad things
            // to happen for the load;load;end;end execution flow.
            if (_.indexOf(loadInfo.events, object) >= 0) {
                return;
            }

            loadInfo.events.push(object);

            object.on(loadEnd, function endCallback() {
                var loadingEndTimeout = self._loadingTimeoutEndDuration;
                if (loadingEndTimeout === void 0) {
                    // If we are running on a non-view object pull the default timeout
                    loadingEndTimeout = Thorax.View.prototype._loadingTimeoutEndDuration;
                }

                var events = loadInfo.events,
                    index = _.indexOf(events, object);
                if (index >= 0 && !object.isLoading()) {
                    events.splice(index, 1);

                    if (_.indexOf(events, object) < 0) {
                        // Last callback for this particlar object, remove the bind
                        object.off(loadEnd, endCallback);
                    }
                }

                if (!events.length) {
                    clearTimeout(loadInfo.endTimeout);
                    loadInfo.endTimeout = setTimeout(function() {
                        try {
                            if (!events.length) {
                                if (loadInfo.run) {
                                    // Emit the end behavior, but only if there is a paired start
                                    end.call(self, loadInfo.background, loadInfo);
                                    loadInfo.trigger(loadEnd, loadInfo);
                                }

                                // If stopping make sure we don't run a start
                                clearTimeout(loadInfo.timeout);
                                loadInfo = self._loadInfo[loadCounter] = undefined;
                            }
                        } catch (e) {
                            Thorax.onException('loadEnd', e);
                        }
                    }, loadingEndTimeout * 1000);
                }
            });
        };
    };

    /**
     * Helper method for propagating load:start events to other objects.
     *
     * Forwards load:start events that occur on `source` to `dest`.
     */
    Thorax.forwardLoadEvents = function(source, dest, once) {
        function load(message, backgound, object) {
            if (once) {
                source.off(loadStart, load);
            }
            dest.trigger(loadStart, message, backgound, object);
        }
        source.on(loadStart, load);
        return {
            off: function() {
                source.off(loadStart, load);
            }
        };
    };

//
// Data load event generation
//

    /**
     * Mixing for generating load:start and load:end events.
     */
    Thorax.mixinLoadable = function(target, useParent) {
        _.extend(target, {
            //loading config
            _loadingClassName: 'loading',
            _loadingTimeoutDuration: 0.33,
            _loadingTimeoutEndDuration: 0.10,

            // Propagates loading view parameters to the AJAX layer
            onLoadStart: function(message, background, object) {
                var that = useParent ? this.parent : this;

                // Protect against race conditions
                if (!that || !that.el) {
                    return;
                }

                if (!that.nonBlockingLoad && !background && rootObject && rootObject !== this) {
                    rootObject.trigger(loadStart, message, background, object);
                }
                that._isLoading = true;
                $(that.el).addClass(that._loadingClassName);
                // used by loading helpers
                that.trigger('change:load-state', 'start', background);
            },
            onLoadEnd: function(/* background, object */) {
                var that = useParent ? this.parent : this;

                // Protect against race conditions
                if (!that || !that.el) {
                    return;
                }

                that._isLoading = false;
                $(that.el).removeClass(that._loadingClassName);
                // used by loading helper
                that.trigger('change:load-state', 'end');
            }
        });
    };

    Thorax.mixinLoadableEvents = function(target, useParent) {
        _.extend(target, {
            _loadCount: 0,

            isLoading: function() {
                return this._loadCount > 0;
            },

            loadStart: function(message, background) {
                this._loadCount++;

                var that = useParent ? this.parent : this;
                that.trigger(loadStart, message, background, that);
            },
            loadEnd: function() {
                this._loadCount--

                var that = useParent ? this.parent : this;
                that.trigger(loadEnd, that);
            }
        });
    };

    Thorax.mixinLoadable(Thorax.View.prototype);
    Thorax.mixinLoadableEvents(Thorax.View.prototype);


    if (Thorax.HelperView) {
        Thorax.mixinLoadable(Thorax.HelperView.prototype, true);
        Thorax.mixinLoadableEvents(Thorax.HelperView.prototype, true);
    }

    if (Thorax.CollectionHelperView) {
        Thorax.mixinLoadable(Thorax.CollectionHelperView.prototype, true);
        Thorax.mixinLoadableEvents(Thorax.CollectionHelperView.prototype, true);
    }

    Thorax.sync = function(method, dataObj, options) {
        var self = this,
            complete = options.complete;

        options.complete = function() {
            self._request = undefined;
            self._aborted = false;

            complete && complete.apply(this, arguments);
        };
        this._request = Backbone.sync.apply(this, arguments);

        return this._request;
    };

    function bindToRoute(callback, failback) {
        var fragment = Backbone.history.getFragment(),
            routeChanged = false;

        function routeHandler() {
            if (fragment === Backbone.history.getFragment()) {
                return;
            }
            routeChanged = true;
            res.cancel();
            failback && failback();
        }

        Backbone.history.on('route', routeHandler);

        function finalizer() {
            Backbone.history.off('route', routeHandler);
            if (!routeChanged) {
                callback.apply(this, arguments);
            }
        }

        var res = _.bind(finalizer, this);
        res.cancel = function() {
            Backbone.history.off('route', routeHandler);
        };

        return res;
    }

    function loadData(callback, failback, options) {
        if (this.isPopulated()) {
            // Defer here to maintain async callback behavior for all loading cases
            return _.defer(callback, this);
        }

        if (arguments.length === 2 && !_.isFunction(failback) && _.isObject(failback)) {
            options = failback;
            failback = false;
        }

        var self = this,
            routeChanged = false,
            successCallback = bindToRoute(_.bind(callback, self), function() {
                routeChanged = true;
                if (self._request) {
                    self._aborted = true;
                    self._request.abort();
                }
                failback && failback.call(self, false);
            });

        this.fetch(_.defaults({
            success: successCallback,
            error: function() {
                successCallback.cancel();
                if (!routeChanged && failback) {
                    failback.apply(self, [true].concat(_.toArray(arguments)));
                }
            }
        }, options));
    }

    function fetchQueue(options, $super) {
        if (options.resetQueue) {
            // WARN: Should ensure that loaders are protected from out of band data
            //    when using this option
            this.fetchQueue = undefined;
        }

        if (!this.fetchQueue) {
            // Kick off the request
            this.fetchQueue = [options];
            options = _.defaults({
                success: flushQueue(this, this.fetchQueue, 'success'),
                error: flushQueue(this, this.fetchQueue, 'error'),
                complete: flushQueue(this, this.fetchQueue, 'complete')
            }, options);

            // Handle callers that do not pass in a super class and wish to implement their own
            // fetch behavior
            if ($super) {
                $super.call(this, options);
            }
            return options;
        } else {
            // Currently fetching. Queue and process once complete
            this.fetchQueue.push(options);
        }
    }

    function flushQueue(self, fetchQueue, handler) {
        return function() {
            var args = arguments;

            // Flush the queue. Executes any callback handlers that
            // may have been passed in the fetch options.
            _.each(fetchQueue, function(options) {
                if (options[handler]) {
                    options[handler].apply(this, args);
                }
            }, this);

            // Reset the queue if we are still the active request
            if (self.fetchQueue === fetchQueue) {
                self.fetchQueue = undefined;
            }
        };
    }

    var klasses = [];
    Thorax.Model && klasses.push(Thorax.Model);
    Thorax.Collection && klasses.push(Thorax.Collection);

    _.each(klasses, function(DataClass) {
        var $fetch = DataClass.prototype.fetch;
        Thorax.mixinLoadableEvents(DataClass.prototype, false);
        _.extend(DataClass.prototype, {
            sync: Thorax.sync,

            fetch: function(options) {
                options = options || {};

                var self = this,
                    complete = options.complete;

                options.complete = function() {
                    complete && complete.apply(this, arguments);
                    self.loadEnd();
                };
                self.loadStart(undefined, options.background);
                return fetchQueue.call(this, options || {}, $fetch);
            },

            load: function(callback, failback, options) {
                if (arguments.length === 2 && !_.isFunction(failback)) {
                    options = failback;
                    failback = false;
                }

                options = options || {};
                if (!options.background && !this.isPopulated() && rootObject) {
                    // Make sure that the global scope sees the proper load events here
                    // if we are loading in standalone mode
                    Thorax.forwardLoadEvents(this, rootObject, true);
                }

                loadData.call(this, callback, failback, options);
            }
        });
    });

    Thorax.Util.bindToRoute = bindToRoute;

    if (Thorax.Router) {
        Thorax.Router.bindToRoute = Thorax.Router.prototype.bindToRoute = bindToRoute;
    }

// Propagates loading view parameters to the AJAX layer
    Thorax.View.prototype._modifyDataObjectOptions = function(dataObject, options) {
        options.ignoreErrors = this.ignoreFetchError;
        options.background = this.nonBlockingLoad;
        return options;
    };

// Thorax.CollectionHelperView inherits from CollectionView
// not HelperView so need to set it manually
    Thorax.HelperView.prototype._modifyDataObjectOptions = Thorax.CollectionHelperView.prototype._modifyDataObjectOptions = function(dataObject, options) {
        options.ignoreErrors = this.parent.ignoreFetchError;
        options.background = this.parent.nonBlockingLoad;
        return options;
    };

    inheritVars.collection.loading = function() {
        var loadingView = this.loadingView,
            loadingTemplate = this.loadingTemplate,
            loadingPlacement = this.loadingPlacement;
        //add "loading-view" and "loading-template" options to collection helper
        if (loadingView || loadingTemplate) {
            var callback = Thorax.loadHandler(_.bind(function() {
                    var item;
                    if (this.collection.length === 0) {
                        this.$el.empty();
                    }
                    if (loadingView) {
                        var instance = Thorax.Util.getViewInstance(loadingView);
                        this._addChild(instance);
                        if (loadingTemplate) {
                            instance.render(loadingTemplate);
                        } else {
                            instance.render();
                        }
                        item = instance;
                    } else {
                        item = this.renderTemplate(loadingTemplate);
                    }
                    var index = loadingPlacement
                            ? loadingPlacement.call(this)
                            : this.collection.length
                        ;
                    this.appendItem(item, index);
                    this.$el.children().eq(index).attr('data-loading-element', this.collection.cid);
                }, this), _.bind(function() {
                    this.$el.find('[data-loading-element="' + this.collection.cid + '"]').remove();
                }, this),
                this.collection);

            this.listenTo(this.collection, 'load:start', callback);
        }
    };

    if (collectionOptionNames) {
        collectionOptionNames['loading-template'] = 'loadingTemplate';
        collectionOptionNames['loading-view'] = 'loadingView';
        collectionOptionNames['loading-placement'] = 'loadingPlacement';
    }

    Thorax.View.on({
        'load:start': Thorax.loadHandler(
            function(message, background, object) {
                this.onLoadStart(message, background, object);
            },
            function(background, object) {
                this.onLoadEnd(object);
            }),

        collection: {
            'load:start': function(message, background, object) {
                this.trigger(loadStart, message, background, object);
            }
        },
        model: {
            'load:start': function(message, background, object) {
                this.trigger(loadStart, message, background, object);
            }
        }
    });

    ;;
    Handlebars.registerHelper('loading', function(options) {
        var view = getOptionsData(options).view;
        view.off('change:load-state', onLoadStateChange, view);
        view.on('change:load-state', onLoadStateChange, view);
        return view._isLoading ? options.fn(this) : options.inverse(this);
    });

    function onLoadStateChange() {
        this.render();
    }
    ;;
    var isIE = (/msie [\w.]+/).exec(navigator.userAgent.toLowerCase());

    if (isIE) {
        // IE will lose a reference to the elements if view.el.innerHTML = '';
        // If they are removed one by one the references are not lost.
        // For instance a view's childrens' `el`s will be lost if the view
        // sets it's `el.innerHTML`.
        Thorax.View.on('before:append', function() {
            // note that detach is not available in Zepto,
            // but IE should never run with Zepto
            if (this._renderCount > 0) {
                _.each(this._elementsByCid, function(element) {
                    $(element).detach();
                });
                _.each(this.children, function(child) {
                    child.$el.detach();
                });
            }
        });

        // Once nodes are detached their innerHTML gets nuked in IE
        // so create a deep clone. This method is identical to the
        // main implementation except for ".clone(true, true)" which
        // will perform a deep clone with events and data
        Thorax.CollectionView.prototype._replaceHTML = function(html) {
            if (this.collection && this._objectOptionsByCid[this.collection.cid] && this._renderCount) {
                var element;
                var oldCollectionElement = this.getCollectionElement().clone(true, true);
                element = _replaceHTML.call(this, html);
                if (!oldCollectionElement.attr('data-view-cid')) {
                    this.getCollectionElement().replaceWith(oldCollectionElement);
                }
            } else {
                return _replaceHTML.call(this, html);
            }
        };
    }

    ;;


})();

//@ sourceMappingURL=thorax.js.map

/*global window:true, $:true, Class:true, mainSitePath:true */
var addToCart = Class.extend(function () {
    "use strict";

    return {
        /**
         * @class addToCart
         * Creates an instance of an add to cart button
         * Uses AJAX to add item then updates the cart drop down
         *
         * init: On page load events to fire
         * @param {object} el jQuery element to attach to
         * @param {object} qf jQuery element for corresponding quantity field
         */
        init: function (el, qf) {
            // Properties
            this.el = el;
            this.offset = el.offset();
            this.animElem = $("#addToCartAnimation");
            this.animElemOriginalTop = this.animElem.css("top");
            this.isAnimating = false;
            this.quantityField = qf;
            this.partNumber = '';
            this.divId = '';
            this.plsId = '';
            this.subPer = -1;
            this.component = '';
            // Elements
            this.cartItems = {
                dropdownButton: null,
                header: null,
                checkOut: null,
                totals: null,
                view: null,
                count: null,
                countBadge: null,
                statusMessage: null,
            }
            this.cartEmpty = null;
            // Setup
            this.bindEvents();
        },
        /**
         * Set instance properties from element attributes
         * @return {void}
         */
        setProperties: function () {
            var self = this;

            // Retrieve properties
            self.partNumber = self.el.attr('data-partnumber');
            self.divId = self.el.attr('data-divid');
            self.plsId = self.el.attr('data-plsid');
            if (self.el.attr('data-subper') != undefined) {
                self.subPer = self.el.attr('data-subper');
            }
            self.location = self.el.attr('data-location');
            self.component = self.el.attr('data-component');
            // Retrieve elements
            self.cartItems.dropdownButton = $('#cartShop > div > a');
            self.cartItems.header = $('#cartShop .cartShopHeader_js');
            self.cartItems.checkOut = $('#cartShop .cartShopCheckOut_js');
            self.cartItems.totals = $('#cartShop .cartShopTotals_js');
            self.cartItems.view = $('#cartShop .cartShopView_js');
            self.cartItems.count = $('.cartShopCount_js', self.cartItems.totals);
            self.cartItems.countBadge = $('#cartShop .count-badge');
            self.cartEmpty = $('#cartShop .cartShopEmpty_js');
            self.cartItems.statusMessage = $('#cartShop .cartShopStatusMessage_js');
        },
        /**
         * Set instance Omniture for the click event
         * @return {void}
         */
        setOmniture: function () {
            var self = this,
                prodVar = ';' + self.divId + self.plsId + self.partNumber;

            // Set CQ values
            if (self.subPer > -1) {
                if (self.subPer == 0) {
                    prodVar += ';;;eVar=57="One-Time Purchase"';
                } else {
                    prodVar += ';;;eVar=57="Every ' + self.subPer + ' Months"';
                }
            }
            SPDUtils.trackEvent({event: 'atcEvent', values: {atcLocation: self.location, atcProduct: prodVar}, componentPath: self.component}, 'Add_To_Cart_#templateName');
        },
        /**
         * Add item to cart
         * @return {void}
         */
        addItem: function () {
            var self = this,
                su = window.SPDUtils,
                quantity = su.validNumber(self.quantityField.attr('value'), 1),
                addAddress = mainSitePath + '/partsdirect/addtocart.pd',
                params = {
                    partno: self.partNumber,
                    divid: self.divId,
                    plsid: self.plsId,
                    quantity: quantity
                };

            // Ensure all parameters are valid
            if (self.partNumber !== '' && self.divId !== '' && self.plsId !== '') {
                // Add user param if available
                if (su.validString(registeredUserId) !== '') {
                    params.userid = registeredUserId;
                }
                // Add cart ID param if available
                if (NS('shc.pd.cookies').cid !== '') {
                    params.cid = NS('shc.pd.cookies').cid;
                }
                // Add subscription period if part is to be subscribed
                if (self.subPer > 0) {
                    params.renewalPeriod = self.subPer;
                }

                // Make an AJAX call
                $.ajax({
                    type: 'GET',
                    url: addAddress,
                    async: false,
                    contentType: 'application/json',
                    dataType: 'JSON',
                    data: params
                })
                    .success(function (data) {
                        self.handleResponse(data);
                    })
                    .fail(function (e) {
                        // Handle error
                    });
            }
            // NOTE: Next line for testing ONLY
            // comment out for QA/PROD
            //self.showAddedMessage();
        },
        /**
         * Display a message to the user to show that their item was added to the cart
         * @return {void}
         */
        showAddedMessage: function() {
            var self = this;

            if (self.isAnimating) {
                return;
            } else {
                self.isAnimating = true;
            }

            self.animElem.css('display', 'block');
            self.animElem.animate({
                    opacity: 1,
                    top: "-=200"},
                1500
            );
            setTimeout(function () {self.hideAddedMessage()}, 3000);
        },

        hideAddedMessage: function() {
            var self = this;

            self.animElem.animate({
                    opacity: 0,
                    top: "-=200"},
                1500
            );
            setTimeout(function () {self.hideAddedMessageForIE8()}, 1510);
        },

        hideAddedMessageForIE8: function() {
            var self = this;

            self.animElem.css('display', 'none');
            self.animElem.css('top', self.animElemOriginalTop);
            self.isAnimating = false;
        },
        /**
         * Process AJAX response
         * @param {object} data AJAX response
         * @return {void}
         */
        handleResponse: function (data) {
            var self = this,
                su = window.SPDUtils,
                i = 0,
                itemCount = 0,
                insert = false,
                message = '',
                statusMessages = [
                    'Showing last added item',
                    'Showing last 2 added items',
                    'Showing last 3 added items'
                ];

            // Set cartID cookie
            NS('shc.pd.cookies').cid = data.cartId;

            // Handle items
            if (data.cartParts.length > 0) {
                // Show message to user
                self.showAddedMessage();

                // update cart status message
                message = statusMessages[data.cartParts.length-1] ? statusMessages[data.cartParts.length-1] : statusMessages[statusMessages.length-1];
                self.cartItems.statusMessage.text(message);

                // set cart dropdown into hover state
                self.cartItems.dropdownButton.addClass('hover');

                // Set visibility of elements
                self.cartItems.header.removeClass('inactive');
                self.cartItems.checkOut.removeClass('inactive');
                self.cartItems.totals.removeClass('inactive');
                self.cartItems.view.removeClass('inactive');
                self.cartEmpty.addClass('inactive');
                self.cartItems.statusMessage.removeClass('inactive');

                // Remove current items - ensures quantity changes are reflected
                $('#cartShop .cart-item').remove();

                // Render new items
                for (i = 0; i < data.cartParts.length; i = i + 1) {
                    // insert into html, only last 3 items
                    insert = (data.cartParts.length - i <= 3) ? true : false;
                    // accumulate total items in cart count, even if not in html
                    itemCount += self.renderItem(data.cartParts[i], insert);
                }

                // Set total item count
                if (itemCount > 99) {
                    itemCount = '99+';
                }
                self.cartItems.count.text(itemCount);
                self.cartItems.countBadge.text(itemCount);
            } else {
                // Set visibility of elements
                self.cartItems.header.addClass('inactive');
                self.cartItems.checkOut.addClass('inactive');
                self.cartItems.totals.addClass('inactive');
                self.cartItems.view.addClass('inactive');
                self.cartEmpty.removeClass('inactive');
                self.cartItems.statusMessage.addClass('inactive');
                self.cartItems.dropdownButton.removeClass('hover');

                // Set total item count
                self.cartItems.count.text('0');
                self.cartItems.countBadge.text('0');
                self.cartItems.statusMessage.text('');
            }
        },
        /**
         * Render a shopping cart item and insert it in the drop down
         * @param {object} item Returned data item
         * @return {number} Quantity of current item added
         */
        renderItem: function (item, insert) {
            var self = this,
                su = window.SPDUtils,
                quantity = 0,
                li = new cartItemTemplate(item);

            // Retrieve quantity
            quantity = item.quantity;
            // Insert element
            if (insert){
                self.cartItems.totals.before(li);
            }

            return quantity;
        },
        /**
         * Bind events to button
         * @return {void}
         */
        bindEvents: function () {
            var self = this;

            self.el.bind('click', function (e) {
                e.preventDefault();
                //Properties are set here in case data on the Add to Cart button is updated with javascript
                self.setProperties();
                self.setOmniture();
                self.addItem();
            });
        }
    }
}());
/*global $:true, Class:true */
var airFilterPartDetails = Class.extend(function () {
    "use strict";
    var pack4 = {
            number: '',
            div: '',
            pls: '',
            weight: '',
            price: '',
            sub: [false, false, false],
            avail: '',
            syw: 0,
            sDate: '',
            pDate: '',
            eDate: ''
        },
        pack6 = {
            number: '',
            div: '',
            pls: '',
            weight: '',
            price: '',
            sub: [false, false, false],
            avail: '',
            syw: 0,
            sDate: '',
            pDate: '',
            eDate: ''
        },
        pack12 = {
            number: '',
            div: '',
            pls: '',
            weight: '',
            price: '',
            sub: [false, false, false],
            avail: '',
            syw: 0,
            sDate: '',
            pDate: '',
            eDate: ''
        };

    return {
        /**
         * Initializes guideNavigation class
         */
        baseHistoryUrl : "/replacement-parts/hvac-air-filters/part-number/",
        init: function () {

            // History.pushState(null,null,'/testUrl');
            this.setFromUrl();
            this.detailsFromApi({
                success: this.renderView
            });

            this.bindEvents();
        },

        setFromUrl : function(){
            var path = window.location.pathname.replace(this.baseHistoryUrl,'').split('/');
            this.setPartNumber(path[0]);
            this.setDivId(path[1]);
            this.setPls(path[2].replace('.html',''));
        },
        setToUrl : function(){
            var path = this.baseHistoryUrl+this.partNumber+'/'+this.divId+'/'+this.pls+'.html';
            History.replaceState(null,'Part Detail',path);
        },
        // model
        setPartNumber : function(partNo){
            this.partNumber = partNo;
            this.currentPack = partNo.slice(partNo.lastIndexOf('-')+1);
            return this;
        },

        setDivId : function(divId){
            this.divId = divId;
            return this;
        },

        setPls : function(pls){
            this.pls = pls;
            return this;
        },

        detailsFromApi : function(ajaxOpts){
            var ajaxObj = {
                type: "GET",
                cache: false,
                dataType: "json",
                url: apiPath + 'air-filters/part-details',
                context:this,
                data: {
                    number: this.partNumber,
                    div: this.divId,
                    pls: this.pls
                }
            }
            ajaxObj = $.extend(ajaxObj, ajaxOpts);
            $.ajax(ajaxObj);
        },

        generateUrl : function(partNum, pls, divId){
            return this.baseHistoryUrl+'/'+partNum+'/'+divId+'/'+pls+'.html';
        },

        // view

        renderView : function(response) {
            var filter = {
                    manufacturer: response[0].manufacturer,
                    desc: response[0].partDesc,
                    number: response[0].basePartNumber,
                    merv: response[0].mervRating,
                    image: response[0].imageUrl,
                    cat: response[0].productGroupDescription,
                    length: response[0].shippingLength,
                    width: response[0].shippingWidth,
                    height: response[0].shippingHeight
                },
                packs = response[0].availablePacks.length;
            this.basePartNumber = response[0].basePartNumber;
            for (var i = 0; i < packs; i++) {
                //Special formatting for price because it's stored as a float
                var stringPrice = (response[0].availablePacks[i].priceForParts * 100).toString();
                stringPrice = stringPrice.substring(0, stringPrice.length - 2) + '.' + stringPrice.substring(stringPrice.length - 2);
                var temp = {
                    number: response[0].availablePacks[i].packPartNumber,
                    div: response[0].availablePacks[i].packPartDivId,
                    pls: response[0].availablePacks[i].packPartPls,
                    weight: response[0].availablePacks[i].shippingWeight,
                    price: response[0].availablePacks[i].priceForParts,
                    sub: [false, false, false],
                    avail: response[0].availablePacks[i].availabilityStatus,
                    syw: 0,
                    sDate: '',
                    pDate: '',
                    eDate: ''
                };
                var periods = response[0].availablePacks[i].subscriptions.length;
                $.grep(response[0].availablePacks[i].subscriptions, function(e) {
                    switch(e.renewalPeriod) {
                        case 3:
                            temp.sub[0] = true;
                            break;
                        case 6:
                            temp.sub[1] = true;
                            break;
                        case 12:
                            temp.sub[2] = true;
                            break;
                        default:
                        //Error
                    }
                });
                switch(response[0].availablePacks[i].packSize) {
                    case 4:
                        pack4 = temp;
                        break;
                    case 6:
                        pack6 = temp;
                        break;
                    case 12:
                        pack12 = temp;
                        break;
                    default:
                    //Error
                }
            }
            switch(parseInt(this.currentPack)) {
                case 4:
                    $('#fourPack').addClass('active');
                    $('#sixPack, #twelvePack').removeClass('active');
                    break;
                case 6:
                    $('#fourPack').removeClass('active');
                    $('#sixPack').addClass('active');
                    break;
                case 12:
                    $('#fourPack').removeClass('active');
                    $('#twelvePack').addClass('active');
                    break;
                default:
                //Error
            }
            this.displayFilter(filter);
            this.displayPack(parseInt(this.currentPack));
            //Get Shop Your Way points and estimated delivery dates for packs this part has
            if (pack4.number != '') {
                this.getSYW(filter, pack4, 4);
                this.getDates(filter, pack4, 4);
            }
            if (pack6.number != '') {
                this.getSYW(filter, pack6, 6);
                this.getDates(filter, pack6, 6);
            }
            if (pack12.number != '') {
                this.getSYW(filter, pack12, 12);
                this.getDates(filter, pack12, 12);
            }
        },
        /**
         * Bind events
         * @return {void}
         */
        bindEvents: function () {
            var self = this;
            $('#fourPack').on('click', function (e) {
                $('#sixPack').removeClass('active');
                $('#twelvePack').removeClass('active');
                $(this).addClass('active');
                self.displayPack(4);
            });
            $('#sixPack').on('click', function (e) {
                $('#fourPack').removeClass('active');
                $('#twelvePack').removeClass('active');
                $(this).addClass('active');
                self.displayPack(6);
            });
            $('#twelvePack').on('click', function (e) {
                $('#fourPack').removeClass('active');
                $('#sixPack').removeClass('active');
                $(this).addClass('active');
                self.displayPack(12);
            });
            $('#oneTime').on('click', function (e) {
                $('.packBox.wide').removeClass('active');
                $(this).addClass('active');
                $('#addFilterToCart').attr('data-subper', 0);
                self.showGetShipping();
            });
            $('.js_automatic').on('click', function (e) {
                $('.packBox.wide').removeClass('active');
                $(this).addClass('active');
                $('#addFilterToCart').attr('data-subper', $(this).attr('data-subper'));
                self.showHasShipping();
            });

            $('.addToCartQuantity_js').keydown(function(event) {
                if ( $.inArray(event.keyCode,[8,9,13,27,46]) !== -1 ||
                    (event.keyCode >= 35 && event.keyCode <= 39)) {
                    return;
                }
                else {
                    if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {
                        event.preventDefault();
                    }
                }
            });

        },
        showGetShipping : function(){
            $('#js_getFreeShipping').removeClass('hide');
            $('#js_hasFreeShipping').addClass('hide');
        },
        showHasShipping : function(){
            $('#js_getFreeShipping').addClass('hide');
            $('#js_hasFreeShipping').removeClass('hide');
        },


        /**
         * Get Shop Your Way points
         * @return {void}
         */
        getSYW: function (filter, pack, size) {
            $.ajax({
                type: "GET",
                cache: false,
                dataType: "json",
                data: {
                    partNumber: filter.number + '-' + size,
                    divId: pack.div,
                    plsNumber: pack.pls
                },
                url: apiPath.replace('v1/','') + 'syw/points',
                success: function(response) {
                    if ($('#packNumber').html() == size) {
                        $('#swyPoints').html(response.points);
                    }
                    switch (size) {
                        case 4:
                            pack4.syw = response.points;
                            break;
                        case 6:
                            pack6.syw = response.points;
                            break;
                        case 12:
                            pack12.syw = response.points;
                            break;
                        default:
                        //Error
                    }
                },
                error: function(response) {
                    //console.log('fail');
                }
            });
        },
        /**
         * Get estimated delivery dates
         * @return {void}
         */
        getDates: function (filter, pack, size) {
            $.ajax({
                type: "GET",
                cache: false,
                dataType: "json",
                data: {
                    partNumber: filter.number + '-' + size,
                    divId: pack.div,
                    plsNumber: pack.pls
                },
                url: apiPath.replace('v1/','') + 'ead/prioritydates',
                success: function(response) {
                    var standard = '',
                        priority = '',
                        expedited = '';

                    if (response.standardEAD != undefined) {
                        standard = response.standardEAD;
                    }
                    if (response.priorityEAD != undefined) {
                        priority = response.priorityEAD;
                    }
                    if (response.expeditedEAD != undefined) {
                        expedited = response.expeditedEAD;
                    }
                    if ($('#packNumber').html() == size) {
                        //Sets delivery dates and hides if date is missing
                        if (standard == '') {
                            $('#standardLabel, #standardDelivery').addClass('hidden');
                        } else {
                            $('#standardLabel, #standardDelivery').removeClass('hidden');
                            $('#standardDelivery').html(standard);
                        }
                        if (expedited == '') {
                            $('#expeditedLabel, #expeditedDelivery').addClass('hidden');
                        } else {
                            $('#expeditedLabel, #expeditedDelivery').removeClass('hidden');
                            $('#expeditedDelivery').html(expedited);
                        }
                        if (priority == '') {
                            $('#priorityLabel, #priorityDelivery').addClass('hidden');
                        } else {
                            $('#priorityLabel, #priorityDelivery').removeClass('hidden');
                            $('#priorityDelivery').html(priority);
                        }
                    }

                    switch (size) {
                        case 4:
                            pack4.sDate = standard;
                            pack4.pDate = priority;
                            pack4.eDate = expedited;
                            break;
                        case 6:
                            pack6.sDate = standard;
                            pack6.pDate = priority;
                            pack6.eDate = expedited;
                            break;
                        case 12:
                            pack12.sDate = standard;
                            pack12.pDate = priority;
                            pack12.eDate = expedited;
                            break;
                        default:
                        //Error
                    }
                },
                error: function(response) {
                    //console.log('fail');
                }
            });
        },
        /**
         * Display air information (constant between packs)
         * @return {void}
         */
        displayFilter: function (filter) {
            // strtolower -> ucwords : should be a util? 
            filter.desc = filter.desc.toLowerCase().replace(/(^([a-zA-Z\p{M}]))|([ -][a-zA-Z\p{M}])/g,
                function($1){
                    return $1.toUpperCase();
                });

            $('.partName').html(filter.desc + ' Pleated Replacement Air Filter - MERV ' + filter.merv);

            $('#partNumber').html(filter.number);
            //Add code for images
            if (filter.image == null) {
                $('.responsivePinchImage').addClass('hidden');
                $('.responsivePinchImage').after('<img src="' + mainSitePath + '/partsdirect/assets/img/images/no_part.gif" />');
            } else {
                $('.responsivePinchImage [data-toggle="pinch-image"]').attr('data-desktopimage', filter.image);
                $('.responsivePinchImage [data-toggle="pinch-image"]').change();
            }

            //Check if it lacks packs
            if (pack4.number == '') {
                $('#fourPack').addClass('hidden');
            }
            if (pack6.number == '') {
                $('#sixPack').addClass('hidden');
            }
            if (pack12.number == '') {
                $('#twelvePack').addClass('hidden');
            }

            $('#mervRating').html(filter.merv);
            $('#filterCat').html(filter.cat);
            $('#shippingLength').html(filter.length);
            $('#shippingWidth').html(filter.width);
            $('#shippingHeight').html(filter.height);
        },
        /**
         * Display current pack
         * @return {void}
         */
        displayPack: function(e) {
            var current;
            this.currentPack = e;
            switch(e) {
                case 4:
                    current = pack4;
                    break;
                case 6:
                    current = pack6;
                    break;
                case 12:
                    current = pack12;
                    break;
                default:
                //Error
            }
            $('#packNumber').html(e);
            $('.partName').html($('.partName').html().replace(/(4|6|12){1}\s{1}pack{1}/i,e+' Pack'));
            $('#price').html('$' + current.price);
            //Modify message based on availability
            if (current.avail == 'BORD') {
                $('#inStock').html('Back Order');
                $('.pdpQuantityLine').removeClass('hidden');
                $('.sameDayShip').removeClass('hidden');
            } else if (current.avail == 'NLA') {
                $('#inStock').html('Not Available');
                $('.pdpQuantityLine').addClass('hidden');
                $('.sameDayShip').addClass('hidden');
            } else {
                $('#inStock').html('In stock');
                $('.pdpQuantityLine').removeClass('hidden');
                $('.sameDayShip').removeClass('hidden');
            }
            //Check for missing subscription periods
            if (!current.sub[0]) {
                $('#threeMonths').addClass('hidden');
            }
            if (!current.sub[1]) {
                $('#sixMonths').addClass('hidden');
            }
            if (!current.sub[2]) {
                $('#twelveMonths').addClass('hidden');
            }
            $('#addFilterToCart').attr('data-partnumber', current.number).attr('data-divid', current.div).attr('data-plsid', current.pls);

            //Sets delivery dates and hides if date is missing
            if (current.sDate == '') {
                $('#standardLabel, #standardDelivery').addClass('hidden');
            } else {
                $('#standardLabel, #standardDelivery').removeClass('hidden');
                $('#standardDelivery').html(current.sDate);
            }
            if (current.eDate == '') {
                $('#expeditedLabel, #expeditedDelivery').addClass('hidden');
            } else {
                $('#expeditedLabel, #expeditedDelivery').removeClass('hidden');
                $('#expeditedDelivery').html(current.eDate);
            }
            if (current.pDate == '') {
                $('#priorityLabel, #priorityDelivery').addClass('hidden');
            } else {
                $('#priorityLabel, #priorityDelivery').removeClass('hidden');
                $('#priorityDelivery').html(current.pDate);
            }
            $('#swyPoints').html(current.syw);
            $('#shippingWeight').html(current.weight);
            this.setPartNumber(this.basePartNumber+'-'+this.currentPack);
            this.setToUrl();
        }
    };
}());
/*mingle story id: 7922
 * 
 * Flag=1 Gets list of All Categories
 * Flag=2 Gets list of Product Types for selected Category
 * Flag=3 Gets list of Brands for selected Category and Product Type
 */
function hideAll(){
    $("#productType").hide();
    $("#brand").hide();
    $("#findModels").hide();
}

function fillAllCategory(){
    var urlName = "/bin/searspartsdirect/search/nomodelsservlet?flag=1";
    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            var jsonResponse = data;
            var len = Object.keys(jsonResponse).length;
            searchResults = jsonResponse[Object.keys(jsonResponse)[0]];
            searchResults = JSON.parse(searchResults);
            $("#categoryType").append(
                "<option value=\"Select\">Category</option>");
            for ( var i = 0; i < searchResults.length; i++) {
                var resultDetail = searchResults[Object.keys(searchResults)[i]];
                $("#categoryType").append(
                        "<option value=\"" + resultDetail.formattedBrowseCategoryName
                        + "\">" + resultDetail.browseCategory
                        + "</option>");
            }
        },
        error : function() {
            console.log("Failed to retrieve data from server");
        }
    });

}

function fillProductType(categoryType){
    populateProductDetails(categoryType);
}

function populateProductDetails(categoryType) {
    var urlName = "/bin/searspartsdirect/search/nomodelsservlet?flag=2&category="+encodeURIComponent(categoryType);
    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            var jsonResponse = data;
            var len = Object.keys(jsonResponse).length;
            searchResults = jsonResponse[Object.keys(jsonResponse)[0]];
            searchResults = JSON.parse(searchResults);
            $("#productType").append(
                "<option value=\"Select\">Product Type</option>");
            for ( var i = 0; i < searchResults.length; i++) {
                var resultDetail = searchResults[Object.keys(searchResults)[i]];
                $("#productType").append(
                        "<option value=\"" + resultDetail.seoFormattedName
                        + "\">" + resultDetail.name
                        + "</option>");
            }

        },
        error : function() {
            console.log("Failed to retrieve data from server");
        }
    });
}

function fillBrandType(categoryType, productType) {
    var urlName = "/bin/searspartsdirect/search/nomodelsservlet?flag=3&category="+encodeURIComponent(categoryType)+"&productType="+encodeURIComponent(productType);
    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            var jsonResponse = data;
            var len = Object.keys(jsonResponse).length;
            searchResults = jsonResponse[Object.keys(jsonResponse)[0]];
            searchResults = JSON.parse(searchResults);
            $("#brand").append(
                "<option value=\"Select\">Brand</option>");
            for ( var i = 0; i < searchResults.length; i++) {
                var resultDetail = searchResults[Object.keys(searchResults)[i]];
                $("#brand").append(
                        "<option value=\"" + resultDetail.seoFormattedName
                        + "\">" + resultDetail.name
                        + "</option>");
            }

        },
        error : function() {
            console.log("Failed to retrieve data from server");
        }
    });
}
/*global window:true, $:true, Class:true, mainSitePath:true */
var cartNav = Class.extend(function () {
    "use strict";

    return {
        /**
         * @singleton cartNav
         * Singleton class for the cartNav component
         * Handles Recently Viewed, My Models and Cart
         *
         * init: On page load events to fire
         */
        init: function () {
            // Properties
            this.modelDropdown = $('#cartModels .dropdown-menu');
            this.guestEdit = $('#cartGuestEdit');
            this.guestControls = $('#cartGuestControls');
            this.editButton = $('#cartModels .edit_js');
            this.removeButton = $('#cartModels .remove_js');
            this.cancelButton = $('#cartModels .cancel_js');
            this.cartDropdown = $('#cartShop .dropdown-menu');
            this.removedModels = new Array();
            // Initialize events
            this.bindEvents();
            this.toggleTray();
        },
        /**
         * Toggle the guest edit mode
         * @return {void}
         */
        toggleGuestEdit: function () {
            var self = this;

            // Flip out the controls and checkboxes
            self.modelDropdown.toggleClass('guest-edit');
        },
        /**
         * Handle the remove button click event
         * @return {void}
         */
        removeItems: function () {
            var self = this,
                deleteAddress = apiPath + 'profile/models/delete?cookieId=' + guestCookieId,
                itemCount = 0;

            // Create query string parameters
            // API listens for multiple instances of modelId rather than a comma-separated string
            $('input', self.modelDropdown).each(function () {
                if ($(this)[0].checked === true) {
                    deleteAddress += '&modelId=' + $(this).attr('value');
                    self.removedModels.push($(this).attr('value'));
                    itemCount = itemCount + 1;
                }
            });
            // Attempt AJAX call
            if (itemCount > 0) {
                $.ajax({
                    type: 'GET',
                    url: deleteAddress,
                    async: false,
                    contentType: 'application/json',
                    dataType: 'JSON',
                    mimeType: 'application/json;charset=UTF-8'
                })
                    .success(function (data) {
                        self.handleResponse(data);
                    })
                    .fail(function (e) {
                    });
            }
        },
        /**
         * Handle AJAX call
         * @param {object} data AJAX response
         * @return {void}
         */
        handleResponse: function (data) {
            var self = this,
                totalCount = $('input', self.modelDropdown).length,
                removedCount = self.removedModels.length,
                returnedCount = data.profileModelsList.length,
                i = 0;

            // Compare lengths and remove elements
            if ((removedCount + returnedCount) === totalCount) {
                // Remove each item based on its ID
                for (i = 0; i < self.removedModels.length; i = i + 1) {
                    $('input[value="' + self.removedModels[i] + '"]', self.modelDropdown).parent().remove();
                }
                self.removedModels = new Array();

                // Update count
                if (returnedCount > 99) {
                    returnedCount = '99+';
                }
                $('#cartModels .count-badge').text(returnedCount);
            }
        },
        /**
         * Toggle data-toggle action
         * @return {void}
         */
        toggleTray: function () {
            var self = this,
                viewportWidth = $('#viewport').width();

            if (viewportWidth < 651) {
                $('#cartShop [data-toggle]').data('toggle', 'false');
                self.cartDropdown.removeClass('dropdown-menu')
                    .addClass('cart-canvas');
            } else {
                $('#cartShop [data-toggle]').data('toggle', 'dropdown');
                self.cartDropdown.removeClass('cart-canvas')
                    .addClass('dropdown-menu');
            }
        },
        /**
         * Perform initial event binding
         * @return {void}
         */
        bindEvents: function () {
            var self = this;

            // My models buttons
            self.editButton.bind('click', function () {
                return false;
            })
                .bind('click', function (e) {
                    e.preventDefault();
                    self.toggleGuestEdit();
                });
            self.removeButton.bind('click', function () {
                return false;
            })
                .bind('click', function (e) {
                    e.preventDefault();
                    self.removeItems();
                });
            self.cancelButton.bind('click', function () {
                return false;
            })
                .bind('click', function (e) {
                    e.preventDefault();
                    self.toggleGuestEdit();
                });
            // Responsive handling of cart tray
            shc.pd.base.util.ViewChange.getInstance().onResponsive(function () {
                self.toggleTray();
            });
        }
    }
}());
/* COLLAPSE101 PUBLIC CLASS DEFINITION
 * ================================ */

var Collapse101 = function (element, options) {
    var isMobileBreakpoint = window.SPDUtils.isMobileBreakpoint(),
        target;

    this.$element = $(element)
    this.options = $.extend({}, $.fn.collapse101.defaults, options)

    target = $(this.$element.attr('href'));

    if (this.options.parent) {
        this.$parent = $(this.options.parent)
    }

    if (!isMobileBreakpoint) {
        this.options.toggle && this.toggle();
    } else {
        // default to hidden on mobile
        this.$element.removeClass('collapse');
        this.$element.addClass('collapsed');
        target.removeClass('in');
    }
}

Collapse101.prototype = {

    constructor: Collapse101

    , dimension: function () {
        var hasWidth = this.$element.hasClass('width')
        return hasWidth ? 'width' : 'height'
    }

    , show: function () {
        var dimension
            , scroll
            , actives
            , hasData

        if (this.transitioning || this.$element.hasClass('in')) return

        dimension = this.dimension()
        scroll = $.camelCase(['scroll', dimension].join('-'))
        actives = this.$parent && this.$parent.find('> .accordion-group > .in')

        if (actives && actives.length) {
            hasData = actives.data('collapse')
            if (hasData && hasData.transitioning) return
            actives.collapse('hide')
            hasData || actives.data('collapse', null)
        }

        this.$element[dimension](0)
        this.transition('addClass', $.Event('show'), 'shown')
        $.support.transition && this.$element[dimension](this.$element[0][scroll])
    }

    , hide: function () {
        var dimension
        if (this.transitioning || !this.$element.hasClass('in')) return
        dimension = this.dimension()
        this.reset(this.$element[dimension]())
        this.transition('removeClass', $.Event('hide'), 'hidden')
        this.$element[dimension](0)
    }

    , reset: function (size) {
        var dimension = this.dimension()

        this.$element
            .removeClass('collapse')
            [dimension](size || 'auto')
            [0].offsetWidth

        this.$element[size !== null ? 'addClass' : 'removeClass']('collapse')

        return this
    }

    , transition: function (method, startEvent, completeEvent) {
        var that = this
            , complete = function () {
                if (startEvent.type == 'show') that.reset()
                that.transitioning = 0
                that.$element.trigger(completeEvent)
            }

        this.$element.trigger(startEvent)

        if (startEvent.isDefaultPrevented()) return

        this.transitioning = 1

        this.$element[method]('in')

        $.support.transition && this.$element.hasClass('collapse') ?
            this.$element.one($.support.transition.end, complete) :
            complete()
    }

    , toggle: function () {
        this[this.$element.hasClass('in') ? 'hide' : 'show']()
    }

}


/* COLLAPSE101 PLUGIN DEFINITION
 * ========================== */

var old = $.fn.collapse101

$.fn.collapse101 = function (option) {
    return this.each(function () {
        var $this = $(this)
            , data = $this.data('collapse')
            , options = $.extend({}, $.fn.collapse101.defaults, $this.data(), typeof option == 'object' && option)
        if (!data) $this.data('collapse', (data = new Collapse101(this, options)))
        if (typeof option == 'string') data[option]()
    })
}

$.fn.collapse101.defaults = {
    toggle: false
}

$.fn.collapse101.Constructor = Collapse101


/* COLLAPSE101 NO CONFLICT
 * ==================== */

$.fn.collapse101.noConflict = function () {
    $.fn.collapse101 = old
    return this
}


/* COLLAPSE101 DATA-API
 * ================= */

$(document).on('click.collapse101.data-api', '[data-toggle=collapse101]', function (e) {

    // check if we're on desktop...if so, eat the event and exit
    var isMobileBreakpoint = window.SPDUtils.isMobileBreakpoint();
    if (!isMobileBreakpoint) {
        e.stopImmediatePropagation();
        e.preventDefault();
        return;
    }

    var $this = $(this), href
        , target = $this.attr('data-target')
            || e.preventDefault()
            || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
        , option = $(target).data('collapse') ? 'toggle' : $this.data()
    $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    $(target).collapse(option)
});
/*global window:true, $:true, Class:true */
var commonParts = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes commonParts class
         * @param {object} el Target element
         */
        init: function (el) {
            // Parameters
            this.el = $(el);
            // default accordions to closed
            this.initAccordion();

        },

        /**
         * removes the class 'in' from the accordion-body
         * to ensure that the accordion defaults to closed.
         * @return {void}
         */
        initAccordion: function () {
            var self = this;

            // $('div.accordion-body', self.el).each().removeClass('in');
            $('div.accordion-body', self.el).each( function() {
                $(this).removeClass('in');
            })
        }
    }
}());
var customAccordionForms = Class.extend(function () {
    "use strict";
    var xhrRespHandler = new Object();
    var monthArray = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    return {
        /**
         * Initializes customAccordionForms class
         */
        init: function () {
            // Render
            this.bindEvents();
        },
        /**
         * Perform initial event binding
         * @return {void}
         */
        bindEvents: function () {
            var self = this,
                filterSearchInterval = 0,
                typingFilter = false,
                searchText = '',
                unitPrice = 0.0,
                preTaxPrice = 0,
                validateDotsInterval = 0;

            $('body').append($('#modalShipping')).append($('#modalCode'));
            //This modifies the accordion to change the head background color when toggled and to have one open at a time (preference to current step)
            $('.customAccordionForms .accordion-toggle').on('click', function () {
                //Checks if accordion is deactivated
                if ($(this).attr('data-toggle') == "collapse") {
                    if ($(this).parent().hasClass('cafHeadingOpen')) {
                        //Closing accordion
                        $(this).parent().removeClass('cafHeadingOpen');
                    } else {
                        //Opening accordion
                        $(this).parent().addClass('cafHeadingOpen');
                        $(this).find('.cafStepEdit').addClass('hidden');
                    }
                }
            });
            //This handles when a user opens a finished step (it closes the current one and deactivates all the toggles)
            $('.customAccordionForms .accordion').on('show', function () {
                var thisToggle = $(this).find('.accordion-toggle'),
                    openToggle = $('.accordion-toggle[data-status=incomplete]');
                if (thisToggle.attr('data-status') == "complete") {
                    openToggle.attr('href', openToggle.attr('data-href')).attr('data-toggle', 'collapse');
                    openToggle.click();
                    openToggle.attr('data-status', 'unavailable');
                    $('.accordion-toggle').removeAttr('href').attr('data-toggle', 'false');
                }
            });

            //This handles when a user enters text into the filter search field
            $('.numberField').on('keypress', function (e) {
                typingFilter = true;
                clearInterval(filterSearchInterval);
                filterSearchInterval = setInterval(function () {
                    searchText = $('.numberField').val();
                    if (!typingFilter && searchText != "Enter your part or model number" && searchText.length > 2) {
                        var searchType = "part";
                        if ($('#ntPart').attr('checked') == undefined) {
                            searchType = "model";
                        }
                        clearInterval(filterSearchInterval);
                        $.ajax({
                            type: "GET",
                            cache: false,
                            dataType: "json",
                            data: {
                                number: searchText
                            },
                            url: apiPath + 'searchWaterFilter/' + searchType,
                            success: function(response) {
                                //console.log(response);
                                if(response == null) {
                                    $('.searchText .filterError').removeClass('hidden');
                                    $('.searchText .filterFound').addClass('hidden');
                                    $('#finalPartNumber').val('');
                                    $('#finalGroupId').val('');
                                    $('#finalSupplierId').val('');
                                } else {
                                    var groupId = response.productGroupId;
                                    var supplierId = response.supplierId;
                                    $('#finalPartNumber').val(response.partNumber);
                                    $('#finalGroupId').val(groupId);
                                    $('#finalSupplierId').val(supplierId);
                                    $('.searchText .filterError').addClass('hidden');
                                    $('.searchText .filterFound').removeClass('hidden');
                                    $('#cafSelectFilterFrequencyForm .cafSubmit').removeClass('hidden');
                                    $('.searchText .filterFound .filterDescription').attr('href', mainSitePathSecure + '/partsdirect/part-number/' + searchText + '/' + groupId + '/' + supplierId);
                                    $('.searchText .filterFound .filterDescription').html(response.description);
                                    //Multiplies the price by 100 so it can be converted into an integer
                                    unitPrice = parseFloat(response.sellingPrice) * 100;
                                }
                            },
                            error: function(response) {
                                //console.log('fail');
                                //console.log(response);
                            }
                        });
                    }
                }, 2000);
            });
            $('.numberField').on('keyup', function (e) {
                typingFilter = false;
            });

            //This sets up the DatePickers
            var today = new Date();
            $('#orderDate').datepicker({
                startDate: (today.getMonth() + 1).toString() + "/" + today.getDate().toString() + "/" + today.getFullYear().toString(),
                endDate: (today.getMonth() + 1).toString() + "/" + today.getDate().toString() + "/" + (today.getFullYear() + 1).toString(),
                orientation: "top auto",
                autoclose: true
            });
            //Ties the frequency radio buttons and dropdown together and sets the order date
            $('.freqDropCont .responsiveDropdown li').live('click', 'a', function () {
                var beginDate = new Date();
                beginDate.setMonth(beginDate.getMonth() + parseInt($(this).attr('data-value')));
                $('#orderDate').datepicker('update', (beginDate.getMonth() + 1).toString() + '/' + beginDate.getDate().toString() + '/' + beginDate.getFullYear().toString());
                $('.filFreq').removeAttr('checked');
                $('.filFreq[value=' + $(this).attr('data-value') + ']').attr('checked', 'checked');
            });

            $('.filFreq').on('click', function () {
                $('.freqDropCont .responsiveDropdown li a[data-value=' + $(this).val() + ']').click();
            });
            today.setMonth(today.getMonth() + 6);
            $('#orderDate').datepicker('update', (today.getMonth() + 1).toString() + '/' + today.getDate().toString() + '/' + today.getFullYear().toString());

            $('.cafSubmit', self.el).on('click', function (e) {
                var submittedFormId = $(e.target.form).attr('id');
                e.preventDefault();
                //Sets the frequency, date, quantity and price based on user input in the first step
                if (submittedFormId == "cafSelectFilterFrequencyForm") {
                    if ($('#finalPartNumber').val() == '') {
                        $('.filterAlert').removeClass('hidden');
                        return;
                    } else {
                        $('.filterAlert').addClass('hidden');
                    }
                    var selectedQty = $('#waterFilterQuantity').val();
                    $('#filterLink').html($('.filterDescription').html());
                    $('#freqSel').html($('.filFreq:checked').val());
                    $('#startDate').html(monthArray[parseInt($('#odInput').val().substr(0,2)) - 1] + ' ' + parseInt($('#odInput').val().substr(3,5)) + ', ' + $('#odInput').val().substr(6,10));
                    $('#subQty').html(selectedQty);
                    //Multiplies and converts the multiplied price to an integer then converts it into a string to display the price properly
                    preTaxPrice = Math.round(unitPrice) * parseInt(selectedQty);
                }
                if (submittedFormId == "cafShippingAddressForm") {
                    if (!$('#cafShippingAddressForm .cafValidating').hasClass('hidden')) {
                        return;
                    }
                    if ($('#shippingPO').attr('checked') == "checked") {
                        $('#finalPO').val('true');
                    } else {
                        $('#finalPO').val('false');
                    }
                    if (!$('#countyRow').hasClass('hidden')) {
                        $('#finalGeocode').val($('#shippingCounty').val());
                    }
                    //Special bit to fill out the billing form if user wants to use the same address (already on checkbox, here in case user updates after clicking the checkbox)
                    if ($('#shippingSame').attr('checked')) {
                        self.setBillingFields(true);
                        $('#cafBillingAddressForm').parent().parent().parent().find('.cafStepEdit').removeClass('hidden');
                    }
                }
                if (submittedFormId == "cafPaymentForm") {
                    $('.payAlert').addClass('hidden');
                }
                //Set Regula to validate current form
                self.bindRegula(parseInt(e.target.attributes['data-form-number'].value));
                self.validate(e);
            });

            //Brings up the county dropdown for address validation
            $('#shippingAddress, #shippingCity, #shippingState, #shippingZip').on('change.addressValidation', function() {
                var address = $('#shippingAddress').val(),
                    city = $('#shippingCity').val(),
                    state = $('#shippingState').val(),
                    zip = $('#shippingZip').val();
                if (address != "" && city != "" && $('#shippingState').attr('data-changed') == 'true' && zip != "") {
                    $('#cafShippingAddressForm .cafValidating').removeClass('hidden');
                    clearInterval(validateDotsInterval);
                    $('#cafShippingAddressForm .cafValidating .cafValidatingDots').html('.....');
                    validateDotsInterval = setInterval(function () {
                        var currentDots = $('#cafShippingAddressForm .cafValidating .cafValidatingDots').html();
                        if (currentDots.length > 0) {
                            $('#cafShippingAddressForm .cafValidating .cafValidatingDots').html(currentDots.substr(0, currentDots.length - 1));
                        } else {
                            $('#cafShippingAddressForm .cafValidating .cafValidatingDots').html('.....');
                        }
                    }, 1000);
                    if ($.browser.msie) {
                        xdr = new XDomainRequest();
                        xdr.open('POST', apiPathSecure + 'address/validate');
                        xdr.send('{"address1":"' + address + '","city":"' + city + '","zipCode":"' + zip + '","state":"' + state + '"}');
                        xdr.onload = function () {
                            xhrRespHandler.getGeoCode($.parseJSON(xdr.responseText), address, city, state, zip);
                        };
                    } else {
                        $.ajax({
                            type : "POST",
                            dataType: "json",
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            cache: false,
                            data: JSON.stringify({
                                'address1': address,
                                'city': city,
                                'zipCode': zip,
                                'state': state
                            }),
                            url: apiPathSecure + 'address/validate',
                            success: function(response) {
                                //console.log(response);
                                xhrRespHandler.getGeoCode(response, address, city, state, zip);
                            },
                            error: function(response) {
                                //console.log('fail');
                            }
                        });
                    }
                }
            });
            $('#shippingCounty').on('change.addressValidation', function() {
                if (!$(this).val() == 'ZZ') {
                    $('#cafShippingAddressForm .cafValidating').removeClass('hidden');
                    clearInterval(validateDotsInterval);
                    $('#cafShippingAddressForm .cafValidating .cafValidatingDots').html('.....');
                    validateDotsInterval = setInterval(function () {
                        var currentDots = $('#cafShippingAddressForm .cafValidating .cafValidatingDots').html();
                        if (currentDots.length > 0) {
                            $('#cafShippingAddressForm .cafValidating .cafValidatingDots').html(currentDots.substr(0, currentDots.length - 1));
                        } else {
                            $('#cafShippingAddressForm .cafValidating .cafValidatingDots').html('.....');
                        }
                    }, 1000);
                    if ($.browser.msie) {
                        var xhReqTax = new XMLHttpRequest(),
                            dataReqTax = '{"address":{"address1":"' + $('#shippingAddress').val() + '","city":"' + $('#shippingCity').val() + '","geoCode":"' + $('#shippingCounty').val() + '","zipCode":"' + $('#shippingZip').val() + '","state":"' + $('#shippingState').val() + '"},"partCompositeKey":{"partNumber":"' + $('#finalPartNumber').val() + '","productGroupId":"' + $('#finalGroupId').val() + '","supplierId":"' + $('#finalSupplierId').val() + '"},"quantity":' + parseInt($('#waterFilterQuantity').val()) + '}';
                        xhReqTax.open('POST', apiPathSecure + 'address/validate/taxandshipping', false);
                        xhReqTax.setRequestHeader("Accept","application/json");
                        xhReqTax.setRequestHeader("Content-type","application/json");
                        xhReqTax.send(dataReqTax);
                        xdr.onload = function () {
                            xhrRespHandler.getTax(xhrResp, $.parseJSON(xhReqTax.responseText));
                        };
                    } else {
                        $.ajax({
                            type : "POST",
                            dataType: "json",
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            cache: false,
                            data: JSON.stringify({
                                "address": {
                                    'address1': $('#shippingAddress').val(),
                                    'city': $('#shippingCity').val(),
                                    'geoCode': $('#shippingCounty').val(),
                                    'zipCode': $('#shippingZip').val(),
                                    'state': $('#shippingState').val()
                                },
                                "partCompositeKey": {
                                    "partNumber": $('#finalPartNumber').val(),
                                    "productGroupId": $('#finalGroupId').val(),
                                    "supplierId": $('#finalSupplierId').val()
                                },
                                "quantity": parseInt($('#waterFilterQuantity').val())
                            }),
                            url: apiPathSecure + 'address/validate/taxandshipping',
                            success: function(response) {
                                xhrRespHandler.getTax(response, response2);
                            },
                            error: function(response) {
                                //console.log('taxandshipping ajax fail');
                            }
                        });
                    }
                }
            });
            //Success handlers for address verification separated because there has to be a different request type in IE
            xhrRespHandler.getGeoCode = function(xhrResp, address, city, state, zip) {
                $('#shippingCounty').parent().find('.responsiveDropdown').remove();
                $('#shippingCounty').html('');
                if (xhrResp.geoCodeValues != null) {
                    $('#cafShippingAddressForm .cafValidating').addClass('hidden');
                    clearInterval(validateDotsInterval);
                    var geoCodes = xhrResp.geoCodeValues.length;
                    for (var i = 0; i < geoCodes; i++) {
                        var key = xhrResp.geoCodeValues[i].key;
                        var value = xhrResp.geoCodeValues[i].value;

                        if (key == '') {
                            key = 'ZZ';
                        }
                        $('#shippingCounty').append($('<option>', {value : key}).text(value).attr('data-value', key));
                    }
                    $('#shippingCounty').attr('data-changed', 'false');
                    $('#shippingCounty').each(function () {
                        var newResponsiveDropdown = new responsiveDropdown($(this));
                    });
                    $('.countyRow').removeClass('hidden');
                } else {
                    $('.countyRow').addClass('hidden');
                    $('#shippingCounty').append($('<option>', {value : xhrResp.validatedAddress.verifiedAddress.geoCode}).text('----'));
                    if ($.browser.msie) {
                        var xdr = new XDomainRequest(),
                            dataReqTax = '{"address":{"address1":"' + address + '","city":"' + city + '","geoCode":"' + xhrResp.validatedAddress.verifiedAddress.geoCode + '","zipCode":"' + zip + '","state":"' + state + '"},"partCompositeKey":{"partNumber":"' + $('#finalPartNumber').val() + '","productGroupId":"' + $('#finalGroupId').val() + '","supplierId":"' + $('#finalSupplierId').val() + '"},"quantity":' + parseInt($('#waterFilterQuantity').val()) + '}';
                        xdr.open('POST', apiPathSecure + 'address/validate/taxandshipping', false);
                        xdr.send(dataReqTax);
                        xdr.onload = function () {
                            xhrRespHandler.getTax(xhrResp, $.parseJSON(xdr.responseText));
                        };
                    } else {
                        $.ajax({
                            type : "POST",
                            dataType: "json",
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            cache: false,
                            data: JSON.stringify({
                                "address": {
                                    'address1': address,
                                    'city': city,
                                    'geoCode': xhrResp.validatedAddress.verifiedAddress.geoCode,
                                    'zipCode': zip,
                                    'state': state
                                },
                                "partCompositeKey": {
                                    "partNumber": $('#finalPartNumber').val(),
                                    "productGroupId": $('#finalGroupId').val(),
                                    "supplierId": $('#finalSupplierId').val()
                                },
                                "quantity": parseInt($('#waterFilterQuantity').val())
                            }),
                            url: apiPathSecure + 'address/validate/taxandshipping',
                            success: function(response2) {
                                //console.log(response2);
                                xhrRespHandler.getTax(xhrResp, response2);
                            },
                            error: function(response2) {
                                //console.log('taxandshipping ajax fail');
                            }
                        });
                    }
                }
            };
            xhrRespHandler.getTax = function(xhrRespOne, xhrRespTwo) {
                if (xhrRespTwo.taxAmount != null) {
                    $('#cafShippingAddressForm .cafValidating').addClass('hidden');
                    clearInterval(validateDotsInterval);
                    //Price formatting in case price is an even integer or tens of cents
                    var totalPrice = preTaxPrice + Math.round(xhrRespTwo.taxAmount * 100);
                    var formattedPrice = totalPrice.toString();
                    $('#cafFilterPrice').html('$' + formattedPrice.substring(0, formattedPrice.length - 2) + '.' + formattedPrice.substring(formattedPrice.length - 2) + '*');
                    $('#cafShippingAddressForm .cafSubmit').removeClass('hidden');
                    $('#finalGeocode').val(xhrRespOne.validatedAddress.verifiedAddress.geoCode);
                } else {
                    //console.log('taxandshipping fail');
                }
            };

            //These are for setting if the dropdowns have had an option selected by a user
            $('#shippingState, #billingState, #payMonth, #payYear').on('change.initial', function() {
                $(this).off('change.initial');
                $(this).attr('data-changed', 'true');
            });
            //Separated in case the address is changed to one that also requires a county selection
            $('#shippingCounty').on('change.initial', function() {
                $(this).attr('data-changed', 'true');
            });

            //These handle autofills for the dropdowns (i.e.: if browser fills in previously used address)
            $('#shippingState').on('change.autofill', function() {
                $('#shippingState').off('change.autofill');
                $('#shippingState').parent().find('.responsiveDropdown li[data-value=' + $('#shippingState option:selected').val() + '] a').click();
            });
            $('#billingState').on('change.autofill', function() {
                $('#billingState').off('change.autofill');
                $('#billingState').parent().find('.responsiveDropdown li[data-value=' + $('#billingState option:selected').val() + '] a').click();
            });
            $('#payMonth').on('change.autofill', function() {
                $('#payMonth').off('change.autofill');
                $('#payMonth').parent().find('.responsiveDropdown li[data-value=' + $('#payMonth option:selected').val() + '] a').click();
            });
            $('#payYear').on('change.autofill', function() {
                $('#payYear').off('change.autofill');
                $('#payYear').parent().find('.responsiveDropdown li[data-value=' + $('#payYear option:selected').val() + '] a').click();
            });

            //This is for when there is an error on the expiration date has an error (only the month dropdown gets the validation change event)
            $('#payYear').on('change.error', function() {
                $('#payMonth').change();
            });

            //This will have the shipping address submit button submit the billing address form with shipping address data
            $('.customAccordionForms #shippingSame').on('click', function () {
                if ($(this).attr('checked')) {
                    self.setBillingFields(true);
                    $('#billingSame').attr('checked', 'checked');
                    $('.billingToggle').attr('data-status', 'complete');
                    $('.billingToggle span').removeClass('hidden');
                } else {
                    self.setBillingFields(false);
                    $('#billingSame').removeAttr('checked');
                    $('.billingToggle').attr('data-status', 'unavailable');
                    $('.billingToggle span').addClass('hidden');
                }
            });

            //This will have the shipping address submit button fill out the billing address form with shipping address data
            $('.customAccordionForms #billingSame').on('click', function () {
                if ($(this).attr('checked')) {
                    self.setBillingFields(true);
                    $('#shippingSame').attr('checked', 'checked');
                    // Clear out old error messages
                    $('.accordion-inner .error').remove();
                    // Remove validation on individual fields and error border color
                    $('.errorField').off('change.error').removeClass('errorField');
                    $('.dropError').removeClass('dropError');
                } else {
                    self.setBillingFields(false);
                    $('#shippingSame').removeAttr('checked');
                }
            });

            //Checks the card type as the user is typing
            $('#payNumber').on('keyup', function (e) {
                var number = $(this).val().replace(/[a-zA-Z\s-]/g, "");
                var cardType = '';
                var cards = new Array();
                cards[0] = { cardType: "VISA", cardName: "Visa", prefixes: [4] };
                cards[1] = { cardType: "SEARS_MASTERCARD", cardName: "Sears Mastercard", prefixes: [512106,512107,512108] };
                cards[2] = { cardType: "MASTERCARD", cardName: "Mastercard", prefixes: [51,52,53,54,55] };
                cards[3] = { cardType: "AMERICAN_EXPRESS", cardName: "American Express", prefixes: [34,37] };
                cards[4] = { cardType: "DISCOVER", cardName: "Discover", prefixes: [6011,622,64,65] };
                cards[5] = { cardType: "SEARS_CARD", cardName: "Sears Card", prefixes: [5049] };
                cards[6] = { cardType: "SearsCard13", cardName: "Sears Card", prefixes: [95501] };
                var cardsLength = cards.length;

                for (var i = 0; i < cardsLength; i++) {
                    var prefixLength = cards[i].prefixes.length;
                    for (var h = 0; h < prefixLength; h++) {
                        var exp = new RegExp('^' + cards[i].prefixes[h]);
                        if (exp.test(number)) {
                            cardType = cards[i].cardType;
                            $('#payCardType').html(cards[i].cardName);
                            $('#finalCardType').val(cardType);
                            break;
                        }
                    }
                    if (cardType != '') {
                        break;
                    }
                }
                if (cardType == '') {
                    $('#payCardType').html('');
                    $('#finalCardType').val('');
                }
            });

            //Where the information to start the subscription is submitted
            $('#finalSubmit').on('click', function () {
                var dateEntered = $('#odInput').val();
                $(this).unbind('click');
                $('.accordion-toggle').removeAttr('href').attr('data-toggle', 'false');
                $('#processingIcon').show();
                if ($.browser.msie) {
                    var xdr = new XDomainRequest(),
                        dataReqEnroll = '{"shippingInfo":{"firstName":"' + $('#shippingFirst').val() + '","lastName":"' + $('#shippingLast').val() + '","dayTimePhone":"' + $('#shippingPhone').val() + '","dayTimePhoneExt":"' + $('#shippingExt').val() + '","email":"' + $('#shippingEmail').val() + '","address":{"address1":"' + $('#shippingAddress').val() + '","address2":"' + $('#shippingApt').val() + '","city":"' + $('#shippingCity').val() + '","geoCode":"' + $('#finalGeocode').val() + '","zipCode":"' + $('#shippingZip').val() + '","state":"' + $('#shippingState').val() + '"}},"billingInfo":{"firstName":"' + $('#billingFirst').val() + '","lastName":"' + $('#billingLast').val() + '","dayTimePhone":"' + $('#shippingPhone').val() + '","dayTimePhoneExt":"' + $('#shippingExt').val() + '","address":{"address1":"' + $('#billingAddress').val() + '","address2":"' + $('#billingApt').val() + '","city":"' + $('#billingCity').val() + '","zipCode":"' + $('#billingZip').val() + '","state":"' + $('#billingState').val() + '"}},"isShippingBillingSame":' + ($('#shippingSame').attr('checked') == 'checked') + ',"partCompositeKey":{"partNumber":"' + $('#finalPartNumber').val() + '","productGroupId":"' + $('#finalGroupId').val() + '","supplierId":"' + $('#finalSupplierId').val() + '"},"creditCard":{"cardNumber":"' + $('#payNumber').val() + '","cardType":"' + $('#finalCardType').val() + '","expMonth":' + parseInt($('#payMonth').val()) + ',"expYear":' + parseInt($('#payYear').val()) + ',"securityCode":' + parseInt($('#payCode').val()) + ',"name":"' + $('#payName').val() + '"},"subscriptionInfo":{"renewalPeriod":' + parseInt($('.filFreq:checked').val()) + ',"nextFullfillmentDate":"' + dateEntered.substr(6,4) + dateEntered.substr(0,2) + dateEntered.substr(3,2) + '"},"ldapUserInfo":{"casId":"' + NS('shc.pd').casId + '", "unitCenterId":"' + NS('shc.pd').unitCenterId + '"},"quantity":' + parseInt($('#waterFilterQuantity').val()) + '}';
                    xdr.open('POST', apiPathSecure + 'subscriptionservice/enroll', false);
                    xdr.send(dataReqEnroll);
                    xdr.onload = function () {
                        xhrRespHandler.enroll($.parseJSON(xdr.responseText));
                    };
                } else {
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        cache: false,
                        data: JSON.stringify({
                            "shippingInfo": {
                                "firstName": $('#shippingFirst').val(),
                                "lastName": $('#shippingLast').val(),
                                "dayTimePhone": $('#shippingPhone').val(),
                                "dayTimePhoneExt": $('#shippingExt').val(),
                                "email": $('#shippingEmail').val(),
                                "address": {
                                    "address1": $('#shippingAddress').val(),
                                    "address2": $('#shippingApt').val(),
                                    "city": $('#shippingCity').val(),
                                    "geoCode": $('#finalGeocode').val(),
                                    "zipCode": $('#shippingZip').val(),
                                    "state": $('#shippingState').val()
                                }
                            },
                            "billingInfo": {
                                "firstName": $('#billingFirst').val(),
                                "lastName": $('#billingLast').val(),
                                "dayTimePhone": $('#shippingPhone').val(),
                                "dayTimePhoneExt": $('#shippingExt').val(),
                                "address": {
                                    "address1": $('#billingAddress').val(),
                                    "address2": $('#billingApt').val(),
                                    "city": $('#billingCity').val(),
                                    "zipCode": $('#billingZip').val(),
                                    "state": $('#billingState').val()
                                }
                            },
                            "isShippingBillingSame": $('#shippingSame').attr('checked') == 'checked',
                            "partCompositeKey": {
                                "partNumber": $('#finalPartNumber').val(),
                                "productGroupId": $('#finalGroupId').val(),
                                "supplierId": $('#finalSupplierId').val()
                            },
                            "creditCard": {
                                "cardNumber": $('#payNumber').val(),
                                "cardType": $('#finalCardType').val(),
                                "expMonth": parseInt($('#payMonth').val()),
                                "expYear": parseInt($('#payYear').val()),
                                "securityCode": parseInt($('#payCode').val()),
                                "name": $('#payName').val()
                            },
                            "subscriptionInfo": {
                                "renewalPeriod": parseInt($('.filFreq:checked').val()),
                                "nextFullfillmentDate": dateEntered.substr(6,4) + dateEntered.substr(0,2) + dateEntered.substr(3,2)
                            },
                            "ldapUserInfo": {
                                "casId": NS('shc.pd').casId,
                                "unitCenterId": NS('shc.pd').unitCenterId
                            },
                            "quantity": parseInt($('#waterFilterQuantity').val())
                        }),
                        url: apiPathSecure + 'subscriptionservice/enroll',
                        success: function(response) {
                            //console.log(response);
                            xhrRespHandler.enroll(response);
                        },
                        error: function(response) {
                            //console.log('fail');
                            //console.log(response);
                        }
                    });
                }
            });

            //Success handler for enrolment separated because there has to be a different request type in IE
            xhrRespHandler.enroll = function(xhrResp) {
                if (xhrResp.message == 'SUCCESS') {
                    $('.pageTitleHeader, .customAccordionForms').addClass('hidden');
                    $('.subscriptionConfirmation .subConBody').removeClass('hidden');
                    $('html, body').animate({
                        'scrollTop': $('a[name=backToTop]').offset().top
                    }, 1000);
                    $('#confirmNo').html(xhrResp.membershipId);
                    $('#confirmNew').on('click', function () {
                        location.reload();
                    });
                    $('#confirmShipFirst').html(xhrResp.shippingInfo.firstName);
                    $('#confirmShipLast').html(xhrResp.shippingInfo.lastName);
                    $('#confirmShipAddress').html(xhrResp.shippingInfo.address.address1);
                    if (xhrResp.shippingInfo.address.address2 != '') {
                        $('#confirmShipAddress + br').after(xhrResp.shippingInfo.address.address2 + '<br />');
                    }
                    $('#confirmShipCity').html(xhrResp.shippingInfo.address.city);
                    $('#confirmShipState').html(xhrResp.shippingInfo.address.state);
                    $('#confirmShipZip').html(xhrResp.shippingInfo.address.zipCode);
                    $('#confirmBillFirst').html(xhrResp.billingInfo.firstName);
                    $('#confirmBillLast').html(xhrResp.billingInfo.lastName);
                    $('#confirmBillAddress').html(xhrResp.billingInfo.address.address1);
                    if (xhrResp.billingInfo.address.address2 != '') {
                        $('#confirmBillAddress + br').after(xhrResp.billingInfo.address.address2 + '<br />');
                    }
                    $('#confirmBillCity').html(xhrResp.billingInfo.address.city);
                    $('#confirmBillState').html(xhrResp.billingInfo.address.state);
                    $('#confirmBillZip').html(xhrResp.billingInfo.address.zipCode);
                    $('#confirmBillCardType').html(xhrResp.paymentInfo.cardType);
                    $('#confirmBillCardNo').html(xhrResp.paymentInfo.cardNumber);
                    $('#confirmDate').html($('#startDate').html());
                    $('#confirmEmail').html($('#shippingEmail').val());
                    $('#confirmFreq').html($('.filFreq:checked').val());
                    $('#confirmPartNo').html($('#finalPartNumber').val());
                    $('#confirmPartDesc').html($('.filterFound a').html());
                    $('#confirmQty').html($('#waterFilterQuantity').val());
                    //Price formatting in case price is an even integer or tens of cents
                    var formattedUnitPrice = Math.round(xhrResp.price * 100).toString(),
                        formattedTax = (Math.round(xhrResp.paymentInfo.amount * 100) - Math.round(xhrResp.price * 100) * parseInt($('#waterFilterQuantity').val())).toString(),
                        formattedFinalPrice = Math.round(xhrResp.paymentInfo.amount * 100).toString();
                    $('#confirmUnitPrice').html(formattedUnitPrice.substring(0, formattedUnitPrice.length - 2) + '.' + formattedUnitPrice.substring(formattedUnitPrice.length - 2));
                    $('#confirmTax').html(formattedTax.substring(0, formattedTax.length - 2) + '.' + formattedTax.substring(formattedTax.length - 2));
                    $('#confirmTotalPrice').html(formattedFinalPrice.substring(0, formattedFinalPrice.length - 2) + '.' + formattedFinalPrice.substring(formattedFinalPrice.length - 2));
                } else {

                }
            };

            //Custom Regula constraint for dropdowns
            regula.custom({
                name: "DropDown",
                defaultMessage: "Select something",
                validator: function() {
                    var selected = $(this).attr('data-changed') == 'true';
                    return selected;
                }
            });
            //Custom Regula constraint for matching fields
            regula.custom({
                name: "MatchInput",
                defaultMessage: "Fields must match",
                params: ["inputId"],
                validator: function(params) {
                    var match = $('#' + params["inputId"]).val();
                    return (this.value == match);
                }
            });
            //Custom Regula constraint for validating credit cards
            regula.custom({
                name: "CreditCard",
                defaultMessage: "Invalid number",
                validator: function() {
                    var match = /^\d+$/;
                    return (match.test(this.value) && this.value.length > 11 && this.value.length < 17);
                }
            });
            //Custom Regula constraint for when two drop downs must be selected as a pair
            regula.custom({
                name: "SelectGroup",
                defaultMessage: "Select fields",
                params: ["inputId"],
                validator: function(params) {
                    var returnVal = false;
                    if ($('#' + params["inputId"]).attr('data-changed') == 'true' && $(this).attr('data-changed') == 'true') {
                        returnVal = true;
                    }
                    return (returnVal);
                }
            });
        },
        /**
         * Sets billing form input fields
         * @return {void}
         */
        setBillingFields: function (fill) {
            if (fill) {
                $('#billingFirst').val($('#shippingFirst').val()).attr('disabled', 'disabled');
                $('#billingLast').val($('#shippingLast').val()).attr('disabled', 'disabled');
                $('#billingAddress').val($('#shippingAddress').val()).attr('disabled', 'disabled');
                $('#billingApt').val($('#shippingApt').val()).attr('disabled', 'disabled');
                $('#billingCity').val($('#shippingCity').val()).attr('disabled', 'disabled');
                $('#billingState').parent().find('.responsiveDropdown li[data-value=' + $('#shippingState option:selected').val() + '] a').click();
                $('.billingStateDrop .responsiveDropdown ul').addClass('dropdownDisabled');
                $('#billingZip').val($('#shippingZip').val()).attr('disabled', 'disabled');
                $('#billingPhone').val($('#shippingPhone').val()).attr('disabled', 'disabled');
                $('#billingExt').val($('#shippingExt').val()).attr('disabled', 'disabled');
                $('#finalBillingFName').val($('#shippingFirst').val());
                $('#finalBillingLName').val($('#shippingLast').val());
                $('#finalBillingAddress').val($('#shippingAddress').val());
                $('#finalBillingApt').val($('#shippingApt').val());
                $('#finalBillingCity').val($('#shippingCity').val());
                $('#finalBillingState').val($('#shippingState').val());
                $('#finalBillingZip').val($('#shippingZip').val());
                $('#finalBillingPhone').val($('#shippingPhone').val());
                $('#finalBillingExt').val($('#shippingExt').val());
            } else {
                $('#billingFirst').val('').removeAttr('disabled');
                $('#billingLast').val('').removeAttr('disabled');
                $('#billingAddress').val('').removeAttr('disabled');
                $('#billingApt').val('').removeAttr('disabled');
                $('#billingCity').val('').removeAttr('disabled');
                $('.billingStateDrop .responsiveDropdown ul').removeClass('dropdownDisabled');
                $('#billingState').parent().find('.responsiveDropdown li[data-value=ZZ] a').click();
                $('#billingZip').val('').removeAttr('disabled');
                $('#billingPhone').val('').removeAttr('disabled');
                $('#billingExt').val('').removeAttr('disabled');
                $('#finalBillingFName').val('');
                $('#finalBillingLName').val('');
                $('#finalBillingAddress').val('');
                $('#finalBillingApt').val('');
                $('#finalBillingCity').val('');
                $('#finalBillingState').val('');
                $('#finalBillingZip').val('');
                $('#finalBillingPhone').val('');
                $('#finalBillingExt').val('');
            }
        },
        /**
         * Binds Regula to the current form elements
         * @return {void}
         */
        bindRegula: function (formNumber) {
            regula.unbind();
            switch(formNumber) {
                case 1:
                    regula.bind(
                        {element: document.getElementById("ntModel"),
                            constraints: [
                                {constraintType: regula.Constraint.Checked,
                                    params: {message: "Please select a search type"}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("frequency12"),
                            constraints: [
                                {constraintType: regula.Constraint.Checked,
                                    params: {message: "Please select a frequency"}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("odInput"),
                            constraints: [
                                {constraintType: regula.Constraint.Pattern,
                                    params: {regex: /[0-9]{2}\/[0-9]{2}\/[0-9]{4}/,message: "Please enter a date"}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("waterFilterQuantity"),
                            constraints: [
                                {constraintType: regula.Constraint.Min,
                                    params: {value: 1, message: "Please enter a quantity"}
                                }
                            ]}
                    );
                    break;
                case 2:
                    regula.bind(
                        {element: document.getElementById("shippingFirst"),
                            constraints: [
                                {constraintType: regula.Constraint.Alpha,
                                    params: {message: "Please enter your first name."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("shippingLast"),
                            constraints: [
                                {constraintType: regula.Constraint.Alpha,
                                    params: {message: "Please enter your last name."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("shippingAddress"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter your address."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("shippingCity"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter your city."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("shippingState"),
                            constraints: [
                                {constraintType: regula.Constraint.DropDown,
                                    params: {message: "Please select your state."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("shippingZip"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter your 5-digit ZIP code."}
                                }
                            ]}
                    );
                    if (!$('.countyRow').hasClass('hidden')) {
                        regula.bind(
                            {element: document.getElementById("shippingCounty"),
                                constraints: [
                                    {constraintType: regula.Constraint.DropDown,
                                        params: {message: "Please select your county."}
                                    }
                                ]}
                        );
                    }
                    regula.bind(
                        {element: document.getElementById("shippingPhone"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter a valid 10-digit phone number."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("shippingEmail"),
                            constraints: [
                                {constraintType: regula.Constraint.Pattern,
                                    params: {regex: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/, message: "Please enter your email address."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("shippingConfirm"),
                            constraints: [
                                {constraintType: regula.Constraint.MatchInput,
                                    params: {inputId: "shippingEmail", message: "Please confirm your email address."}
                                }
                            ]}
                    );
                    break;
                case 3:
                    regula.bind(
                        {element: document.getElementById("billingFirst"),
                            constraints: [
                                {constraintType: regula.Constraint.Alpha,
                                    params: {message: "Please enter your first name."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("billingLast"),
                            constraints: [
                                {constraintType: regula.Constraint.Alpha,
                                    params: {message: "Please enter your last name."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("billingAddress"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter your address."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("billingCity"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter your city."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("billingState"),
                            constraints: [
                                {constraintType: regula.Constraint.DropDown,
                                    params: {message: "Please select your state."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("billingZip"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter your 5-digit ZIP code."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("billingPhone"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter a valid 10-digit phone number."}
                                }
                            ]}
                    );
                    break;
                case 4:
                    regula.bind(
                        {element: document.getElementById("payNumber"),
                            constraints: [
                                {constraintType: regula.Constraint.CreditCard,
                                    params: {message: "Please enter your 16-digit credit card number."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("payCode"),
                            constraints: [
                                {constraintType: regula.Constraint.NotBlank,
                                    params: {message: "Please enter your security code."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("payMonth"),
                            constraints: [
                                {constraintType: regula.Constraint.SelectGroup,
                                    params: {inputId: "payYear", message: "Please select a month and a year."}
                                }
                            ]}
                    );
                    regula.bind(
                        {element: document.getElementById("payName"),
                            constraints: [
                                {constraintType: regula.Constraint.Pattern,
                                    params: {regex: /^[a-zA-Z\s]+$/, message: "Please enter the name on the card."}
                                }
                            ]}
                    );
                    break;
                default:
                //Error
            }
        },
        /**
         * Validates the forms and displays friendly errors
         * @return {void}
         */
        validate: function (button) {
            var self = this,
                regulaResponse = regula.validate();

            // Clear out old error messages
            $('.accordion-inner .error').remove();
            // Remove validation on individual fields and error border color
            $('.errorField').off('change.error').removeClass('errorField');
            $('.dropError').removeClass('dropError');

            // Place the error messages under each field
            for (i = 0; i < regulaResponse.length; i = i + 1) {
                var currentInvalid = $(regulaResponse[i].failingElements[0]);
                currentInvalid.after('<span class="error">*' + regulaResponse[i].message + '</span>');
                currentInvalid.addClass('errorField');
                if (currentInvalid.siblings('.responsiveDropdown').length > 0) {
                    currentInvalid.siblings('.responsiveDropdown').find('.new-btn-dropdown').addClass('dropError');
                    //Custom error handling for SelectGroup
                    if (regulaResponse[i].constraintName == "SelectGroup") {
                        var otherSelect = $('#' + regulaResponse[i].constraintParameters.inputId);
                        currentInvalid.attr('data-match', regulaResponse[i].constraintParameters.inputId);
                        if (currentInvalid.find('option:selected').index() > 0) {
                            currentInvalid.siblings('.responsiveDropdown').find('.new-btn-dropdown').removeClass('dropError');
                        }
                        if (otherSelect.find('option:selected').index() < 1) {
                            otherSelect.siblings('.responsiveDropdown').find('.new-btn-dropdown').addClass('dropError');
                        }
                    }
                }
                currentInvalid.on('change.error', function (e) {
                    var z = 0,
                        remainingErrors = regula.validate(),
                        stillError = false;

                    // Search for field among list of invalid fields
                    for (z = 0; z < remainingErrors.length; z = z + 1) {
                        // Check if field is still in error
                        if ($(remainingErrors[z].failingElements[0]).attr('id') == $(this).attr('id')) {
                            stillError = true;
                        }
                    }
                    if (!stillError) {
                        // Clear out error message
                        $(this).siblings('.error').remove();
                        // Remove validation on individual field
                        $(this).off('change.error').removeClass('errorField');
                        if ($(this).siblings('.responsiveDropdown').length > 0) {
                            $(this).siblings('.responsiveDropdown').find('.new-btn-dropdown').removeClass('dropError');
                            if ($(this).attr('data-match') != undefined) {
                                $('#' + $(this).attr('data-match')).siblings('.responsiveDropdown').find('.new-btn-dropdown').removeClass('dropError');
                            }
                        }
                    }
                });
            }

            // Submit the form if there are no errors
            if (regulaResponse.length == 0) {
                var thisToggle = $('#' + button.target.attributes['data-this-toggle-id'].value),
                    completedToggles = $('.accordion-toggle[data-status=complete]').length,
                    nextToggle = $('.accordion-toggle[data-status=unavailable]:eq(0)'),
                    formNumber = button.target.attributes['data-form-number'].value;

                //Performing credit card validation before moving to last step
                if (parseInt(formNumber) == 4) {
                    var number = $('#payNumber').val().replace(/[a-zA-Z\s-]/g, "");
                    var month = $('#payMonth').val();
                    var year = $('#payYear').val();
                    var code = $('#payCode').val().replace(/[a-zA-Z\s-]/g, "");
                    var name = $('#payName').val().replace(/[\s]/g, "");
                    var cardType = $('#finalCardType').val();

                    if (cardType != '') {
                        if ($.browser.msie) {
                            var xdr = new XDomainRequest();
                            xdr.open('POST', apiPathSecure + 'validate/paymentcard', false);
                            xdr.send('{"cardNumber":"' + number + '","cardType":"' + cardType + '","expMonth":"' + month + '","expYear":"' + year + '","securityCode":"' + code + '","name":"' + name + '"}');
                            xdr.onload = function () {
                                xhrRespHandler.showPayValResult($.parseJSON(xdr.responseText), cardType, thisToggle, completedToggles, nextToggle);
                            };
                        } else {
                            $.ajax({
                                type: "POST",
                                dataType: "json",
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json'
                                },
                                cache: false,
                                data: JSON.stringify({
                                    'cardNumber': number,
                                    'cardType': cardType,
                                    'expMonth': month,
                                    'expYear': year,
                                    'securityCode': code,
                                    'name': name
                                }),
                                url: apiPathSecure + 'validate/paymentcard',
                                success: function(response) {
                                    //console.log(response);
                                    xhrRespHandler.showPayValResult(response, cardType, thisToggle, completedToggles, nextToggle);
                                },
                                error: function(response) {
                                    //console.log('fail');
                                    //console.log(response);
                                    xhrRespHandler.showPayValError();
                                }
                            });
                        }
                    } else {
                        $('#finalCardType').val('');
                        $('.payAlert').html('Not a valid credit card type.');
                        $('.payAlert').removeClass('hidden');
                    }
                } else {
                    self.openStep(thisToggle, completedToggles, nextToggle);
                }
            }

            //Success and error handlers for payment verification separated because there has to be a different request type in IE
            xhrRespHandler.showPayValResult = function(xhrResp, type, thisToggle, completedToggles, nextToggle) {
                if (xhrResp.status == 5) {
                    $('.payAlert').addClass('hidden');
                    $('#finalCardType').val(type);
                    self.openStep(thisToggle, completedToggles, nextToggle);
                } else {
                    $('.payAlert').html(xhrResp.message);
                    $('.payAlert').removeClass('hidden');
                    $('#finalCardType').val('');
                }
            };
            xhrRespHandler.showPayValError = function() {
                $('.payAlert').html('Error with request.');
                $('.payAlert').removeClass('hidden');
            }
        },
        /**
         * Opens up the next step
         * @return {void}
         */
        openStep: function (toggle, cTog, nTog) {
            for (var i = 0; i < cTog; i++) {
                var currentToggle = $('.accordion-toggle[data-status=complete]:eq(' + i + ')');
                currentToggle.attr('href', currentToggle.attr('data-href')).attr('data-toggle', 'collapse');
            }
            //Separated so that opening a completed step can deactivate the other toggles
            if ($('.accordion-toggle[data-status=unavailable]:eq(0)').length > 0) {
                toggle.attr('href', toggle.attr('data-href')).attr('data-toggle', 'collapse');
                toggle.find('.cafStepEdit').removeClass('hidden');
                toggle.click();
                toggle.attr('data-status', 'complete');
                nTog.attr('data-status', 'incomplete');
                nTog.attr('href', nTog.attr('data-href')).attr('data-toggle', 'collapse');
                nTog.click();
                nTog.removeAttr('href').attr('data-toggle', 'false');
            }
        }
    };
}());
/*global $:true, Class:true */
var guideNavigation = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes guideNavigation class
         */
        init: function (el) {
            // Parameters
            this.el = el;
            this.classOn = 'gn-sticky';
            this.classOff = 'gn-unsticky';
            this.maxScroll = false;
            // Bind Events
            this.bindEvents();
            this.callback = '';

            // set scroll offsets for links
            $(".guideNavigation li a").each( function (index, element) {
                $( element ).on("click", function() {
                    var $href = $(this).attr('href'),
                        name = $href.substring(1),
                        anchor = $('[name='+name+']').offset(),
                        stickyHeight = $('.guideNavigation')[0].offsetHeight + 5;
                    $('html,body').animate({
                        scrollTop: anchor.top - stickyHeight
                    });
                })

            });

        },
        /**
         * Given scroll position of parent window, applies and removes "sticky" css classes
         * @param {number} val Required current scrolltop of window
         * @return {void}
         */
        checkState: function(val) {
            var self = this,
                breakpoint = self.el.prev().offset().top + self.el.prev()[0].offsetHeight;

            if (self.el !== false) {
                if (val > breakpoint && !self.el.hasClass(self.classOn)) {
                    self.el.removeClass(self.classOff).addClass(self.classOn);
                } else if (val <= breakpoint && !self.el.hasClass(self.classOff)) {
                    self.el.removeClass(self.classOn).addClass(self.classOff);
                }
            }
        },
        /**
         * Sets max scrolling distance for sticky nav functionality
         * @param {int} max Optional maxscroll value
         */
        maxScroll: function (max) {
            var self = this;

            self.maxScroll = max !== null ? maxScroll : false;
        },
        /**
         * Bind events
         * @return {void}
         */
        bindEvents: function () {
            var self = this;

            $(window).bind('scroll', function() {
                var scrollDist = $(window).scrollTop();
                self.checkState(scrollDist);
            });
        }
    };
}());
/*global window:true, $:true, Class:true, mainSitePath:true */
var messageHandler = Class.extend(function () {
    "use strict";

    return {
        /**
         * @singleton windowMessaging
         * Singleton class that handles window messaging events
         *
         * init: On load events to fire
         */
        init: function () {
        },
        /**
         * Handle posted message
         * @param {object} message Message object
         */
        handleMessage: function (message) {
            var self = this,
                formattedData = self.format(message.data.toString()),
                modal = null,
                iFrame = null,
                modalHeight = 0,
                deltaHeight = 0,
                iFrameOffsetTop = 0,
                newIFrameHeight = 0,
                newModalHeight = 0;

            // Validate message object
            if (formattedData) {
                // Take decisions based on properties of the message's data object
                if (formattedData.closeModal) {
                    $(formattedData.closeModal).modal('hide');
                }
                if (formattedData.openModal) {
                    $(formattedData.openModal).modal('show');
                }
                if (formattedData.redirect) {
                    document.location.href = formattedData.redirect;
                }
                if (formattedData.reload && $('html').hasClass('lt-ie10') === false) {
                    document.location.reload();
                }
                if (formattedData.reload && $('html').hasClass('lt-ie10') === true) {
                    document.location.href = document.location.href;
                }
                if (formattedData.heightChange) {
                    deltaHeight = parseInt(formattedData.heightChange);
                    modal = $(formattedData.affectedModal);
                    modalHeight = modal.height();
                    iFrame = $('iframe', modal);
                    iFrameOffsetTop = iFrame.offset().top;
                    newIFrameHeight = (modalHeight + deltaHeight) - iFrameOffsetTop;
                    newModalHeight = modalHeight + deltaHeight;

                    iFrame.height(newIFrameHeight);
                    modal.height(newModalHeight);
                }
            }
        },
        format: function (data) {
            var items = data.split('&'),
                returnData = {},
                name = '',
                val = '';

            for (var i = 0; i < items.length; i++) {
                name = items[i].split('=')[0];
                val = items[i].split('=')[1];
                returnData[name] = val;
            }

            return returnData;
        }
    }
}());
function modelDiagramPartList(modelNumber, formattedModelNumber, brandId, categoryId, diagramPageId, documentId, flagMessage, brandName, modelDescription) {

    var urlName = "/bin/searspartsdirect/model/partlist?modelnumber=" + formattedModelNumber + "&brandId=" + brandId + "&productCategoryId="
        + categoryId + "&diagramPageId=" + diagramPageId + "&documentId=" + documentId;
    console.log(urlName);
    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            if(typeof data.jsonPartList !== 'undefined'){
                showPartList(data, flagMessage, modelNumber, brandId, categoryId, brandName, modelDescription);
            }else{
                console.log("Model Diagram - Part List -- JSON not formed correctly");
            }
        },
        error : function() {
            console.log("Model Diagram - Part List -- API Failure");
        }
    });
}

function showPartList(data, flagMessage, modelNumber, brandId, categoryId, brandName, modelDescription){
    var jsonPartList = data.jsonPartList;
    jsonPartList = JSON.parse(jsonPartList);
    var jsonResponse = jsonPartList.parts;
    var jsonLength = jsonResponse.length;

    flagMessage = flagMessage.replace("&#39;","'");
    var flagJson = JSON.parse(flagMessage);

    if (jsonLength != 0) {

        for ( var j = 0; j < jsonResponse.length; j++) {
            var topPartsList = "";
            var isDescriptionClickable = false;
            if(jsonResponse[j].priceAndAvailability.availabilityStatus == "INST" || jsonResponse[j].priceAndAvailability.availabilityStatus == "PNF" || jsonResponse[j].priceAndAvailability.availabilityStatus == "BORD"){
                isDescriptionClickable = true;
            }
            if(jsonResponse[j].priceAndAvailability.availabilityStatus == "INST"){
                // In Stock
                topPartsList = "<div class=\"partListItemPrice\">"
                    + "<strong>$"+jsonResponse[j].priceAndAvailability.sellingPrice+"</strong> " + showFlagMessage(flagJson, jsonResponse[j].priceAndAvailability.availabilityStatus)
                    + "</div>"
                    + "<div class=\"partListItemQuantity\">"
                    + "<label>Qty</label>"
                    + "<input type=\"text\" class=\"addToCartQuantity_js\" value=\"1\" />"
                    + "</div>"
                    + "<div class=\"partListItemAdd\">"
                    + "<button type=\"button\" data-partnumber=\"partNumber\" data-divid=\"productGroupID\" data-plsid=\"supplierID\" class=\"new-btn new-btn-search addToCart_js\">Add to Cart</button>"
                    + "</div>";
            }else {
                // Other Flags -- BORD, TECH, PNF, NLA -- Need to show only Flag Message
                topPartsList = showFlagMessage(flagJson, jsonResponse[j].priceAndAvailability.availabilityStatus);
            }

            var description = (isDescriptionClickable == true) ? "<a href=\"/content/searspartsdirect/en/partdetail.html?modelNumber="+modelNumber+"&brandId="+brandId+"&categoryId="+categoryId+"&brandName="+brandName+"&modelDescription="+modelDescription+"\">"+jsonResponse[j].description+"</a>" : jsonResponse[j].description;

            if(j ==0 && typeof jsonResponse[j].typeOfPart !== 'undefined' && jsonResponse[j].typeOfPart == "water_filter_part"){
                $("#partListItems").append("<div class=\"partListItem row-fluid\">"
                    + "<div class=\"new-span-general partListItemDescription\">"
                    + "* Official water filter for this model"
                    + (typeof jsonResponse[j].partImage.imageURL !== 'undefined' ? "<div class=\"partListItemImage\"><img src=\""+jsonResponse[j].partImage.imageURL+"\" /></div>" : "")
                    + "<p>" + description + "<br />"
                    + "Part #: "+jsonResponse[j].partCompositeKey.partNumber
                    + "</p>"
                    + "</div>"
                    + "<div class=\"new-span-general partListItemCart\">"
                    + "<div class=\"partListItemPrice\">"
                    + "<strong>$"+jsonResponse[j].priceAndAvailability.sellingPrice+"</strong> In stock"
                    + "</div>"
                    + "<div class=\"partListItemAdd\">"
                    + "<button type=\"button\" data-partnumber=\"partNumber\" data-divid=\"productGroupID\" data-plsid=\"supplierID\" class=\"new-btn new-btn-search addToCart_js\">Product Details</button>"
                    + "</div>"
                    + "</div>"
                    + "<br/><div>Set up Automatic Reorder on this product and get FREE Standard Shipping today! Details</div>"
                    + "</div>");
            }else{
                $("#partListItems").append("<div class=\"partListItem row-fluid\">"
                    + "<div class=\"new-span-general diagramPosition\">"
                    + "<p><span>"+jsonResponse[j].keyId+"</span><br />on diagram</p>"
                    + "</div>"
                    + "<div class=\"new-span-general partListItemDescription\">"
                    + (typeof jsonResponse[j].partImage.imageURL !== 'undefined' ? "<div class=\"partListItemImage\"><img src=\""+jsonResponse[j].partImage.imageURL+"\" /></div>" : "")
                    + "<p>" + description + "<br />"
                    + "Part #: "+jsonResponse[j].priceAndAvailability.originalPartNumber
                    + (((jsonResponse[j].priceAndAvailability.originalPartNumber != jsonResponse[j].partCompositeKey.partNumber) && jsonResponse[j].priceAndAvailability.availabilityStatus == "INST") ? "<br /><small><i class=\"icon-share flip-vertical\">&nbsp;</i> Substitution: "+jsonResponse[j].partCompositeKey.partNumber+"</small>" : "")
                    + ((jsonResponse[j].priceAndAvailability.partReturnable == false && jsonResponse[j].priceAndAvailability.availabilityStatus == "INST") ? "<br /><span class=\"error\">This item is not returnable</span>" : "")
                    + "</p>"
                    + "</div>"
                    + "<div class=\"new-span-general partListItemCart\">"
                    + topPartsList
                    + "</div></div>");
            }
        }
    }
}
var modelPartListDiagram = new stickyItem('#partListDiagramImage');
modelPartListDiagram.setBreakPoint('top');
modelPartListDiagram.setClassToggles('fixed','sticky');
$(window).scroll(function(){
    modelPartListDiagram.checkState( $(window).scrollTop() );
});
/*global window:true, $:true, Class:true, mainSitePath:true */
var modelHeader = Class.extend(function() {
    "use strict";

    return {
        /**
         * Initializes modelHeader class
         * @param {object} el Target element
         */
        init : function(el) {
            // Parameters
            this.el = el;
            // Events
            this.bindEvent();
        },
        /**
         * toggle model section
         *
         * @return {void}
         */
        bindEvent : function() {
            $('.modelInfo').click(function() {
                $(".icon-chevron-up").toggleClass("icon-chevron-down");
                $('#modelSection').slideToggle(function() {
                });
            });
        }
    }
}());
/*global window:true, $:true, Class:true */
var modelNumberSearch = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes modelNumberSearch class
         * @param {object} el Target element
         */
        init: function (el) {
            // Parameters
            this.el = $(el);
            // Properties
            this.inputField = null;
            this.inputHelp = '';
            this.inputHelpMobile = '';
            this.messageArea = null;
            this.button = null;
            // Find elements
            this.setProperties();
            // Bind events
            this.bindEvents();
        },
        /**
         * Finds related elements
         * @return {void}
         */
        setProperties: function () {
            var self = this,
                su = window.SPDUtils;

            // Input field
            self.inputField = $('input[type="text"]', self.el);
            self.inputHelp = self.inputField.data('inputhelp');
            self.inputHelpMobile = self.inputField.data('inputhelpmobile');
            // Message area
            self.messageArea = $('.display-message', self.el);
            // Button
            self.button = $('button', self.el);
        },
        /**
         * Checks input value and starts AJAX call
         * @return {void}
         */
        search: function () {
            var self = this,
                su = window.SPDUtils,
                searchAddress = apiPath + 'modelSearch/modelSearch',
                searchTerm = su.validString(self.inputField.attr('value'));

            // Check the input value
            if (searchTerm !== '' && searchTerm !== self.inputHelp && searchTerm !== self.inputHelpMobile) {
                // Make an AJAX call
                $.ajax({
                    type: 'GET',
                    url: searchAddress,
                    dataType: 'JSON',
                    data: {
                        modelNumber: searchTerm
                    }
                })
                    .success(function (data) {
                        self.searchResponse(data, searchTerm);
                    })
                    .fail(function () {
                        self.displayMessage('We were unable to complete your search.', 'error');
                    });
            } else {
                // Display an error message
                self.displayMessage('Please provide a model number.', 'error');
            }
        },
        /**
         * Handles search results
         * @param {object} resp Response from AJAX call
         * @param {string} searchTerm Term entered by the user
         * @return {void}
         */
        searchResponse: function (data, searchTerm) {
            var self = this,
                su = window.SPDUtils,
                count = 0;

            try {
                count = su.validNumber(data.count);
            } catch(e) {
            }

            // Did the AJAX call return valid data?
            if (count) {
                // Redirect if there is one item
                // Display a message
                switch (count) {
                    case 0:
                        self.displayMessage('We\'re sorry, no results were found. Please check that you entered your model number correctly and try again.', 'error');
                        break;
                    case 1:
                        self.redirect(data.models[0]);
                        break;
                    default:
                        self.displayMessage('We found multiple results for this search. <a href="' + mainSitePath + '/partsdirect/part-model/' + searchTerm + '">View search results</a>', 'success');
                        break;
                }
            } else {
                self.displayMessage('We\'re sorry, no results were found. Please check that you entered your model number correctly and try again.', 'error');
            }
        },
        /**
         * Handles a redirect to the single result servlet
         * @param {object} resp Response from AJAX call
         * @return {void}
         */
        redirect: function (data) {
            var self = this,
                su = window.SPDUtils,
                query = '',
                brandName = '',
                categoryName = '',
                modelNumber = '',
                modelUrl = '';

            if (su.validString(data.brandName) !== '') {
                brandName = su.validString(data.brandName);
            } else if (su.validString(data.formattedBrandName) !== '') {
                brandName = su.validString(data.formattedBrandName);
            }

            // Check the data object
            if (brandName !== '') {
                brandName = encodeURI(su.validString(data.brandName));
                categoryName = encodeURI(su.validString(data.categoryName));
                modelNumber = encodeURI(su.validString(data.modelNumber));

                if (su.validString(data.modelURL) !== '') {
                    modelUrl = encodeURI(mainSitePath + '/partsdirect' + su.validString(data.modelURL));
                } else {
                    modelUrl = encodeURI(mainSitePath + '/partsdirect' + su.validString(data.csrURL));
                }

                query += '?brand=' + brandName;
                query += '&category=' + categoryName;
                query += '&model=' + modelNumber;
                query += '&link=' + modelUrl + '?searchType=RepairHelp';

                document.location.href = su.getLocationDetails().fullAddress + modelSearchServletPath + query;
            } else {
                self.displayMessage('There was a problem redirecting you.', 'error');
            }
        },
        /**
         * Displays a message to the user
         * @param {string} msg Message HTML
         * @param {type} type Class to use
         * @return {void}
         */
        displayMessage: function (msg, type) {
            var self = this;

            // Set the message
            self.messageArea.html(msg);
            // Set the classes; faster than using toggles
            self.messageArea.attr('class', 'display-message ' + type);
        },
        /**
         * Bind form events
         * @return {void}
         */
        bindEvents: function () {
            var self = this,
                key = -1;

            // Bind input events
            self.inputField.bind('keyup', function (e) {
                e.preventDefault();
                self.checkKey(e);
            });
            // Bind button
            self.button.bind('click', function (e) {
                e.preventDefault();
                self.search();
            });
        },
        /**
         * Perform search if the user hits Enter
         * @param {event} e Event fired
         * @return {void}
         */
        checkKey: function (e) {
            var self = this,
                key = -1;

            if (e.keyCode) {
                key = e.keyCode;
            } else if (e.which) {
                key = e.which;
            }

            // Search if the user hit enter
            if (key === 13) {
                self.search();
            }
        }
    };
}());
function modelSearchByPartName(modelNumber, formattedModelNumber, brandId, categoryId, description, flagMessage) {

    var urlName = "/bin/searspartsdirect/model/searchbypartname?modelnumber="+formattedModelNumber
        +"&brandId="+brandId+"&productCategoryId="+categoryId+"&partDescription="+description;

    flagMessage = flagMessage.replace("&#39;","'");
    var flagJson = JSON.parse(flagMessage);

    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            var jsonResponse = data.searchByPartName;
            jsonResponse = JSON.parse(jsonResponse);
            var jsonLength = jsonResponse.length;
            if (jsonLength != 0) {
                $("#searchCountDiv").show();
                $("#searchCount").append(jsonLength);
                for ( var j = 0; j < jsonResponse.length; j++) {
                    var topPartsList = "";
                    var isDescriptionClickable = false;
                    if(jsonResponse[j].priceAndAvailability.availabilityStatus == "INST" || jsonResponse[j].priceAndAvailability.availabilityStatus == "PNF" || jsonResponse[j].priceAndAvailability.availabilityStatus == "BORD"){
                        isDescriptionClickable = true;
                    }
                    if(jsonResponse[j].priceAndAvailability.availabilityStatus == "INST"){
                        // In Stock
                        topPartsList = "<div class=\"partListItemPrice\">"
                            + "<strong>$"+jsonResponse[j].priceAndAvailability.sellingPrice+"</strong> " + showFlagMessage(flagJson, jsonResponse[j].priceAndAvailability.availabilityStatus)
                            + "</div>"
                            + "<div class=\"partListItemQuantity\">"
                            + "<label>Qty</label>"
                            + "<input type=\"text\" class=\"addToCartQuantity_js\" value=\"1\" />"
                            + "</div>"
                            + "<div class=\"partListItemAdd\">"
                            + "<button type=\"button\" data-partnumber=\"partNumber\" data-divid=\"productGroupID\" data-plsid=\"supplierID\" class=\"new-btn new-btn-search addToCart_js\">Add to Cart</button>"
                            + "</div>";
                    }else {
                        // Other Flags -- BORD, TECH, PNF, NLA -- Need to show only Flag Message
                        topPartsList = showFlagMessage(flagJson, jsonResponse[j].priceAndAvailability.availabilityStatus);
                    }

                    var description = (isDescriptionClickable == true) ? "<a href=\"http://www.urlforthepart.com\">"+jsonResponse[j].description+"</a>" : jsonResponse[j].description;

                    if(j ==0 && typeof jsonResponse[j].typeOfPart !== 'undefined' && jsonResponse[j].typeOfPart == "water_filter_part"){
                        $("#partNameResults").append("<div class=\"partListItem row-fluid\">"
                            + "<div class=\"new-span-general partListItemDescription\">"
                            + "* Official water filter for this model"
                            + (typeof jsonResponse[j].partImage.imageURL !== 'undefined' ? "<div class=\"partListItemImage\"><img src=\""+jsonResponse[j].partImage.imageURL+"\" /></div>" : "")
                            + "<p>" + description + "<br />"
                            + "Part #: "+jsonResponse[j].partCompositeKey.partNumber
                            + "</p>"
                            + "</div>"
                            + "<div class=\"new-span-general partListItemCart\">"
                            + "<div class=\"partListItemPrice\">"
                            + "<strong>$"+jsonResponse[j].priceAndAvailability.sellingPrice+"</strong> In stock"
                            + "</div>"
                            + "<div class=\"partListItemAdd\">"
                            + "<button type=\"button\" data-partnumber=\"partNumber\" data-divid=\"productGroupID\" data-plsid=\"supplierID\" class=\"new-btn new-btn-search addToCart_js\">Product Details</button>"
                            + "</div>"
                            + "</div>"
                            + "<br/><div>Set up Automatic Reorder on this product and get FREE Standard Shipping today! Details</div>"
                            + "</div>");
                    }else{
                        $("#partNameResults").append("<div class=\"partListItem row-fluid\">"
                            + "<div class=\"new-span-general partListItemDescription\">"
                            + (typeof jsonResponse[j].partImage.imageURL !== 'undefined' ? "<div class=\"partListItemImage\"><img style=\"width:100px; height:100px;\" src=\""+jsonResponse[j].partImage.imageURL+"\" /></div>" : "")
                            + "<p>" + description + "<br />"
                            + "Part #: "+jsonResponse[j].priceAndAvailability.originalPartNumber
                            + "<br/>Found in diagram: "+jsonResponse[j].foundInDiargamDescription
                            + (((jsonResponse[j].priceAndAvailability.originalPartNumber != jsonResponse[j].partCompositeKey.partNumber) && jsonResponse[j].priceAndAvailability.availabilityStatus == "INST") ? "<br /><small><i class=\"icon-share flip-vertical\">&nbsp;</i> Substitution: "+jsonResponse[j].partCompositeKey.partNumber+"</small>" : "")
                            + ((jsonResponse[j].priceAndAvailability.partReturnable == false && jsonResponse[j].priceAndAvailability.availabilityStatus == "INST") ? "<br /><br/><span class=\"error\">This item is not returnable</span>" : "")
                            + "</p>"
                            + "</div>"
                            + "<div class=\"new-span-general partListItemCart\">"
                            + topPartsList
                            + "</div></div>");
                    }
                }
            }
        },
        error : function() {
            console.log("Search By Part Name -- API Failure");
        }
    });
}
function partSearchResults(partNumber, flagMessage) {
    var urlName = "/bin/searspartsdirect/search/searchservlet?partnumber="+partNumber;
    flagMessage = flagMessage.replace("&#39;","'");
    var flagJson = JSON.parse(flagMessage);

    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            var jsonResponse = data.partResults;
            jsonResponse = JSON.parse(jsonResponse);
            var jsonLength = jsonResponse.length;

            var modelCount = 0;

            if(typeof data.totalCount !== 'undefined'){
                modelCount = parseInt(data.totalCount);
            }
            if (jsonLength != 0) {
                $("#partCountHeader").show();
                $("#partCount").empty();
                $("#partCount").append(jsonLength);

                if(modelCount != 0){
                    $("#modelCountHeader").show();
                    $("#modelCount").empty();
                    $("#modelCount").append(modelCount);
                }
                for ( var j = 0; j < jsonLength; j++) {
                    var topPartsList = "";
                    var isDescriptionClickable = false;

                    if(jsonResponse[j].priceAndAvailability.availabilityStatus == "INST" || jsonResponse[j].priceAndAvailability.availabilityStatus == "PNF" || jsonResponse[j].priceAndAvailability.availabilityStatus == "BORD"){
                        isDescriptionClickable = true;
                    }
                    if(jsonResponse[j].priceAndAvailability.availabilityStatus == "INST"){
                        // In Stock -- Displaying Quantity & Add To Cart
                        topPartsList = "<div class=\"partListItemPrice\">"
                            + "<strong>$"+jsonResponse[j].priceAndAvailability.sellingPrice+"</strong> " + showFlagMessage(flagJson, jsonResponse[j].priceAndAvailability.availabilityStatus)
                            + "</div>"
                            + "<div class=\"partListItemQuantity\">"
                            + "<label>Qty</label>"
                            + "<input type=\"text\" class=\"addToCartQuantity_js\" value=\"1\" />"
                            + "</div>"
                            + "<div class=\"partListItemAdd\">"
                            + "<button type=\"button\" data-partnumber=\"partNumber\" data-divid=\"productGroupID\" data-plsid=\"supplierID\" class=\"new-btn new-btn-search addToCart_js\">Add to Cart</button>"
                            + "</div>";
                    }else {
                        // Other Flags -- BORD, TECH, PNF, NLA -- Need to show only Flag Message
                        topPartsList = showFlagMessage(flagJson, jsonResponse[j].priceAndAvailability.availabilityStatus);
                    }

                    var description = (isDescriptionClickable == true) ? "<a href=\"/content/searspartsdirect/en/partdetail.html\">"+jsonResponse[j].description+"</a>" : jsonResponse[j].description;

                    $("#partSearchResults").append("<div class=\"partListItem row-fluid\">"
                        + "<div class=\"new-span-general partListItemDescription\">"
                        + (typeof jsonResponse[j].partImage.imageURL !== 'undefined' ? "<div class=\"partListItemImage\"><img style=\"width:100px; height:100px;\" src=\""+jsonResponse[j].partImage.imageURL+"\" /></div>" : "")
                        + "<p>" + description + "<br />"
                        + "Part #: "+jsonResponse[j].priceAndAvailability.originalPartNumber
                        + (((jsonResponse[j].priceAndAvailability.originalPartNumber != jsonResponse[j].partCompositeKey.partNumber) && jsonResponse[j].priceAndAvailability.availabilityStatus == "INST") ? "<br /><small><i class=\"icon-share flip-vertical\">&nbsp;</i> Substitution: "+jsonResponse[j].partCompositeKey.partNumber+"</small>" : "")
                        + ((jsonResponse[j].priceAndAvailability.partReturnable == false && jsonResponse[j].priceAndAvailability.availabilityStatus == "INST") ? "<br /><span class=\"error\">This item is not returnable</span>" : "")
                        + "</p>"
                        + "</div>"
                        + "<div class=\"new-span-general partListItemCart\">"
                        + topPartsList
                        + "</div></div>");
                }
            }
        },
        error : function() {
            console.log("Part Search Results -- API Failure");
        }
    });
}

function showFlagMessage(flagJson, flagStatus){
    return (typeof flagStatus !== 'undefined' ? flagJson[flagStatus] : "");
}
/*global window:true, $:true, Class:true */
var recommendedParts = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes category101 class
         * @param {object} el Target element
         */
        init: function (el) {
            // Parameters
            this.el = $(el);
            // Properties
            this.uniqueID = window.SPDUtils.getGUID();
            this.parentID = 'parent_' + this.uniqueID;
            // set uniqueIDs on Accordion;
            this.setAccordionIDs();
            // default accordions to closed
            //this.initAccordion();
            // NOTE: on request of business, above line commented out to force
            // recommended part accordions to default to open state. 12/17/13 - DJMcG
        },

        /**
         * sets unique ids in case of multiple
         * find this part components on page
         * @return {void}
         */
        setAccordionIDs: function () {
            var self = this;

            $('div.accordion', self.el).attr('id', self.parentID);
            $('div.accordion-body', self.el).attr('id', self.uniqueID);
            $('a.accordion-toggle', self.el).attr('data-target', "#"+self.uniqueID);
        },

        /**
         * removes the class 'in' from the accordion-body
         * to ensure that the accordion defaults to closed.
         * @return {void}
         */
        initAccordion: function () {
            var self = this;

            $('div.accordion-body', self.el).removeClass('in');
        }
    }
}());
/*global window:true, $:true, Class:true */
var responsiveDropdown = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes responsiveDropdown class
         * @param {object} el Target element
         */
        init: function (el) {
            // Parameters
            this.el = $(el);
            // Elements
            this.buttonGroup = $('<div />');
            this.button = $('<div />');
            this.dropdownItems = $('<ul />');
            // Properties
            this.buttonClass = 'new-btn-select';
            this.buttonContent = 'Select';
            this.groupClass = '';
            this.hiddenField = null;
            this.link = false;
            this.navigate = false;
            this.display = false;
            this.guid = window.SPDUtils.getGUID();
            // Retrieve data
            this.setProperties();
            // Render
            this.render();
            this.bindEvent();
        },
        /**
         * Retrieves data from attributes
         * @return {void}
         */
        setProperties: function () {
            var self = this,
                su = window.SPDUtils;

            // Kill multiple selections
            self.el.removeAttr('multiple');
            // Set up GUID for iOS detection
            self.el.data('guid', self.guid);
            window['rD' + self.guid];
            // Set button class
            if (su.validString(self.el.data('buttonclass')) !== '') {
                self.buttonClass = self.el.data('buttonclass');
            }
            // Set button content
            if (su.validString(self.el.data('buttoncontent')) !== '') {
                self.buttonContent = self.el.data('buttoncontent');
            }
            // Set group class
            if (su.validString(self.el.data('groupclass')) !== '') {
                self.groupClass = self.el.data('groupclass');
            }
            // Set optional hidden field to update
            if (self.el.data('hiddenfield')) {
                self.hiddenfield = $(self.el.data('hiddenfield'));
            }
            // Update display text on selection
            self.display = su.validBoolean(self.el.data('display'));
            // Enable selection hyperlink
            self.link = su.validBoolean(self.el.data('link'));
            // Enable selection navigation
            self.navigate = su.validBoolean(self.el.data('navigate'));
        },
        /**
         * Render the Bootstrap-style dropdown for desktop
         * @return {void}
         */
        render: function () {
            var self = this,
                su = window.SPDUtils,
                i = 0;

            // Generate the Bootstrap-style dropdown
            // Setup group
            self.buttonGroup.addClass('responsiveDropdown');
            self.buttonGroup.addClass(self.groupClass);
            // Setup button
            self.button.html(self.buttonContent +  '<i class="icon-chevron-sign-down">&nbsp;</i>');
            self.button.addClass(self.buttonClass);
            self.button.bind('click', function (e) {
                e.preventDefault();
                self.handleButton();
            });
            self.buttonGroup.append(self.button);
            // Setup dropdown items
            self.renderItems();
            self.buttonGroup.append(self.dropdownItems);
            // Hide the select element
            self.el.addClass('responsiveDropdownHidden');
            self.buttonGroup.insertBefore(self.el);
        },
        /**
         * Render Bootstrap dropdown items
         * @return {void}
         */
        renderItems: function () {
            var self = this,
                su = window.SPDUtils;

            $('option', self.el).each(function () {
                var val = $(this).attr('value');

                if (su.validString(val) !== '') {
                    $(this).attr('data-value', val);
                    self.renderItem($(this));
                }
            });
        },
        /**
         * Render a Bootstrap dropdown item
         * @param {object} option jQuery option element
         * @return {void}
         */
        renderItem: function (option) {
            var self = this,
                su = window.SPDUtils,
                text = su.validString(option.text()),
                value = su.validString(option.attr('value')),
                li = $('<li />'),
                a = $('<a />');

            li.attr('data-value', value);
            a.html(text);
            a.attr('data-value', value);

            // Make hyperlinks function
            if (value !== '' && value !== '#' && (self.link === true || self.navigate === true)) {
                a.attr('href', value);
            }
            a.bind('click', function (e) {
                self.dropdownItems.toggleClass('active');
            });
            self.bindItem(a);
            li.append(a);
            self.dropdownItems.append(li);
        },
        /**
         * Bind item event
         * @param {object} el jQuery element
         * @return {void}
         */
        bindItem: function (el) {
            var self = this;

            el.bind('click', function (e) {
                self.selectValue($(this).data('value'), $(this).text());
            });
        },
        /**
         * Handle button
         * @return {void}
         */
        handleButton: function () {
            var self = this,
                isMobile = window.SPDUtils.isMobileBreakpoint(),
                isMobileBrowser = window.SPDUtils.isMobileBrowser();

            if (isMobile && isMobileBrowser) {
                self.el.focus();
            } else {
                self.dropdownItems.toggleClass('active');
            }
        },
        /**
         * Make a selection
         * @param {object} val Selected value
         * * @param {object} text Selected text
         * @return {void}
         */
        selectValue: function (val, text) {
            var self = this,
                isMobile = window.SPDUtils.isMobileBrowser(),
                valStripped = '',
                scrollPos = 0,
                targetEl = null;

            val = val.toString();
            valStripped = val.replace('#');

            // Make sure the anchor exists
            try {
                targetEl = $('a[name="' + valStripped + '"]');
                scrollPos = targetEl.offset().top;
            } catch (e) {
            }
            // Navigate
            if (self.navigate === true || val.indexOf('#') > -1) {
                window.scrollTo(0, parseInt(scrollPos - self.button[0].offsetHeight - 20, 10));
            }
            // Hyperlink
            if (self.link === true) {
                document.location.href = val;
            }
            // Update the Bootstrap dropdown items
            $('li', self.dropdownItems).removeClass('selected');
            $('li[data-value="' + val + '"]', self.dropdownItems).addClass('selected');
            // Update the select element
            $('option', self.el).attr('selected', false);
            $('option[data-value="' + val + '"]', self.el).attr('selected', 'selected');
            // Fire on change event on desktop
            if (isMobile === false) {
                self.el.change();
            }
            // Update the optional hidden field
            if (self.hiddenField !== null) {
                self.hiddenField.attr('value', val);
            }
            // Display text
            if (self.display === true && text !== '') {
                self.button.html(text +  '<i class="icon-chevron-sign-down">&nbsp;</i>');
            }
            // Close the dropdown
            self.dropdownItems.removeClass('active');
        },
        bindEvent: function () {
            var self = this;

            self.el.bind('blur', function (e) {
                var selection = e.currentTarget,
                    val = $(selection.options[selection.selectedIndex]).attr('value'),
                    text = $(selection.options[selection.selectedIndex]).text();

                self.selectValue(val, text);
            });
        }
    };
}());
/**
 * Created by dmcgov0 on 1/2/14.
 */
/*global window:true, $:true, Class:true */
var responsiveFilterDropdown = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes responsiveDropdown class
         * @param {object} el Target element
         */
        init: function (el, index) {
            // Parameters
            this.el = $(el);
            this.zIndex = 1000 * (5-Number(index));
            // Elements
            this.buttonGroup = $('<div />');
            this.button = $('<div />');
            this.dropdownItems = $('<ul />');
            // Properties
            this.buttonClass = 'new-btn-select';
            this.buttonContent = 'Select';
            this.groupClass = '';
            this.dimAbbrev = '';
            this.hiddenField = null;
            this.link = false;
            this.navigate = false;
            this.display = false;
            this.guid = window.SPDUtils.getGUID();
            this.unitString = " in.";
            // Retrieve data
            this.setProperties();
            // Render
            this.render();
            this.bindEvent();

        },
        /**
         * Retrieves data from attributes
         * @return {void}
         */
        setProperties: function () {
            var self = this,
                su = window.SPDUtils;

            // Kill multiple selections
            self.el.removeAttr('multiple');
            // Set up GUID for iOS detection
            self.el.data('guid', self.guid);
            window['rD' + self.guid];
            // Set button class
            if (su.validString(self.el.data('buttonclass')) !== '') {
                self.buttonClass = self.el.data('buttonclass');
            }
            // Set button content
            if (su.validString(self.el.data('buttoncontent')) !== '') {
                self.buttonContent = self.el.data('buttoncontent');
                // Set dimension abbreviation
                self.dimAbbrev = self.buttonContent.slice(0,1).toLowerCase();
            }
            // Set group class
            if (su.validString(self.el.data('groupclass')) !== '') {
                self.groupClass = self.el.data('groupclass');
            }

            // Set optional hidden field to update
            if (self.el.data('hiddenfield')) {
                self.hiddenfield = $(self.el.data('hiddenfield'));
            }
            // Update display text on selection
            self.display = su.validBoolean(self.el.data('display'));
            // Enable selection hyperlink
            self.link = su.validBoolean(self.el.data('link'));
            // Enable selection navigation
            self.navigate = su.validBoolean(self.el.data('navigate'));
        },
        /**
         * Render the Bootstrap-style dropdown for desktop
         * @return {void}
         */
        render: function () {
            var self = this,
                su = window.SPDUtils,
                i = 0;

            // Generate the Bootstrap-style dropdown
            // Setup group
            self.buttonGroup.addClass('responsiveDropdown');
            self.buttonGroup.addClass(self.groupClass);
            // Setup button
            self.button.html(self.buttonContent +  '<i class="icon-chevron-sign-down">&nbsp;</i>');
            self.button.addClass(self.buttonClass);
            self.button.bind('click', function (e) {

                if(e.stopPropagation) {
                    e.stopPropagation();
                } else {
                    e.cancelBubble=true;
                }
                self.handleButton();
            });
            self.buttonGroup.append(self.button);
            // Setup dropdown items
            self.renderItems();
            self.buttonGroup.append(self.dropdownItems);
            if (self.el.context[0].value == '') {
                self.el.val('');
            }
            // Hide the select element
            self.el.addClass('responsiveDropdownHidden');
            self.buttonGroup.insertBefore(self.el);
        },
        /**
         * Render Bootstrap dropdown items
         * @return {void}
         */
        renderItems: function () {
            var self = this,
                su = window.SPDUtils;

            $('option', self.el).each(function () {
                var val = $(this).attr('value');
                if (su.validString(val) !== '') {
                    $(this).attr('data-value', val);
                    self.renderItem($(this));
                }
            });
        },
        /**
         * Render a Bootstrap dropdown item
         * @param {object} option jQuery option element
         * @return {void}
         */
        renderItem: function (option) {
            var self = this,
                su = window.SPDUtils,
                text = su.validString(option.text()),
                value = su.validString(option.attr('value')),
                li = $('<li />');

            li.attr('data-value', value);
            li.html(text);

            li.bind('click', function (e) {
                self.dropdownItems.toggleClass('active');
            });
            self.bindItem(li);
            self.dropdownItems.append(li);
        },
        /**
         * Bind item event
         * @param {object} el jQuery element
         * @return {void}
         */
        bindItem: function (el) {
            var self = this;

            el.bind('click', function (e) {
                if(e.stopPropagation) {
                    e.stopPropagation();
                } else {
                    e.cancelBubble=true;
                }
                self.selectValue($(this).data('value'), $(this).text());
            });
        },
        /**
         * Handle button
         * @return {void}
         */
        handleButton: function () {
            var self = this,
                isMobile = window.SPDUtils.isMobileBreakpoint(),
                isMobileBrowser = window.SPDUtils.isMobileBrowser();

            if (isMobile && isMobileBrowser) {
                self.el.focus();
            } else if (isMobile) {
                // adjust z-index
                self.buttonGroup.css({'z-index' : self.zIndex});
                //self.dropdownItems.css({'z-index' : self.zIndex-1});
                self.dropdownItems.toggleClass('active');
                setTimeout(function() {
                    self.dropDownClickOutside();
                }, 500);
            } else {
                self.dropdownItems.toggleClass('active');
                setTimeout(function() {
                    self.dropDownClickOutside();
                }, 500);

            }

        },

        dropDownClickOutside: function() {
            var self = this;
            // only attach event handler if
            // the dropdown is currently open

            $( "body" ).one( "click", function(e) {
                // if open, close the dropdown
                if (self.dropdownItems.hasClass('active')) {
                    self.dropdownItems.removeClass('active');
                }
            });


        },
        /**
         * Make a selection
         * @param {object} val Selected value
         * * @param {object} text Selected text
         * @return {void}
         */
        selectValue: function (val, text) {
            var self = this,
                isMobile = window.SPDUtils.isMobileBrowser(),
                valStripped = '',
                scrollPos = 0,
                targetEl = null,
                buttonTxt = '',
                triggerChange = false;

            val = val.toString();
            valStripped = val.replace('#');
            buttonTxt = text+self.unitString+ ' ('+self.dimAbbrev+')';

            // Make sure the anchor exists
            try {
                targetEl = $('a[name="' + valStripped + '"]');
                scrollPos = targetEl.offset().top;
            } catch (e) {
            }
            // Navigate
            if (self.navigate === true || val.indexOf('#') > -1) {
                window.scrollTo(0, parseInt(scrollPos - self.button[0].offsetHeight - 20, 10));
            }
            // Hyperlink
            if (self.link === true) {
                document.location.href = val;
            }
            // Update the Bootstrap dropdown items
            $('li', self.dropdownItems).removeClass('selected');
            $('li[data-value="' + val + '"]', self.dropdownItems).addClass('selected');
            triggerChange = (val !== self.el.val());
            // Update the select element
            $('option', self.el).attr('selected', false);
            $('option[data-value="' + val + '"]', self.el).attr('selected', 'selected');
            // Fire on change event on desktop
            if (triggerChange) {
                self.el.change();
            }
            // Update the optional hidden field
            if (self.hiddenField !== null) {
                self.hiddenField.attr('value', val);
            }
            // Display text
            if (self.display === true && buttonTxt !== '') {
                self.button.html(buttonTxt +  '<i class="icon-chevron-sign-down">&nbsp;</i>');
            }
            // Close the dropdown
            self.dropdownItems.removeClass('active');
            // update the button styling now that a value has been selected
            self.button.addClass('filterValSelected');
        },
        bindEvent: function () {
            var self = this;

            self.el.bind('blur', function (e) {
                var selection = e.currentTarget,
                    val = $(selection.options[selection.selectedIndex]).attr('value'),
                    text = $(selection.options[selection.selectedIndex]).text();

                self.selectValue(val, text);
            });
        }
    };
}());
/*global window:true, $:true, Class:true */
var responsiveCollapse = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes responsiveCollapse class
         * Mobile: accordion
         * Tablet/desktop: visible content
         * @param {object} el Target element
         * @param {string} cl Class for buttons to bind
         */
        init: function (el, cl) {
            // Parameters
            this.el = $(el);
            this.cl = cl;
            // Events
            this.bindEvents();
        },
        /**
         * Toggle functionality based on breakpoint
         * @return {void}
         */
        toggleActive: function () {
            var self = this,
                isMobile = window.SPDUtils.isMobileBreakpoint();

            if (isMobile === true) {
                // Set CSS classes
                self.el.removeClass('active');
            }
        },
        /**
         * When active, toggles display
         */
        togglePanel: function () {
            var self = this;

            self.el.toggleClass('active');
        },
        /**
         * Bind the window resize events
         * @return {void}
         */
        bindEvents: function () {
            var self = this;

            // Ensure panel closes on breakpoint change
            shc.pd.base.util.ViewChange.getInstance().onResponsive(function () {
                self.toggleActive();
            });
            // Set link to toggle display
            $('.' + self.cl.replace('.', ''), self.el).bind('click', function () {
                self.togglePanel();
            });
        }
    };
}());
/*global window:true, $:true, Class:true */
var responsiveImage = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes responsiveImage class
         * @param {object} el Target element
         * @param {number} fw Optional forced width for consistent display
         * @param {number} fh Optional forced height for consistent display
         * @param {number} iq Optional forced image quality for Scene 7
         */
        init: function (el, fw, fh, iq) {
            // Parameters
            this.el = $(el);
            this.targetEl = $(el);
            // Properties
            this.fw = 0;
            this.fh = 0;
            this.desktopImage = '';
            this.tabletImage = '';
            this.mobileImage = '';
            this.linkAlt = '';
            this.linkURL = '';
            this.linkTarget = '';
            this.imageQuality = 80;
            this.useParentDims = true;
            this.isBound = false;
            // Retrieve data
            this.setProperties(fw, fh, iq);
            // Render
            this.render();
            this.bindEvent();
        },
        /**
         * Retrieves data from attributes and parameters
         * @param {number} fw Optional forced width for consistent display
         * @param {number} fh Optional forced height for consistent display
         * @param {number} iq Optional forced image quality for Scene 7
         * @return {void}
         */
        setProperties: function (fw, fh, iq) {
            var self = this,
                su = window.SPDUtils;

            // Image URLs
            self.desktopImage = self.el.data('desktopimage');
            self.tabletImage = self.el.data('tabletimage');
            self.mobileImage = self.el.data('mobileimage');

            // Hyperlink
            self.linkAlt = su.validString(self.el.data('linkalt'));
            self.linkURL = su.validString(self.el.data('linkurl'));
            self.linkTarget = su.validString(self.el.data('linktarget'));

            if (self.linkURL !== '') {
                self.targetEl = $('<a />');
                self.targetEl.attr('href', self.linkURL);
                self.targetEl.attr('target', self.linkTarget);
                self.el.append(self.targetEl);
            }

            // Acquire parent dimensions
            self.getParentDims();

            // Override width
            if (su.validNumber(self.el.data('width')) > 0) {
                self.fw = parseInt(self.el.data('width'), 10);
                // Set the flag so re-renders do not reacquire parent dimensions
                self.useParentDims = false;
            } else if (su.validNumber(fw) > 0) {
                self.fw = parseInt(fw, 10);
                // Set the flag so re-renders do not reacquire parent dimensions
                self.useParentDims = false;
            }

            // Override height
            if (su.validNumber(self.el.data('height')) > 0) {
                self.fh = parseInt(self.el.data('height'), 10);
            } else if (su.validNumber(fh) > 0) {
                self.fh = parseInt(fh, 10);
            }

            // Override image quality
            if (su.validNumber(self.el.data('imagequality')) > 0) {
                self.iq = parseInt(self.el.data('imagequality'), 10);
            } else if (su.validNumber(iq) > 0) {
                self.iq = parseInt(iq, 10);
            }
        },
        /**
         * Sets dimension values to parent dimensions
         * @return {void}
         */
        getParentDims: function () {
            var self = this;
            self.fw = self.el.width();
            self.fh = self.el.height();
        },
        /**
         * Determines the correct rendering method
         * @return {void}
         */
        render: function () {
            var self = this;

            if (self.desktopImage.indexOf('s.sears.com') > -1) {
                self.renderGenerated();
            } else {
                self.renderResponsive();
            }
        },
        /**
         * Renders a responsive image and calls event binding
         * @return {void}
         */
        renderResponsive: function () {
            var self = this,
                imageNode = $('.responsiveImage_js', self.targetEl),
                imageURL = self.getResponsiveURL();

            if (imageURL !== imageNode.attr('src')) {
                // Retrieve parent's current dimensions
                if (self.useParentDims === true) {
                    self.getParentDims();
                }

                // Remove previously rendered image
                imageNode.remove();

                // Generate image
                var img = $('<img />');
                img.attr('src', imageURL)
                    .attr('alt', self.linkAlt)
                    .addClass('responsiveImage_js')
                    .css('max-width', '100%');
                self.targetEl.append(img);
            }
        },
        /**
         * Renders a Scene7 image and calls event binding
         * @return {void}
         */
        renderGenerated: function () {
            var self = this,
                imageURL = self.getGeneratedURL();

            // Remove previously rendered image
            $('.responsiveImage_js', self.targetEl).remove();

            // Generate image
            var img = $('<img />');
            img.attr('src', imageURL)
                .attr('alt', self.linkAlt)
                .addClass('responsiveImage_js');
            self.targetEl.append(img);
        },
        /**
         * Determine which responsive image to use and at which dimensions
         * @return {string} Image URL
         */
        getResponsiveURL: function () {
            var self = this,
                su = window.SPDUtils;

            // Determine which image to display
            if (su.isMobileBreakpoint()) {
                return self.mobileImage;
            } else if (su.isTabletBreakpoint()) {
                return self.tabletImage;
            } else {
                return self.desktopImage;
            }
        },
        /**
         * Generate a URL for an image with the appropriate query string parameters
         * @return {string} Image URL
         */
        getGeneratedURL: function () {
            var self = this,
                baseURL = self.desktopImage.split('?')[0];

            return baseURL + '?wid=' + self.fw + '&hei=' + self.fh + '&op_sharpen=1' + '&qlt=' + self.iq;
        },
        /**
         * Bind the window resize events
         * @return {void}
         */
        bindEvent: function () {
            var self = this;

            shc.pd.base.util.ViewChange.getInstance().onResponsive(function () {
                self.render();
            });
        }
    };
}());
/*global window:true, $:true, Class:true */
var responsivePinchImage = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes responsivePinchImage class
         * @param {object} el Target element
         */
        init: function (el) {
            var self = this;
            // Elements
            this.el = el;
            this.container = $('[data-toggle="pinch-image"]', this.el);
            this.fullscreen = $('[data-toggle="pinch-fullscreen"]', this.el);
            this.print = $('[data-toggle="pinch-print"]', this.el);
            this.image = null;
            this.plusButton = null;
            this.minusButton = null;
            // Properties
            this.desktopImage = '';
            this.tabletImage = '';
            this.mobileImage = '';
            this.hasImage = false;
            this.offset = this.container.offset();
            this.imageWidth = 0;
            this.imageHeight = 0;
            this.posX = 0;
            this.posY = 0;
            this.scale = 1;
            this.lastScale = 1;
            this.lastPosX = 0;
            this.lastPosY = 0;
            this.maxX = 0;
            this.maxY = 0;
            // Perform setup
            this.getProperties();
            if (this.hasImage === true) {
                this.renderImage();
                this.renderControls();
                this.bindEvents();
            }

            //Bound event here as events aren't bounded if there isn't already image (must call change event when adding an image path with javascript)
            this.container.bind('change', function () {
                self.getProperties();
                self.renderImage();
                self.renderControls();
                self.bindEvents();
            });
        },
        /**
         * Retrieves image paths
         * @return {void}
         */
        getProperties: function () {
            var self = this,
                su = window.SPDUtils;

            // Retrieve images
            self.desktopImage = su.validString(self.container.attr('data-desktopimage'));
            self.tabletImage = su.validString(self.container.attr('data-tabletimage'));
            self.mobileImage = su.validString(self.container.attr('data-mobileimage'));
            if (self.desktopImage !== '' || self.tabletImage !== '' || self.mobileImage !== '') {
                self.hasImage = true;
            }
        },
        /**
         * Renders an image for the current breakpoint
         * @return {void}
         */
        renderImage: function () {
            var self = this,
                su = window.SPDUtils,
                isMobile = su.isMobileBreakpoint(),
                isTablet = su.isTabletBreakpoint(),
                currentImage = '',
                newImage = self.mobileImage;

            // Choose the best image
            if (isMobile) {
                newImage = self.chooseImage(self.mobileImage, self.tabletImage, self.desktopImage);
            } else {
                if (isTablet) {
                    newImage = self.chooseImage(self.tabletImage, self.mobileImage, self.desktopImage);
                } else {
                    newImage = self.chooseImage(self.desktopImage, self.tabletImage, self.mobileImage);
                }
            }
            // If there is no image already, create it
            if (self.image === null) {
                self.image = $('<img />');
                self.container.append(self.image);
            } else {
                currentImage = su.validString(self.image.attr('src'));
            }
            // New image or new src, update
            if (currentImage !== newImage) {
                // Set new image source
                self.image.attr('src', newImage);
                // Reset image scale
                self.lastScale = 1;
                // Reset initial CSS
                self.image.css({
                    'height': 'auto',
                    'left': '50%',
                    'top': '50%',
                    'width': '100%'
                });
                // Set image load CSS
                // Force pixel sizes and negative margins for centering
                self.image.bind('load', function () {
                    self.imageWidth = self.image.width();
                    self.imageHeight = self.image.height();

                    self.image.css({
                        'height': self.imageHeight,
                        'margin-left': 0 - self.imageWidth / 2,
                        'margin-top': 0 - self.imageHeight / 2,
                        'width': self.imageWidth
                    });
                });
            }
        },
        /**
         * Renders the controls
         * @return {void}
         */
        renderControls: function () {
            var self = this;

            // Render plus button
            self.plusButton = $('<a />');
            self.plusButton.addClass('control')
                .addClass('icon-plus');
            // Render minus button
            self.minusButton = $('<a />');
            self.minusButton.addClass('control')
                .addClass('icon-minus');
            // Display buttons
            self.container.parent().append(self.plusButton)
                .append(self.minusButton);
        },
        /**
         * Will cascade through three image options to find the best
         * @param {string} best Preferred image
         * @param {string} nextBest Next best image
         * @param {string} worst Worst image but we'll take it
         * @return {string} Chosen image URL
         */
        chooseImage: function (best, nextBest, worst) {
            if (best !== '') {
                return best;
            } else {
                if (nextBest !== '') {
                    return nextBest;
                } else {
                    return worst;
                }
            }
        },
        /**
         * Binds events for scaling and displaying the image
         * @return {void}
         */
        bindEvents: function () {
            var self = this;

            // Gestures - on the container to avoid oddness
            self.container.hammer({
                prevent_default: true,
                prevent_mouseevents: false
            }).on('touch', function(ev) {
                self.handleGesture(ev);
            }).on('transform', function(ev) {
                self.handleGesture(ev);
            }).on('drag', function(ev) {
                self.handleGesture(ev);
            }).on('dragend', function(ev) {
                self.handleGesture(ev);
            });

            // Button clicks
            self.plusButton.bind('click', function (e) {
                e.preventDefault();
                self.lastScale = (self.lastScale <= 2.8 ? self.lastScale + 0.2 : 3.0);

                self.handleGesture({
                    'type': 'transform',
                    'gesture': {
                        'scale': self.lastScale
                    }
                });
            });
            self.minusButton.bind('click', function (e) {
                e.preventDefault();
                self.lastScale = (self.lastScale >= 0.4 ? self.lastScale - 0.2 : 0.2);

                self.handleGesture({
                    'type': 'transform',
                    'gesture': {
                        'scale': self.lastScale
                    }
                });
            });
            self.fullscreen.bind('click', function () {
                self.openImage(false);
            });
            self.print.bind('click', function () {
                self.openImage(true);
            });
            // Window resize
            shc.pd.base.util.ViewChange.getInstance().onResponsive(function () {
                self.renderImage();
            });
        },
        /**
         * Handles gestures
         * @param {object} ev Event fired
         * @returns {void}
         */
        handleGesture: function (ev) {
            var self = this,
                transform = "translate3d(0, 0, 0) " + "scale3d(1, 1, 0) ";

            // Depending on the event, calculate or store scale and transform values
            switch(ev.type) {
                case 'touch':
                    self.lastScale = self.scale;
                    break;
                case 'drag':
                    if (self.scale !== 1) {
                        self.posX = self.lastPosX + ev.gesture.deltaX;
                        self.posY = self.lastPosY + ev.gesture.deltaY;
                        if (self.posX > self.maxX) {
                            self.posX = self.maxX;
                        }
                        if (self.posX < -self.maxX) {
                            self.posX = -self.maxX;
                        }
                        if (self.posY > self.maxY) {
                            self.posY = self.maxY;
                        }
                        if (self.posY < -self.maxY) {
                            self.posY = -self.maxY;
                        }
                    } else {
                        self.posX = 0;
                        self.posY = 0;
                        self.lastPosX = 0;
                        self.lastPosY = 0;
                    }
                    break;
                case 'transform':
                    self.scale = Math.max(1, Math.min(self.lastScale * ev.gesture.scale, 10));
                    self.maxX = Math.ceil((self.scale - 1) * self.image[0].clientWidth / 2);
                    self.maxY = Math.ceil((self.scale - 1) * self.image[0].clientHeight / 2);
                    if (self.posX > self.maxX) {
                        self.posX = self.maxX;
                    }
                    if (self.posX < -self.maxX) {
                        self.posX = -self.maxX;
                    }
                    if (self.posY > self.maxY) {
                        self.posY = self.maxY;
                    }
                    if (self.posY < -self.maxY) {
                        self.posY = -self.maxY;
                    }
                    break;
                case 'dragend':
                    self.lastPosX = self.posX < self.maxX ? self.posX: self.maxX;
                    self.lastPosY = self.posY < self.maxY ? self.posY: self.maxY;
                    break;
            }

            // Handle transforms, falling back to normal CSS for IE <= 9
            if (self.scale !== 1) {
                transform = "translate3d(" + self.posX + "px," + self.posY + "px, 0) " + "scale3d(" + self.scale + "," + self.scale + ", 0) ";
            }
            if (!$('body').hasClass('lt-ie10')) {
                self.image[0].style[window['CSSTransform']] = transform;
            } else {
                self.image.css({
                    'height': self.imageHeight * self.scale,
                    'left': self.posX,
                    'top': self.posY,
                    'width': self.imageWidth * self.scale
                });
            }
        },
        /**
         * Opens the image in a new window with optional printing
         * @params {boolean} print Optional image printing
         */
        openImage: function (print) {
            var self = this,
                image = self.chooseImage(self.desktopImage, self.tabletImage, self.mobileImage),
                newWindow = window.open('', '', 'width=100%, height=100%');

            var preview = getDiagramPagePreview();
            // Render the image
            newWindow.document.write('<img src="' + image + '" />');

            // Resize Window
            if (print === true) {
                newWindow.focus();
                newWindow.print();
            }
        }

    };
}());
/*global window:true, $:true, Class:true */
var revealPanel = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes revealPanel class
         * Follows a similar pattern to Twitter Bootstrap's JavaScript widgets
         * @param {object} el Toggle element
         * @param {string} ac Optional active class
         * @param {string} iac Optional inactive class
         */
        init: function (el, ac, iac) {
            // Parameters
            this.el = $(el);
            // Properties
            this.targetEl = null;
            this.ac = 'active';
            this.iac = '';
            // Retrieve data
            this.setProperties(ac, iac);
            // Bind events
            this.bindEvent();
        },
        /**
         * Retrieves data from attributes and parameters
         * @param {string} ac Optional active class
         * @param {string} iac Optional inactive class
         * @return {void}
         */
        setProperties: function (ac, iac) {
            var self = this,
                su = window.SPDUtils;

            // Target element
            self.targetEl = $(self.el.data('target'));
            // Parameters
            if (su.validString(ac) !== '') {
                self.ac = su.validString(ac);
            }
            if (su.validString(iac) !== '') {
                self.iac = su.validString(iac);
            }
        },
        /**
         * Toggle the class on the target element
         */
        togglePanel: function () {
            var self = this;

            // Use class to determine state
            // Optionally add or remove an inactive class
            if (self.targetEl.hasClass(self.ac)) {
                self.targetEl.removeClass(self.ac);

                if (self.iac !== '') {
                    self.targetEl.addClass(self.iac);
                }
            } else {
                self.targetEl.addClass(self.ac);

                if (self.iac !== '') {
                    self.targetEl.removeClass(self.iac);
                }
            }
        },
        /**
         * Bind the toggle event
         * @return {void}
         */
        bindEvent: function () {
            var self = this;

            self.el.bind('click', function (e) {
                e.preventDefault();
                self.togglePanel();
            });
        }
    };
}());
/*global window:true, $:true, Class:true, mainSitePath:true */
var searchPanel = Class.extend(function () {
    "use strict";

    return {
        /**
         * @singleton searchPanel
         * Singleton class for the searchPanel component
         *
         * init: On page load events to fire
         */
        init: function () {
            // Initialize events
            this.findItems();
            this.bindEvents();
            this.airFilterParts = this.checkIfAirFilterPart();
        },
        /**
         * Finds dropdown items
         * @return {void}
         */
        findItems: function () {
            var self = this;

            // Bind an event to each drop-down selection
            $('#searchContent .dropdown-menu li a').bind('click', function (e) {
                self.selectType($(this), true);
            });
        },
        /**
         * Handles type selection
         * @param {object} el jQuery element
         * @param {boolean} click Boolean denoting that a list item initiated event
         * @return {void}
         */
        selectType: function (el, click) {
            var self = this,
                value = self.getValue(),
                action = mainSitePath + '/partsdirect/' + el.data('postpath') + '/',
                label = el.data('label'),
                modelNumber = '',
                partNumber = '';

            // Close the dropdown
            if (click === true) {
                $('#searchContent .dropdown-menu').dropdown('toggle');
            }
            // Update selection status
            $('#searchContent .dropdown-menu li').removeClass('selected');
            el.parent().addClass('selected');
            // Set the drop-down label
            $('#searchTypeLabel').text(label);
            // Update hidden fields
            if (el.data('pathtaken') === 'modelSearch') {
                modelNumber = value;
                //$('#shdMod').attr('value', modelNumber);
                $('input[name=shdMod]').val(modelNumber);

                //partSearchString = partSearchString.replace(/\//g, '');
                modelNumber = modelNumber.replace(/\ /g, '');
                modelNumber = modelNumber.replace(/\'/g, '');
                modelNumber = modelNumber.replace(/\%/g, '');
                modelNumber = modelNumber.replace(/\#/g, '');
                modelNumber = modelNumber.replace(/\&/g, '');
                modelNumber = modelNumber.replace(/\(/g, '');
                modelNumber = modelNumber.replace(/\)/g, '');
                modelNumber = modelNumber.replace(/\-/g, '');
                modelNumber = modelNumber.replace(/\*/g, '');
                modelNumber = modelNumber.replace(/\$/g, '');
                modelNumber = modelNumber.replace(/\^/g, '');
                modelNumber = modelNumber.replace(/\,/g, '');
                modelNumber = modelNumber.replace(/\"/g, '');
                modelNumber = modelNumber.replace(/\//g, '');
                modelNumber = modelNumber.replace(/\?/g, '');
                modelNumber = modelNumber.replace(/\\/g, '');


                if (modelNumber.indexOf('/') != -1){
                    modelNumber = modelNumber.replace(/\//g, '');
                } else if ( modelNumber.indexOf('%') != -1 ){
                    modelNumber = modelNumber.replace(/\%/g, '');
                }
                value = modelNumber;
            } else {

                $('input[name=shdPart]').val(value);

                if (value.indexOf('/') != -1){
                    value = value.replace(/\//g, '@SLASH@');
                } else if ( value.indexOf('%') != -1 ){
                    value = value.replace(/\%/g, '@SLASHPERCENT@');
                }

            }


            $('#pathTaken').attr('value', el.data('pathtaken'));
            // Update form action
            $('#searchBarForm').attr('action', action + encodeURIComponent(value));
        },
        /**
         * Sanitises the current value
         * @return Sanitised value
         */
        getValue: function () {
            var self = this,
                field = $('#searchBarField'),
                value = field.attr('value');

            // Make sure the value isn't the help text
            if (value === field.data('inputhelp') || value === field.data('inputhelpmobile')) {
                value = '';
            }
            // Sanitise non-alpha-numeric characters
            //value = value.replace(/[^0-9A-Za-z]/g, '');
            field.attr('value', value);

            return value;
        },
        /**
         * checkIfAirFilterPart
         * @return airfilter partsearch term
         */
        checkIfAirFilterPart : function() {

            return [
                {name : 'airfilter'},
                {name : 'airfilters'},
                {name : 'hvacfilter'},
                {name : 'hvacfilter'},
                {name : 'heatingfilter'},
                {name : 'heaterfilter'},
                {name : 'coolingfilter'},
                {name : 'acfilter'},
                {name : 'airconditioner'}
            ];
        },
        /**
         * Perform initial event binding
         * @return {void}
         */
        bindEvents: function () {
            var self = this,
                selectStatement = '#searchContent .dropdown-menu li.selected a';

            // Bind events on search field
            $('#searchBarField').bind('blur', function () {
                if ($(selectStatement).length > 0) {
                    self.selectType($(selectStatement));
                }
            })
                .bind('focus', function () {
                    $(this).removeClass('error');
                })
                .bind('change', function () {
                    if ($(selectStatement).length > 0) {
                        self.selectType($(selectStatement));
                    }
                })
                .bind('keypress', function (e) {
                    var key = -1;

                    // Determine which key was pressed
                    if (e.keyCode) {
                        key = e.keyCode;
                    } else if (e.which) {
                        key = e.which;
                    }

                    // If the user hit enter, check if there's a type
                    if (key === 13) {
                        if ($(selectStatement).length > 0) {
                            self.selectType($(selectStatement));
                            return true;
                        } else {
                            $('#searchContent .dropdown-menu').dropdown('toggle');
                            return false;
                        }
                    } else {
                        return true;
                    }
                });

            // Bind event on button
            $('#searchModelsParts').bind('click', function (e) {
                e.preventDefault();
                if (self.getValue() !== '' && $(selectStatement).length > 0) {
                    var ifairfilterpart = 'false',
                        searchTerm = self.getValue(),
                        UpdatedSearchTerm = searchTerm.toUpperCase();

                    for (i = 0; i < self.airFilterParts.length; ++i) {

                        var airFilterPartsName = self.airFilterParts[i].name,
                            UpdatedAirFilterPartsName = airFilterPartsName.toUpperCase();

                        if (UpdatedSearchTerm == UpdatedAirFilterPartsName) {
                            ifairfilterpart = 'true';
                        }
                    }
                    if (ifairfilterpart == 'true') {
                        e.preventDefault();
                        var loc = mainSitePath + '/replacement-parts/hvac-air-filters/dimensions.html';
                        window.location.href = loc;
                    } else {
                        $('#searchBarForm').submit();
                        $('#searchBarField').removeClass('error');
                    }
                } else {
                    $('#searchBarField').addClass('error');
                }
            });
        }
    }
}());
/*global window:true, $:true, Class:true, mainSitePath:true */
var sideChatNavigation = Class.extend(function() {
    "use strict";

    return {
        /**
         * Initializes sideChatNavigation class
         * @param {object} el Target element
         */
        init: function(el) {
            // Parameters
            this.el = el;
            // Perform setup
            this.bindEvents();
            this.bindSwipes();

        },
        /**
         * Bind events
         * @return {void}
         */
        bindEvents: function() {
            var self = this;

            $('[data-toggle="sidechattoggle"]', self.el).on('click', function () {

                if ($('.sideChatNavigationIcon').hasClass('pchat-open')){
                    $('.sideChatNavigationIcon').removeClass('pchat-open');
                    self.hide();
                } else {
                    $('.sideChatNavigationIcon').addClass('pchat-open');
                    self.show();
                }

            });

        },
        bindSwipes: function() {
            var self = this;

            self.el.swipe({
                swipeLeft:function(event, direction, distance, duration, fingerCount) {
                    $('.sideChatNavigationIcon').addClass('pchat-open');
                    self.show();
                },
                swipeRight:function(event, direction, distance, duration, fingerCount) {
                    $('.sideChatNavigationIcon').removeClass('pchat-open');
                    self.hide();
                },

            });
        },
        /**
         * Show the chat panel
         * @return {void}
         */
        show: function () {
            var self = this;

            self.el.animate({
                width: 400,
                marginLeft: 1,
                marginRight: 340,
                display: 'toggle'
            }, 500);
        },
        /**
         * Hide the chat panel
         * @return {void}
         */
        hide: function () {
            var self = this;

            self.el.animate({
                width: 400,
                marginLeft: 0,
                marginRight: 0,
                display: 'toggle'
            }, 500);
        }
    }
}());
/*global window:true, $:true, Class:true */
var svgIcon = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes svgIcon class
         * @param {object} el Target element
         */
        init: function (el) {
            // Parameters
            this.el = $(el);
            // Render
            this.render();
        },

        /**
         * Renders an image inside an SVG icon
         * @return {void}
         */
        render: function () {
            var self = this,
                su = window.SPDUtils,
                backgroundImage = self.el.css('background-image');

            if (backgroundImage.indexOf('url(') > -1) {
                backgroundImage = backgroundImage.split('(')[1];
                backgroundImage = backgroundImage.split(')')[0].replace(/["']/g, "");
            }

            // Generate image
            var img = $('<img />');
            img.attr('src', backgroundImage);
            self.el.append(img);
            self.el.addClass('legacy');
        }
    };
}());
/*global window:true, $:true, Class:true, mainSitePath:true, NS:true */
var userData = Class.extend(function () {
    "use strict";

    return {
        /**
         * @class userData
         * Singleton class to handle initial login, recently viewed and shopping cart states
         */
        init: function () {
            // Elements
            this.cartItems = {
                header: $('#cartShop .cartShopHeader_js'),
                checkOut: $('#cartShop .cartShopCheckOut_js'),
                totals: $('#cartShop .cartShopTotals_js'),
                view: $('#cartShop .cartShopView_js'),
                count: $('#cartShop .cartShopCount_js'),
                countBadge: $('#cartShop .count-badge'),
                statusMessage: $('#cartShop .cartShopStatusMessage_js')
            }
            this.cartEmpty = $('#cartShop .cartShopEmpty_js');
            this.modelsItems = {
                items: $('#cartModelItems'),
                userEdit: $('#cartUserEdit'),
                guestEdit: $('#cartGuestEdit'),
                guestControls: $('#cartGuestControls'),
                countBadge: $('#cartModels .count-badge')
            }
            this.modelsEmpty = $('#cartModels .cartModelsEmpty_js');
            this.comments = {
                auth: $('.commentsAuthenticated_js'),
                unauth: $('.commentsUnauthenticated_js'),
                displayName: $('.commentsDisplayName'),
                displayNameField: $('#comments-userIdentifier')
            };
            // Begin setup straight away
            this.getHeaderCookies();
            this.displayRecentPartsModels();
            this.checkAPI();
        },
        /**
         * Retrieves cookie values used by global header items
         * @return {void}
         */
        getHeaderCookies: function () {
            var self = this,
                su = window.SPDUtils;

            NS('shc.pd.cookies').username = su.getCookie('username', '');
            NS('shc.pd.cookies').recentlyViewedParts = su.getCookie('recentlyViewedParts', '');
            NS('shc.pd.cookies').recentlyViewedModels = su.getCookie('recentlyViewedModels', '');
            NS('shc.pd.cookies').myProfileModels = su.getCookie('myProfileModels', '');
            NS('shc.pd.cookies').cid = su.getCookie('cid', '');
        },
        /**
         * Makes AJAX call to user API
         * @return {void}
         */
        checkAPI: function () {
            var self = this,
                su = window.SPDUtils,
                dateObj = new Date(),
                userAddress = ajaxSitePath + '/partsdirect/retrieveSessionUserInfo.pd?d=' + dateObj.getTime();

            // Make an AJAX call
            if (!$.support.ajax) {
                var xhReq = new XMLHttpRequest();
                var dateObj = new Date();
                xhReq.open('GET', userAddress, false);
                xhReq.send(null);

                try {
                    self.handleResponse(JSON.parse(xhReq.responseText));
                } catch (e) {
                }
            } else {
                $.ajax({
                    type: 'GET',
                    url: userAddress,
                    contentType: 'application/json',
                    async: false,
                    dataType: 'JSON'
                })
                    .success(function (data) {
                        self.handleResponse(data);
                    })
                    .fail(function (xhr, status, message) {
                        // Handle errors
                    });
            }
        },
        /**
         * Handles response from the API
         * @param {object} resp Response from API call
         * @return {void}
         */
        handleResponse: function (resp) {
            var self = this;

            // Set loginNav items
            self.setLoginState(resp);
            // Set my models
            self.displayMyModelsItems(resp);
            // Set cart items
            self.displayCartItems(resp.cart.cartLines);
        },
        /**
         * Set login status
         * @param {object} resp Response from API call
         * @return {void}
         */
        setLoginState: function (resp) {
            var self = this,
                su = window.SPDUtils,
                username = su.validString(resp.username),
                firstName = su.validString(resp.firstName),
                lastName = su.validString(resp.lastName),
                formattedName = (firstName + ' ' + lastName).trim(),
                casId = su.validString(resp.casId),
                unitCenterId = su.validString(resp.unitCenterId);

            // Make names global
            NS('shc.pd').firstName = firstName;
            NS('shc.pd').lastName = lastName;
            NS('shc.pd').casId = casId;
            NS('shc.pd').unitCenterId = unitCenterId;
            NS('shc.pd').roles = resp.roles;

            // Set loginNav items
            if (username !== '') {
                $('#loginNavStatus').html('Hello, <strong>' + firstName + '</strong><a href="' + mainSitePath + '/partsdirect/myprofile/logout.action" onclick="SPDUtils.setCookie(\'username\', \'\', -100);">Logout</a>');
                $('#loginNavProfile').html('<a href="' + mainSitePath + '/partsdirect/myProfile.pd">My Profile</a>');
            }
            // Set comment items
            if (username !== '' && NS('shc.pd').firstName !== '') {
                self.comments.auth.removeClass('inactive');
                self.comments.unauth.addClass('inactive');
                self.comments.displayName.text(formattedName);
                self.comments.displayNameField.attr('value', formattedName);
            }
        },
        /**
         * Set recently viewed items
         * @return {void}
         */
        displayRecentPartsModels: function () {
            var self = this,
                su = window.SPDUtils,
                recentParts = su.tokenize(NS('shc.pd.cookies').recentlyViewedParts, ['partName','partDescription','partURL','partImageURL'], '|'),
                recentModels = su.tokenize(NS('shc.pd.cookies').recentlyViewedModels, ['modelName', 'modelDescription', 'modelURL'], '|'),
                i = 0,
                li = null;

            // Render items and enable toggle
            if (recentModels.length > 0 || recentParts.length > 0) {
                for (i = 0; i < recentModels.length; i = i + 1) {
                    li = new modelItemTemplate(recentModels[i]);
                    $('#cartRecents .dropdown-menu').append(li);
                }
                for (i = 0; i < recentParts.length; i = i + 1) {
                    li = new partItemTemplate(recentParts[i]);
                    $('#cartRecents .dropdown-menu').append(li);
                }
                $('#cartRecents [data-toggle]').attr('data-toggle', 'dropdown');
            }
        },
        /**
         * Set my models items and additional functionality
         * @param {object} resp Response from API call
         */
        displayMyModelsItems: function (resp) {
            var self = this,
                su = window.SPDUtils,
                userId = su.validNumber(resp.userId),
                myModelsItems = resp.ownedModels.profileModelsList,
                itemCount = myModelsItems.length,
                i = 0,
                span = null;

            // Are there items?
            if (itemCount > 0) {
                // Set visibility of elements
                if (userId > 0) {
                    self.modelsItems.userEdit.removeClass('inactive');
                } else {
                    self.modelsItems.guestEdit.removeClass('inactive');
                    self.modelsItems.guestControls.removeClass('inactive');
                }
                self.modelsItems.items.removeClass('inactive');
                self.modelsEmpty.addClass('inactive');

                // Render items
                for (i = 0; i < myModelsItems.length; i = i + 1) {
                    span = new myModelsItemTemplate(myModelsItems[i]);
                    self.modelsItems.items.append(span, "<br />");
                }

                // Set item count
                if (itemCount >= 99) {
                    itemCount = '99+';
                }
                self.modelsItems.countBadge.text(itemCount);
            }
        },
        /**
         * Set shopping cart items
         * @param {object} cartLines Array of cart item objects
         */
        displayCartItems: function (cartLines) {
            var self = this,
                su = window.SPDUtils,
                itemCount = 0,
                i = 0,
                insert = false,
                message = '',
                statusMessages = [
                    'Showing last added item',
                    'Showing last 2 added items',
                    'Showing last 3 added items'
                ];;

            // Handle items
            if (cartLines.length > 0) {
                // update cart status message
                message = statusMessages[cartLines.length-1] ? statusMessages[cartLines.length-1] : statusMessages[statusMessages.length-1];
                self.cartItems.statusMessage.text(message);

                // Set visibility of elements
                self.cartItems.header.removeClass('inactive');
                self.cartItems.checkOut.removeClass('inactive');
                self.cartItems.totals.removeClass('inactive');
                self.cartItems.view.removeClass('inactive');
                self.cartEmpty.addClass('inactive');
                self.cartItems.statusMessage.removeClass('inactive');

                // Render items
                for (i = 0; i < cartLines.length; i = i + 1) {
                    // insert into html, only last 3 items
                    insert = (cartLines.length - i <= 3) ? true : false;
                    // accumulate total items in cart count, even if not in html
                    itemCount += self.renderCartItem(cartLines[i], insert);
                }

                // Set total item count
                if (itemCount > 99) {
                    itemCount = '99+';
                }
                self.cartItems.count.text(itemCount);
                self.cartItems.countBadge.text(itemCount);
            }else{

            }
        },
        /**
         * Render a shopping cart item and insert it in the drop down
         * @param {object} item Returned data item
         * @return {number} Quantity of current item added
         */
        renderCartItem: function (item, insert) {
            var self = this,
                su = window.SPDUtils,
                quantity = 0,
                li = new cartItemTemplate(item, item.quantity);

            // Retrieve quantity
            quantity = item.quantity;
            // Insert element
            if (insert) {
                self.cartItems.totals.before(li);
            }

            return quantity;
        }
    };
}());
/*global window:true, $:true, Class:true */
var video = Class.extend(function () {
    "use strict";

    return {
        /**
         * Initializes video class
         * @param {object} el Target element
         * @param {number} fw Optional forced width for consistent display
         */
        init: function (el, fw, fh) {
            // Parameters
            this.el = $(el);
            // Properties
            this.iframe = null;
            this.youtubeId = '';
            this.fw = 0;
            this.fh = 0;
            this.useParentDims = true;
            this.isBound = false;
            // Retrieve data
            this.setProperties(fw, fh);
            // Render if a YouTube ID is present
            if (this.youtubeId !== '') {
                this.render();
            }
        },
        /**
         * Retrieves data from attributes and parameters
         * @param {number} fw Optional forced width for consistent display
         * @param {number} fh Optional forced height for consistent display
         * @return {void}
         */
        setProperties: function (fw, fh) {
            var self = this,
                su = window.SPDUtils;

            // Get video information
            self.youtubeId = su.validString(self.el.data('youtubeid'));

            // Acquire parent dimensions
            self.getParentDims();

            // Override width
            if (su.validNumber(self.el.data('width')) > 0) {
                self.fw = parseInt(self.el.data('width'), 10);
                // Set the flag so re-renders do not reacquire parent dimensions
                self.useParentDims = false;
            } else if (su.validNumber(fw) > 0) {
                self.fw = parseInt(fw, 10);
                // Set the flag so re-renders do not reacquire parent dimensions
                self.useParentDims = false;
            }
            // Override height
            if (su.validNumber(self.el.data('height')) > 0) {
                self.fh = parseInt(self.el.data('height'), 10);
                // Set the flag so re-renders do not reacquire parent dimensions
                self.useParentDims = false;
            } else if (su.validNumber(fh) > 0) {
                self.fh = parseInt(fh, 10);
                // Set the flag so re-renders do not reacquire parent dimensions
                self.useParentDims = false;
            } else {
                // Set height based on 16:10 aspect ratio
                self.fh = (parseInt(self.fw, 10) / 16) * 10;
            }
        },
        /**
         * Sets dimension values to parent dimensions
         * @return {void}
         */
        getParentDims: function () {
            var self = this;
            self.fw = self.el.width();
            self.fh = (parseInt(self.fw, 10) / 16) * 10;
        },
        /**
         * Renders video iframe from YouTube
         */
        render: function () {
            var self = this,
                currentWidth = 0;

            // Get parent dimensions
            if (self.useParentDims === true) {
                self.getParentDims();
            }

            // Check if the iframe exists
            if (self.iframe === null) {
                // Create the iframe
                self.iframe = $('<iframe />');
                self.iframe.attr('src', 'http://www.youtube.com/embed/' + self.youtubeId)
                    .attr('allowfullscreen', 'true')
                    .attr('frameborder', '0')
                    .addClass('videoIframe');
                self.el.append(self.iframe);
            } else {
                // Get the iframe's current size
                currentWidth = self.iframe.width();
            }

            // Only set dimensions if the iframe is new or the parent has resized
            if (currentWidth === 0 || currentWidth !== self.fw) {
                self.iframe.css({
                    'width': self.fw,
                    'height': self.fh
                });
            }

            // Bind event
            if (self.isBound === false && self.useParentDims === true) {
                self.bindEvent();
            }
        },
        /**
         * Bind the window resize event
         * @return {void}
         */
        bindEvent: function () {
            var self = this;

            shc.pd.base.util.ViewChange.getInstance().onResponsive(function () {
                self.render();
            });

            this.isBound = true;
        }
    };
}());
function checkModelPartCount(searchModPar,pathTaken,textToDisplay){

    var displaySearchModPar="model no. not found";
    var displaySearchType="";
    var displayText=textToDisplay;
    var urlName="";
    var alsoSearch="";

    if(searchModPar!=null){
        displaySearchModPar=searchModPar;
        urlName="/bin/searspartsdirect/search/searchservlet?partnumber="+searchModPar;
    }

    if(pathTaken=="modelSearch"){
        displaySearchType="model";
        alsoSearch="part";
    }
    else{
        displaySearchType="part";
        alsoSearch="model";
    }

    $('.displaySearchType').text(displaySearchType);
    $('.displaySearchModPar').text(displaySearchModPar);
    $('.textToDisplay').text(textToDisplay);

    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            var moreCount=0;


            if(displaySearchType=="model"){
                if(typeof data.partResults !== 'undefined'){
                    var jsonResponse = data.partResults;
                    jsonResponse = JSON.parse(jsonResponse);
                    moreCount=jsonResponse.length;
                    $('.alsoFound').attr("href", "/content/searspartsdirect/en/partsearchresults.html?searchModPar="+displaySearchModPar+"&pathTaken=partSearch&shdMod=&shdPart="+displaySearchModPar);
                }
                else{$('#weAlsoFound').hide();}
            }
            else if(displaySearchType=="part"){
                if(typeof data.totalCount !== 'undefined'){
                    moreCount = parseInt(data.totalCount);
                    $('.alsoFound').attr("href", "/content/searspartsdirect/en/modelsearchresults.html?searchModPar="+displaySearchModPar+"&pathTaken=modelSearch&shdMod="+displaySearchModPar+"&shdPart=");
                }
                else{$('#weAlsoFound').hide();}
            }

            $('.alsoFound').append("("+moreCount+") "+alsoSearch+" number" );
        }
    });


}
function getDynamicTabs(modelNumber,brandId,categoryId){
    if(modelNumber!="" && brandId!="" && categoryId!=""){
        var urlName = "/bin/searspartsdirect/model/dynamictabs?modelNumber="+encodeURIComponent(modelNumber)+"&brandId="+encodeURIComponent(brandId)+"&categoryId="+encodeURIComponent(categoryId);
        $("#headerPD").show();
        $("#dynamicTabs").empty();
        $.ajax({
            type : "GET",
            cache : false,
            dataType : "json",
            url : urlName,
            success : function(data) {
                var jsonResponse = data;
                results = jsonResponse[Object.keys(jsonResponse)[0]];
                if(!JSON.stringify(results)){return;}
                else{
                    results = JSON.parse(results);
                    $("#dynamicTabs").append("<li class=\"active\">Shop Parts</li>");
                    for(var i=0;i<results.length;i++){
                        if(results[i].tabName == "Manuals"){
                            $("#dynamicTabs").append("<li><a href=\""+results[i].legacyTabUrl+"\">"+results[i].tabName+" ("+results[i].itemCount+")</a></li>");
                        }
                        else{
                            $("#dynamicTabs").append("<li><a href=\""+results[i].legacyTabUrl+"\">"+results[i].tabName+"</a></li>");
                        }
                    }
                }

            },
            error : function() {
                console.log("Get Dynamic Tabs -- API Failure");
            }
        });
    }
    //Will remove comment when I finish styling
    /*else{
     $("#headerPD").hide();
     console.log("Get Dynamic Tabs -- parameters not valid");
     }*/
}


function checkCookie(modelNumber, brandId, categoryId){

    if(modelNumber!="" && brandId!="" && categoryId!=""){
        var modelsCookie=getCookie("myProfileModels");
        if (modelsCookie != ""){
            // if cookie exists, send cookie details with API
            var urlName = "/bin/searspartsdirect/search/searchservlet?modelnumber="+encodeURIComponent(modelNumber)+"&brandId="+brandId+"&productCategoryId="+categoryId+"&cookieId="+modelsCookie+"&flag=108";
            $.ajax({
                type : "GET",
                cache : false,
                dataType : "json",
                url : urlName,
                success : function(data) {
                    // TODO: IF ANY
                    console.log("STATUS 201 CREATED");
                },
                error : function() {
                    console.log("Model All Diagram: checkCookie() -- API Failure");
                }
            });
        }else {
            //if cookie doesn't exist, create new one
            setDataForCookies(modelNumber, brandId, categoryId);
        }
    }
    else{
        console.log("check cookie-- parameters not valid");
    }
}

function setDataForCookies(modelNumber,brandId,categoryId){
    // Setting Cookie for User
    var urlName = "/bin/searspartsdirect/search/searchservlet?modelnumber="+encodeURIComponent(modelNumber)+"&brandId="+brandId+"&productCategoryId="+categoryId+"&flag=107";
    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            if(typeof data.myProfileModels !== 'undefined'){
                jsonResponse = data.myProfileModels;
                setCookie("myProfileModels",jsonResponse);
            }else{
                console.log("Failed to set cookie for User -- Model All Diagram -- setDataForCookies()");
            }
        },
        error : function() {
            console.log("Model All Diagram: setDataForCookies() -- API Failure");
        }
    });
}

function setCookie(cname,cvalue){
    document.cookie = cname + "=" + cvalue + ";";
    console.log("I Own This - Cookie set successfully");
}

function getCookie(cname){
    // Get Cookie Detail from browser
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++){
        var c = ca[i].trim();
        if (c.indexOf(name)==0){
            console.log(c.substring(name.length,c.length));
            return c.substring(name.length,c.length);
        }
    }
    return "";
}
function allModelDiagram(modelNumber, formattedModelNumber, brandId, productCategoryId, topSellingImagePath, brandName, modelDescription) {
    var urlName = "/bin/searspartsdirect/model/modelalldiagram?modelnumber="+formattedModelNumber+"&brandId="+brandId+"&productCategoryId="+productCategoryId;

    $.ajax({
        type : "GET",
        cache : false,
        dataType : "json",
        url : urlName,
        success : function(data) {
            if(typeof data.jsonAllDiagram !== 'undefined'){
                var jsonAllDiagram = data.jsonAllDiagram;
                jsonAllDiagram = JSON.parse(jsonAllDiagram);
                var jsonResponse = jsonAllDiagram.components;
                var jsonLength = jsonResponse.length;
                var jsonEngine = (typeof jsonAllDiagram.engineModel !== 'undefined') ? jsonAllDiagram.engineModel : "";
                var engineLength = jsonEngine.length;

                var waterFilterPart = (typeof data.waterFilterPart !== 'undefined') ? data.waterFilterPart : "";
                var topSellingParts = (typeof data.parts !== 'undefined') ? data.parts : "";
                var topSellingDiv="";

                if(topSellingParts.length !=0){
                    for(var j = 0; j < topSellingParts.length; j++) {
                        topSellingDiv = topSellingDiv + "<li><a href=\"http://www.searspartsdirect.com/partsdirect/part-number/"+topSellingParts[j].partCompositeKey.partNumber+"/"+topSellingParts[j].partCompositeKey.productGroupId+"/"+topSellingParts[j].partCompositeKey.supplierId+"\">"+topSellingParts[j].description+"</a></li>";
                    }
                }

                var engineDiv = "";
                if(engineLength != 0){
                    engineDiv = "<div> <a href=\http://www.searspartsdirect.com/partsdirect/part-model/" + jsonEngine.brandName + "-Parts/All-Products-Parts/Model-" + jsonEngine.engineModel + "/" + jsonEngine.brandId + "/" + jsonEngine.categoryId  + ">View all engine parts </a>for " + jsonEngine.brandName + " Engine Model Number " + jsonEngine.engineModel + "</div>";
                    $("#engineModelsContainer").append(engineDiv);
                }

                if(jsonLength != 0){
                    for(var j = 0; j < jsonResponse.length; j++) {
                        var topPartsList = "";

                        if(jsonResponse[j].parts.length > 0){
                            topPartsList = "<ul class=\"topParts-list\">"
                                + "<p>Top parts in this diagram</p>";
                            for(var i = 0; i<jsonResponse[j].parts.length; i++){
                                var jsonTopParts = jsonResponse[j].parts[i].description;
                                topPartsList = topPartsList + "<li><a class=\"disableMobile\" href=\"#\">"+jsonTopParts+"</a></li>";
                            }
                            topPartsList = topPartsList + "</ul>";
                        }

                        $("#allDiagramContainer").append("<li class=\"grid-item\">"
                            +"<a class=\"disableDesktop\" href=\"/content/searspartsdirect/en/modelpartlist.html"
                            + "?modelNumber="+modelNumber+"&formattedModelNumber="+formattedModelNumber+"&brandId="+brandId+"&categoryId="+productCategoryId+"&brandname="+brandName+"&modelDescription="+modelDescription+"&diagramPageId="+jsonResponse[j].diagramPageId+"&documentId="+jsonResponse[j].documentId+"&diagramUrl="+jsonResponse[j].diagramImageUrl+"\">"
                            + "<span class=\"diagramContainer model\">"
                            + "<img height=\"100px\" width=\"100px\" src=\""+jsonResponse[j].diagramImageUrl+"\" />"
                            + "<p class=\"diagramTitle\">"+jsonResponse[j].componentDescription+"</p>"
                            + topPartsList
                            + "</span></a></li>");

                        if(waterFilterPart.length!=0 && topSellingParts.length!=0){
                            if(j==0){
                                /* Water Filter Part */
                                addWaterFilterPart(waterFilterPart.partImage.imageURL, waterFilterPart.description);
                            }
                            else if(j==1){
                                /* Top Selling Part */
                                addTopSellingPart(topSellingImagePath, topSellingDiv);
                            }
                        }
                        else if(j==0 && waterFilterPart.length!=0 && topSellingParts.length==0){
                            addWaterFilterPart(waterFilterPart.partImage.imageURL, waterFilterPart.description);
                        }
                        else if(j==0&&topSellingParts.length!=0 &&  waterFilterPart.length==0){
                            addTopSellingPart(topSellingImagePath, topSellingDiv);
                        }
                    }
                }

            }
        },
        error : function() {
            console.log("Model All Diagram -- API Failure");
        }
    });
}

function addWaterFilterPart(waterFilterImage, waterFilterDescription){
    $("#allDiagramContainer").append("<li class=\"grid-item\"><a class=\"disableDesktop\" href=\"\">"
        + "<span class=\"diagramContainer model\">"
        + "<img src=\""+waterFilterImage+"\" />"
        + "<p class=\"diagramTitle\"><a class=\"disableMobile\" href=\"/content/searspartsdirect/en/modelpartlist.html\">"+waterFilterDescription+"</a></p></a>"
        + "</span></a></li>");
}

function addTopSellingPart(topSellingPartImage, topSellingDiv){
    $("#allDiagramContainer").append("<li class=\"grid-item\"><a class=\"disableDesktop\" href=\"#\">"
        +"<span class=\"diagramContainer topParts\">"
        +"<img src=\""+topSellingPartImage+"\" />"
        +"<h5 class=\"diagramTitle disableMobile\">Top parts in this model</h5>"
        +"<ul class=\"topParts-list\">"
        +topSellingDiv
        +"</ul>"
        +"</span>"
        +"</a></li>");
}

function showSearchByPartName(modelNumber, formattedModelNumber, brandId, categoryId, brandName, modelDescription, description){
    window.location.href = "/content/searspartsdirect/en/searchbypartname.html"
        + "?modelNumber="
        + modelNumber
        + "&formattedModelNumber="
        + formattedModelNumber
        + "&brandId="
        + brandId
        + "&categoryId="
        + categoryId
        + "&description="
        + description
        + "&brandName="
        + brandName
        + "&modelDescription=" + modelDescription;
}

// story 7812,7964,7844
function partDetail(productGroupId, supplierId, partNumber) {
    urlName = "/bin/searspartsdirect/search/partdetailservlet?partNumber="
        + partNumber + "&productGroupId=" + productGroupId + "&supplierId="
        + supplierId + "&flag=1";
    $
        .ajax({
            type : "GET",
            cache : false,
            dataType : "json",
            url : urlName,
            success : function(data) {
                console.log("Success");
                var jsonResponse = JSON.parse(data.partDetail);
                if (jsonResponse != "undefined") {
                    var partDetail = "";
                    var substitution = "";
                    var availability = "";
                    var status = jsonResponse.priceAndAvailability.availabilityStatus;
                    var isDescriptionClickable = false;
                    $(".partName").text(jsonResponse.description);

                    if (jsonResponse.priceAndAvailability.nonReturnableValue != "true") {
                        $("#refundStatus").text("This item is returnable");
                    } else {
                        $("#refundStatus").text(
                            "This item is non returnable");
                    }
                    if (status == "INST") {
                        if (jsonResponse.priceAndAvailability.originalPartNumber != jsonResponse.partCompositeKey.partNumber) {
                            substitution = "<br /><small><i class=\"icon-share flip-vertical\">&nbsp;</i> Substitution: "
                                + jsonResponse.partCompositeKey.partNumber
                                + "</small>";
                        }
                        // In Stock
                        availability = "<h4>In Stock</h4>";

                    } else if (status == "BORD") {
                        // Back Ordered
                        // do nothing
                    } else if (status == "PNF") {
                        // Part Not Found
                        availability = "<p>Contact customer support for availability: <strong>1-800-252-1698</strong></p>";
                    } else if (status == "NLA") {
                        // No Longer Available
                        availability = "<p>We're sorry, this item is no longer available.</p>";
                    } else if (status == "TECH") {
                        // Technician Required
                        // do nothing
                    }

                    $("#inStock").html(availability);
                    $("#partNumber").html(
                            jsonResponse.partCompositeKey.partNumber
                            + substitution);

                    $("#price")
                        .text(
                            "$"
                            + jsonResponse.priceAndAvailability.sellingPrice);

                    if (jsonResponse.featureCopyAvailable != "flase") {
                        var partInfo = "";
                        for ( var i = 0; i < jsonResponse.partAttributes.length; i++) {
                            var partName = jsonResponse.partAttributes[i].name
                                .toString();
                            if (partName.indexOf("FeatureCopy") != -1) {
                                partInfo = partInfo
                                    + jsonResponse.partAttributes[i].value;
                            }
                            if (partName == "ShippingWeight") {
                                $("#shippingWeight")
                                    .text(
                                    jsonResponse.partAttributes[i].value);
                            }
                            if (partName == "ShippingLength") {
                                $("#shippingLength")
                                    .text(
                                    jsonResponse.partAttributes[i].value);
                            }
                            if (partName == "ShippingWidth") {
                                $("#shippingWidth")
                                    .text(
                                    jsonResponse.partAttributes[i].value);
                            }
                            if (partName == "ShippingHeight") {
                                $("#shippingHeight")
                                    .text(
                                    jsonResponse.partAttributes[i].value);
                            }
                        }
                        $("#featureCopyVal").html(partInfo);
                    }

                    $("#filterCat").text(
                        jsonResponse.productGroupDescription);
                    // bundle Zoom

                    if (jsonResponse.waterFilterBundle != undefined) {
                        var partNumber = jsonResponse.waterFilterBundle.partCompositeKey.partNumber;
                        var productGroupId = jsonResponse.waterFilterBundle.partCompositeKey.productGroupId;
                        var supplierId = jsonResponse.waterFilterBundle.partCompositeKey.supplierId;
                        var pageURL = document.URL.substring(0,
                            document.URL.indexOf("?"));
                        var bundleURL = pageURL + "?partNumber="
                            + partNumber + "&productGroupId="
                            + productGroupId + "&supplierId="
                            + supplierId;

                        $('.bundleLink').attr('href', bundleURL);

                        $('#bundleImage').attr('src',
                            jsonResponse.partImage.imageURL);
                    } else {

                        $("#zoom").css({
                            "display" : "none"
                        });
                    }
                    // Cross Sale Component
                    crossSale(jsonResponse);

                } else {
                    console.log("API returns no results");
                }
            },
            error : function() {
                console.log("Part detail  -- API Failure");
            }
        });
}

function crossSale(jsonResponse) {
    if (jsonResponse.commonPairs != "") {
        $("#commonPairs").append(
            "<h1>Customer's who bought this part also bought :</h1>");
        var pairLen = jsonResponse.commonPairs.length;
        if (pairLen > 2) {
            pairLen = 2;
        }
        for ( var i = 0; i < pairLen; i++) {
            var desc = jsonResponse.commonPairs[i].description;
            var partNo = jsonResponse.commonPairs[i].partCompositeKey.partNumber;
            var substitution = "";
            var imageUrl = jsonResponse.commonPairs[i].partImage.imageURL;
            var price = jsonResponse.commonPairs[i].priceAndAvailability.sellingPrice;
            var status = jsonResponse.commonPairs[i].priceAndAvailability.availabilityStatus;
            var isDescriptionClickable = "";
            var availability = "";

            if (status == "INST" || status == "PNF" || status == "BORD") {
                isDescriptionClickable = true;
            }
            var description = (isDescriptionClickable == true) ? "<a href=\"http://www.urlforthepart.com\">"
                + desc + "</a>"
                : desc;

            if (status == "INST") {
                if (jsonResponse.commonPairs[i].priceAndAvailability.originalPartNumber != jsonResponse.commonPairs[i].partCompositeKey.partNumber) {
                    substitution = "<br /><small><i class=\"icon-share flip-vertical\">&nbsp;</i> Substitution: "
                        + jsonResponse.commonPairs[i].partCompositeKey.partNumber
                        + "</small>";
                }
                // In Stock
                availability = "<h4>In Stock</h4>"
                    + "<div class=\"partListItemQuantity\">"
                    + "<label>Qty</label>"
                    + "<input type=\"text\" class=\"addToCartQuantity_js\" value=\"1\" />"
                    + "</div>"
                    + "<div class=\"partListItemAdd\">"
                    + "<button type=\"button\" data-partnumber=\"partNumber\" data-divid=\"productGroupID\" data-plsid=\"supplierID\" class=\"new-btn new-btn-search addToCart_js\">Add to Cart</button>"
                    + "</div>";
            } else if (status == "BORD") {
                // Back Ordered
                // do nothing
            } else if (status == "PNF") {
                // Part Not Found
                availability = "<p>Contact customer support for availability: <strong>1-800-252-1698</strong></p>";
            } else if (status == "NLA") {
                // No Longer Available
                availability = "<p>We're sorry, this item is no longer available.</p>";
            } else if (status == "TECH") {
                // Technician Required
                // do nothing
            }

            $("#commonPairs").append(
                    "<img src=\"" + imageUrl
                    + "\" height=\"100px\" width=\"100px\"/>" + "<h4>"
                    + description + "</h4>" + "<h4>Part Number: "
                    + partNo + "</h4>" + "<h4>" + substitution
                    + "</h4>" + "<h4>$" + price + "</h4>"
                    + availability);
        }
    }
}
/*global window:true, $:true, Class:true, mainSitePath:true */
var mervRatingHelp = Class.extend(function () {
    "use strict";

    return {
        /**
         * @class addToCart
         * Creates an instance of an add to cart button
         * Uses AJAX to add item then updates the cart drop down
         *
         * init: On page load events to fire
         * @param {object} el jQuery element to attach to
         * @param {object} qf jQuery element for corresponding quantity field
         */
        init: function (el) {
            // Properties
            this.el = el;

            this.bindEvents();
        },
        /**
         * Bind events to button
         * @return {void}
         */
        bindEvents: function () {
            $('.collapse').on('shown.bs.collapse', function(){
                $(this).parent().find(".icon-chevron-down").removeClass("icon-chevron-down").addClass("icon-chevron-up");
            }).on('hidden.bs.collapse', function(){
                $(this).parent().find(".icon-chevron-up").removeClass("icon-chevron-up").addClass("icon-chevron-down");
            });
        }
    }
}());









/*global window:true, $:true, Class:true, mainSitePath:true */

var airFilterDimension = Class.extend(function() {
    "use strict";

    return {
        /**
         * Initializes airFilterDimension class
         * @param {object} el Target element
         */
        init : function(el) {
            if( $('#js_AirFilterDimensionSelection').length != 1 ) return false;
            //var width,height,depth;
            // Parameters
            this.el = el;
            // Events
            this.bindEvent();
            this.width = this.height = this.depth = false;
            this.template = Handlebars.compile( $('#js_airFilterResultTemplate').html() );
            this.pageUrl = document.location.href;
        },
        /**
         * toggle airFilter section
         *
         * @return {void}
         */

        // api call and setters need to be in a model
        setWidth : function( width ){
            this.width = width || false;
            return this;
        },
        setHeight : function( height ){
            this.height = height || false;
            return this;
        },
        setDepth : function( depth ) {
            this.depth = depth || false;
            return this;
        },

        resultsFromApi : function(ajaxOpts){
            var self = this;
            var ajaxObj = {
                url : apiPath + 'air-filters/list',
                data :{
                    w : this.width,
                    h : this.height,
                    d : this.depth
                },
                dataType : 'json',
                context : this,
                success : function( data ){

                    if(typeof callback === "function"){
                        callback.call( self, data );
                    }
                }
            };
            ajaxObj = $.extend(ajaxObj, ajaxOpts);
            $.ajax(ajaxObj);
        },

        getResults : function(){
            if(this.width && this.height && this.depth){
                $('#goodAirFilters,#betterAirFilters,#bestAirFilters').find('.setList').empty();
                this.resultsFromApi( {success: this.renderResults, error : this.showErrorState} );
            }else{

            }
        },

        showErrorState : function(){
            // hide stuff
            $('.initialDiagrams').addClass('hide');
            $('#afLandingMobileImage').css('display', 'none');
            $('.airfilterDimensionSection').css("border", "none" );
            $('.toolTip').addClass('hide');
            // show "not found" msg
            $('.filterResults').addClass('hide');
            $('#noAirFilters').removeClass('hide');
            SPDUtils.trackEvent({event: 'searchFail', values: {searchTerm: $('#airFilterWidth').val() + 'x' + $('#airFilterHeight').val() + 'x' + $('#airFilterDepth').val(), searchType: 'Air Filter Dimensions', searchTotal: '0', resultType: 'Air Filter 0 Results'}, componentPath: $('#js_AirFilterDimensionSelection').attr('data-component')}, 'Air_Filter_Dimensions_#templateName');
        },

        coalesceData:function(subSet){
            var returnSet = {};
            var prototype = function(obj){
                return {
                    "manufacturer" : obj.manufacturer,
                    "subscribable" : obj.subscribable,
                    "quality" : obj.quality,
                    "basePartNumber" : obj.basePartNumber,
                    "partDivId" : obj.partDivId,
                    "partPls" : obj.partPls,
                    "mervRating" : obj.mervRating,
                    "inStock" : obj.inStock,
                    "backOrdered" : obj.backOrdered,
                    "imageUrl" : obj.imageUrl,
                    "packs" : []
                }
            };
            for( var x in subSet){

                // get possible existing , or setup with new prototype
                returnSet[ subSet[x]['basePartNumber']] = returnSet[subSet[x]['basePartNumber']] || prototype(subSet[x]);
                returnSet[ subSet[x]['basePartNumber'] ]['packs'].push( {
                    "size" : subSet[x]['packSize'],
                    "price" : subSet[x]['priceForParts'],
                    "partNumber" : subSet[x]['partNumber']
                });
            }
            return returnSet;
        },

        // to view or template

        renderDimensionString : function(){
            return this.width+' x '+this.height+' x '+this.depth
        },

        renderTitle : function(maker, string, merv){
            return maker+' '+this.renderDimensionString()+' '+string+' - MERV '+merv;
        },

        renderURL : function(partNum, partDiv, partPls ) {
            return '/replacement-parts/hvac-air-filters/part-number/' + partNum + '/' + partDiv + '/' + partPls + '.html';
        },

        renderResultRow : function(rowData, lastChild){
            // falsiness rules on rowdata
            if( !rowData.manufacturer || !rowData.mervRating ) return false;

            var el = $('<li/>');

            var tempData = {
                title : this.renderTitle(rowData.manufacturer, 'Pleated Air Filter Replacement', rowData.mervRating),
                imageUrl : (typeof rowData.imageUrl === "string" && rowData.imageUrl.length > 1) ? rowData.imageUrl+'?wid=100&hei=100' : '/etc/designs/searspartsdirect/clientlib_base/img/SPD-Airfilter-NoImageAvailableThumb.png',
                packSizes : rowData.packs.sort(function(a,b){return a.size - b.size}),
                pdpURL : this.renderURL(rowData.packs[0].partNumber,rowData.partDivId,rowData.partPls)
            };

            el.html( this.template( tempData ) );
            if (!lastChild) {
                el.addClass('airFilterItemBottomBorder');
            }

            return el;
        },

        renderResultType : function(resultSet, setGroupSelector){

            if( resultSet ) {
                var frag = [],
                    numRows = 0,
                    count = 0,
                    lastChild = false;

                // first, loop thru to get num of rows
                for (var y in resultSet) {
                    numRows++;
                }

                for( var x in resultSet ) {
                    count++;
                    if (count === numRows) lastChild = true;
                    frag.push( this.renderResultRow( resultSet[x], lastChild ) );
                }
                $(setGroupSelector).find('.setList').empty().append(frag).end().removeClass('hide');
                $('#noAirFilters').addClass('hide');
            }else{
                $(setGroupSelector).addClass('hide');

            }
        },

        renderResults : function(resultSet){

            $('.initialDiagrams').addClass('hide');
            $('#afLandingMobileImage').css('display', 'none');
            $('.airfilterDimensionSection').css("border", "none" );
            $('.toolTip').addClass('hide');

            // show no found and the result set will clear it very quickly
            // less ideal as it forces a repaint
            $('#noAirFilters').removeClass('hide');

            if(typeof resultSet != 'object') return false;
            // else render result sets
            if( resultSet.bestAirFilters && resultSet.bestAirFilters.part ){
                resultSet.bestAirFilters.part = this.coalesceData ( resultSet.bestAirFilters.part );
                this.renderResultType ( resultSet.bestAirFilters.part, '#bestAirFilters' );
            }

            if( resultSet.betterAirFilters && resultSet.betterAirFilters.part ){
                resultSet.betterAirFilters.part = this.coalesceData( resultSet.betterAirFilters.part );
                this.renderResultType ( resultSet.betterAirFilters.part,'#betterAirFilters' );
            }

            if( resultSet.goodAirFilters && resultSet.goodAirFilters.part ) {
                resultSet.goodAirFilters.part = this.coalesceData( resultSet.goodAirFilters.part );
                this.renderResultType ( resultSet.goodAirFilters.part, '#goodAirFilters' );
            }

            var filterTypes = '';
            if (!$('#bestAirFilters').hasClass('hide')) {
                filterTypes = 'Best';
                // PD-11487 : When search results load, anchor first search result to top of page
                document.location.href = this.pageUrl + '#bestAirFilters';
            }
            if (!$('#betterAirFilters').hasClass('hide')) {
                if (filterTypes == '') {
                    filterTypes = 'Better';
                    document.location.href = this.pageUrl + '#betterAirFilters';
                } else {
                    filterTypes += ':Better';
                }
            }
            if (!$('#goodAirFilters').hasClass('hide')) {
                if (filterTypes == '') {
                    filterTypes = 'Good';
                    document.location.href = this.pageUrl + '#goodAirFilters';
                } else {
                    filterTypes += ':Good';
                }
            }
            SPDUtils.trackEvent({event: 'searchSuccess', values: {searchTerm: $('#airFilterWidth').val() + 'x' + $('#airFilterHeight').val() + 'x' + $('#airFilterDepth').val(), searchType: 'Air Filter Dimensions', searchTotal: $('.airFilterSearchResultsItemLeft').length, resultType: filterTypes}, componentPath: $('#js_AirFilterDimensionSelection').attr('data-component')}, 'Air_Filter_Dimensions_#templateName');
        },

        // end to view or template
        bindEvent : function() {
            var self = this;
            $('#airFilterWidth').on("change", function(){
                var w = $(this).val();
                if(w != self.width){
                    self.setWidth( w );
                    self.getResults();
                }
            });
            $('#airFilterHeight').on("change", function(){
                var h = $(this).val();
                if( h != self.height){
                    self.setHeight( h );
                    self.getResults();
                }
            });
            $('#airFilterDepth').on("change", function(){
                var d = $(this).val();
                if(d != self.depth){
                    self.setDepth( d );
                    self.getResults();
                }
            });

            /*PD-11484*/
            $('.responsiveDropdown').bind("DOMSubtreeModified", function(){
                if($(this).children("ul").hasClass("active")) {
                    // get the selected element
                    var selected = $(this).siblings("select").attr("id");

                    // collapse all other
                    $(".responsiveDropdown").each(function( index ) {
                        var current = $(this).siblings("select").attr("id");
                        if(selected != current) {
                            $(this).children("ul.active").removeClass("active");
                        }
                    });
                }
            });
        }
    }
}());
/*global window:true, $:true, Class:true, mainSitePath:true */
var banners = Class.extend(function() {
    "use strict";
    return {
        init : function(el) {
            this.el = el;
            this.template = Handlebars.compile( $('#js_filterBannerTemplate').html() );
            this.bindEvent();
        },
        renderFilterData : function() {
            var el = $('#bannerContainer');
            var airFilterData ={
                pageUrl: "/content/searspartsdirect/en/replacement-parts/hvac-air-filters/dimensions.html?intcmp=AirFilters",
                bannerHeading: "Air filters when you want them",
                filterImageUrl: "/etc/designs/searspartsdirect/clientlib_base/img/banners/airFilterBanner.png"
            };
            var waterFilterData ={
                pageUrl: "/content/searspartsdirect/en/replacement-parts/hvac-air-filters/dimensions.html?intcmp=AirFilters",
                bannerHeading: "Water filters when you want them",
                filterImageUrl: "/etc/designs/searspartsdirect/clientlib_base/img/banners/waterFilterBanner.png"
            };
            el.html( this.template( airFilterData ) );
        },
        bindEvent : function() {
            var self = this;
            self.renderFilterData();
        }
    }
}());
/*global window:true, $:true, Class:true, mainSitePath:true */
var seoHeroImage = Class.extend(function () {
    "use strict";

    return {
        /**
         * @singleton searchPanel
         * Singleton class for the searchPanel component
         *
         * init: On page load events to fire
         */
        init: function () {
            placeholderFallback();
            // Initialize events
            this.bindEvents();

        },
        getValue: function () {
            var self = this,
                field = $('#seoModelNumberSearchInput'),
                action = mainSitePath + '/partsdirect/part-model/',
                modelNumber='',
                value = field.attr('value');

            // Make sure the value isn't the help text
            if (value === field.data('inputhelp') || value === field.data('inputhelpmobile')) {
                value = '';
            }
            modelNumber = value;
            modelNumber = modelNumber.replace(/\ /g, '');
            modelNumber = modelNumber.replace(/\'/g, '');
            modelNumber = modelNumber.replace(/\%/g, '');
            modelNumber = modelNumber.replace(/\#/g, '');
            modelNumber = modelNumber.replace(/\&/g, '');
            modelNumber = modelNumber.replace(/\(/g, '');
            modelNumber = modelNumber.replace(/\)/g, '');
            modelNumber = modelNumber.replace(/\-/g, '');
            modelNumber = modelNumber.replace(/\*/g, '');
            modelNumber = modelNumber.replace(/\$/g, '');
            modelNumber = modelNumber.replace(/\^/g, '');
            modelNumber = modelNumber.replace(/\,/g, '');
            modelNumber = modelNumber.replace(/\"/g, '');
            modelNumber = modelNumber.replace(/\//g, '');
            modelNumber = modelNumber.replace(/\?/g, '');
            modelNumber = modelNumber.replace(/\\/g, '');


            if (modelNumber.indexOf('/') != -1){
                modelNumber = modelNumber.replace(/\//g, '');
            } else if ( modelNumber.indexOf('%') != -1 ){
                modelNumber = modelNumber.replace(/\%/g, '');
            }
            value = modelNumber;
            $('#pathTaken').attr('value', 'modelSearch');
            // Update form action
            $('#seoModelSearchForm').attr('action', action + encodeURIComponent(value));
            return value;

        },

        bindEvents: function () {
            var self = this;

            $('#seoModelNumberSearchInput').bind('focus', function () {
                $(this).removeClass('error');
            })

                .bind('keypress', function (e) {
                    var key = -1;

                    // Determine which key was pressed
                    if (e.keyCode) {
                        key = e.keyCode;
                    } else if (e.which) {
                        key = e.which;
                    }

                    // If the user hit enter, check if there's a type
                    if (key === 13) {
                        $('#seoSearchModels').click();
                    }
                    if (key === 9) {
                        if (self.getValue() == '') {
                            $('#seoModelNumberSearchInput').addClass('error');
                        } else {
                            $('#seoSearchModels').focus(function() { })
                        }

                    }
                });

            // Bind event on button
            $('#seoSearchModels').bind('click', function (e) {
                e.preventDefault();
                if (self.getValue() !== '') {
                    $('#seoModelSearchForm').submit();
                    $('#seoModelNumberSearchInput').removeClass('error');
                } else {
                    $('#seoModelNumberSearchInput').addClass('error');
                }
            });
        }
    }
}());

function placeholderFallback(){
    $("input[placeholder], textarea[placeholder]").each(function() {
        var val = $(this).attr("placeholder");
        if ( this.value == "" ) {
            this.value = val;
        }
        $(this).focus(function() {
            if ( this.value == val ) {
                this.value = "";
            }
        }).blur(function() {
            if ( $.trim(this.value) == "" ) {
                this.value = val;
            }
        })
    });
}

function topAccessoryparts(productGroupId, supplierId, partNumber, div, partsUrl) {
    $('#' + div).addClass('hidden');
    if(partNumber.length != 0){
        urlName = apiPath.replace('v1', 'parts') + partNumber + "?productGroupId=" + productGroupId + "&supplierId=" + supplierId;

        $.ajax({
            type : "GET",
            cache : false,
            dataType : "json",
            url : urlName,
            success : function(data) {

                if(typeof data !== 'undefined'){

                    var jsonResponse = data;

                    $('#' + div).removeClass('hidden');

                    if (jsonResponse != undefined) {
                        var status = jsonResponse.priceAndAvailability.availabilityStatus;
                        // In stock or back-order
                        if (status == "INST" || status == "BORD" ) {
                            var priceStr = jsonResponse.priceAndAvailability.sellingPrice.toString();
                            priceStr.split('.')[1].length == 1 ? priceStr+= '0' : priceStr;
                            if (typeof jsonResponse.partImage.imageURL !== 'undefined') {
                                $('#' + div + ' .partImage img').attr('src', jsonResponse.partImage.imageURL + '?hei=164&wid=164');
                            } else {
                                $('#' + div + ' .partImage img').attr('src', mainSitePath + '/partsdirect/assets/img/images/no_part.gif');
                            }
                            $('#' + div + ' .partImage a').attr('href', partsUrl + '/partsdirect/part-number/' + partNumber + '/' + jsonResponse.partCompositeKey.productGroupId + '/' + jsonResponse.partCompositeKey.supplierId);
                            $('#' + div + ' .partDescription strong a').html(jsonResponse.description).attr({ href: partsUrl + '/partsdirect/part-number/' + partNumber + '/' + jsonResponse.partCompositeKey.productGroupId + '/' + jsonResponse.partCompositeKey.supplierId, title: jsonResponse.description});
                            $('#' + div + ' .partNo strong span').text(jsonResponse.partCompositeKey.partNumber);
                            $('#' + div + ' .partListItemPrice strong').text('$' + priceStr);
                            status == "INST" ? $('#' + div + ' .partAvailability strong').text('In stock') : $('#' + div + ' .partAvailability strong').text('Back Order');
                            $('#' + div + ' .partListItemAdd button').attr('data-partnumber', partNumber).attr('data-divid', jsonResponse.partCompositeKey.productGroupId).attr('data-plsid', jsonResponse.partCompositeKey.supplierId);
                            $('#' + div + ' a.mobile-curtain').attr('href', partsUrl + '/partsdirect/part-number/' + partNumber + '/' + jsonResponse.partCompositeKey.productGroupId + '/' + jsonResponse.partCompositeKey.supplierId);

                            var newapiPath;
                            if(apiPath.indexOf('v1/') > -1){
                                newapiPath = apiPath.replace('v1/', '');
                            }

                            //Separate API call for Shop Your Way points
                            $.ajax({
                                type: "GET",
                                cache: false,
                                dataType: "json",
                                data: {
                                    partNumber: partNumber,
                                    divId: jsonResponse.partCompositeKey.productGroupId,
                                    plsNumber: jsonResponse.partCompositeKey.supplierId
                                },
                                url: newapiPath + 'syw/points',
                                success: function(response) {
                                    $('#' + div + ' .partPts span').text(response.points);
                                },
                                error: function(response) {
                                    //console.log("SYW API fail");
                                }
                            });
                        } else {
                            $('#' + div).addClass('hidden');
                        }
                    } else {
                        //console.log("API returns no results");
                        $('#' + div).addClass('hidden');
                    }
                } else {
                    $('#' + div).addClass('hidden');
                }
            },
            error : function() {
                //console.log("Top Accessory Parts  -- API Failure");
                $('#' + div).addClass('hidden');
            }
        });

        var quantityField = $('#'+div+' .addToCartQuantity_js');
        quantityField.keydown(function(e){
            numbersOnly(e);
        });

        numbersOnly = function(evt) {
            if (evt.keyCode === 46 || evt.keyCode === 8 || evt.keyCode === 9 || evt.keyCode === 27 || evt.keyCode === 13 || (evt.keyCode === 65 && evt.ctrlKey === true) || (evt.keyCode >= 35 && evt.keyCode <= 39)) {

            } else if (evt.shiftKey || (evt.keyCode < 48 || evt.keyCode > 57) && (evt.keyCode < 96 || evt.keyCode > 105)) {
                return evt.preventDefault();
            }
        }
    }
}
/*! slider v1.0.0 2014-03-02 */
/* global jQuery, $, Utils, Prefixr */

(function(zem, $) {
    'use strict';

    /**
     * Adds css prefixes depending on user's browser
     * @return {Object} CSS prefixed properties
     */
    var Prefixr = (function() {
        var _cssProperties = {
            textShadow: "textShadow",
            borderRadius: "borderRadius",
            transform: "transform",
            transitionDuration: "transitionDuration",
            boxShadow: "boxShadow",
            transition: "transition",
            delay: "transitionDelay"
        };

        var _vendorsArray = ['', 'webkit', 'Webkit', 'moz', 'Moz', 'o', 'ms', 'Ms'],
            _eventsArray = {
                'WebkitTransition': 'webkitTransitionEnd',
                'MozTransition': 'transitionend',
                'transition': 'transitionend'
            };

        (function() {
            var i,
                tempProp,
                vendorsLength = _vendorsArray.length;

            //  looping into css properties object  
            for (var prop in _cssProperties) {
                //  looping into vendor types
                for (i = 0; i <= vendorsLength; ++i) {
                    _cssProperties[prop] = null;
                    tempProp = prop;
                    //  capitalize CSS property
                    if (_vendorsArray[i] !== '') {
                        tempProp = prop.replace(/(^[a-z]{0,1})([\w])/g, replaceKey);
                    }
                    //  property found
                    if (typeof document.documentElement.style[_vendorsArray[i] + tempProp] !== 'undefined') {
                        _cssProperties[prop] = _vendorsArray[i] + tempProp;
                        break;
                    }
                }
            }

            _cssProperties.transitionend = _eventsArray[_cssProperties.transition];

        }());

        function replaceKey(m, key, value) {
            return key.toString().toUpperCase() + value;
        }

        return _cssProperties;
    }());

    /**
     * Represents a Slider instance
     * @constructor
     * @return {Object} Exposed methods
     */
    zem.Slider = function(selector, options) {

        /**
         * Slider container
         * @type {HTMLElement}
         */
        var element,

            /**
             * Items container (strip)
             * @type {HTMLElement}
             */
            itemsWrapper,

            /**
             * Slider viewport
             * @type {HTMLElement}
             */
            viewport,

            /**
             * Items collection
             * @type {NodeList}
             */
            items,

            /**
             * Total of items
             * @type {Number}
             */
            numItems,

            /**
             * Steps to reach the end of the slider
             * @type {Number}
             */
            numSteps,

            /**
             * Current Item
             * @type {Number}
             */
            index = 0,

            /**
             * Transition size
             * @type {Number}
             */
            size,

            /**
             * Initial drag position
             * @type {Number}
             */
            initialPos = 0,

            /**
             * Previous drag position
             * @type {Number}
             */
            lastPos = 0,

            /**
             * Initial dragging coordinates (x,y)
             */
            initialCoords = {
                x: 0,
                y: 0
            },

            /**
             * Dragging enabled
             * @type {Boolean}
             */
            isDragging = false,

            /**
             * Flag to determine if touch moved
             * @type {Boolean}
             */
            moved = false,

            /**
             * Bool flag to specify if slider is active or not
             */
            active = true,

            /**
             * Default settings
             * @type {Enum}
             */
            SETTINGS = {
                wrapper: '.slider-mask',
                viewport: '.slider-viewport',
                items: 'li',
                slides: 0,
                time: 0.3,
                delta: 50,
                forceTouch: false,
                onRelease: false
            };

        /**
         * @construcs jda.Carousel
         */
        (function() {

            SETTINGS = $.extend(SETTINGS, options);

            element = $(selector)[0];

            if ($(selector).hasClass('sliderjs')) {
                return;
            }

            $(selector).addClass('sliderjs');

            itemsWrapper = element.querySelector(SETTINGS.wrapper);

            var tempViewport = $('<div class="slider-viewport"></div>').html(itemsWrapper).appendTo(element);

            viewport = tempViewport[0];

            items = itemsWrapper.querySelectorAll(SETTINGS.items);

            numItems = items.length;
            init();

            on();

        }());

        function init() {
            resizeItems();
            $(window).on('resize', resizeItems);
        }

        /**
         * Add DOM listeners
         * @private
         */
        function addEventListeners() {
            if (SETTINGS.forceTouch) {
                viewport.addEventListener(ZUIEvent.START, startHandler, false);
                viewport.addEventListener(ZUIEvent.MOVE, moveHandler, false);
                viewport.addEventListener(ZUIEvent.END, endHandler, false);
                viewport.addEventListener(ZUIEvent.CLICK, clickHandler, false);
            }

            if (!Utils.touch()) {
                document.body.addEventListener(ZUIEvent.END, releaseDragging, false);
            }
        }

        /**
         * Resize carousel items
         */
        function resizeItems() {
            // If the slider container has a static width (fixed), stop repainting
            if (SETTINGS.single && typeof size !== 'undefined' && size === $(element).width()) {
                return;
            }

            // remove navigation
            removeNavigation();

            size = $(element).width();

            // set viewport width
            viewport.style.width = size + 'px';

            // expand items to the container width
            for (var i = 0 ; i < numItems; i++) {
                items[i].style.width = size + 'px';
            }


            numSteps = numItems;

            // enable event listeners
            addEventListeners();

            index = 0;
            // disable transition
            changeTransition(0);
            // maintain slide position
            goTo(-size * index);

            // restart transition time (500ms)
            setTimeout(changeTransition, SETTINGS.time*1000, SETTINGS.time);
        }

        /**
         * Remove event listeners, arrows and pagination buttons
         */
        function removeNavigation() {

            if (SETTINGS.forceTouch) {
                // remove drag&drop handlers
                viewport.removeEventListener(ZUIEvent.START, startHandler, false);
                viewport.removeEventListener(ZUIEvent.MOVE, moveHandler, false);
                viewport.removeEventListener(ZUIEvent.END, endHandler, false);
                viewport.removeEventListener(ZUIEvent.CLICK, clickHandler, false);
            }

            // fix for desktop dragging
            if (!Utils.touch() && SETTINGS.forceTouch) {
                document.body.removeEventListener(ZUIEvent.END, releaseDragging, false);
            }
        }

        function off() {
            if (active){
                itemsWrapper.style[Prefixr.transition] = 'none';
                itemsWrapper.style[Prefixr.transform] = 'none';
                itemsWrapper.style.width = 'auto';
                active = false;
            }
        }

        function on() {
            active = true;
            itemsWrapper.style.width = (itemsWrapper.querySelectorAll(SETTINGS.items).length * 100) + "%";
        }

        /**
         * Go to next item
         */
        function next() {
            index = (index + 1 < numSteps - 1) ? index + 1 : numSteps - 1;

            goTo(-size * index);
        }

        /**
         * Go to prev item
         */
        function prev() {
            index = (index - 1 >= 0) ? index - 1 : 0;

            goTo(-size * index);
        }

        /**
         * Go to a selected index
         * @param  {Number} pos - New position
         */
        function goTo(pos) {
            itemsWrapper.style[Prefixr.transform] = 'translate3d(' + pos + 'px, 0, 0)';
        }

        /**
         * Change transition time
         * @param  {Number} time - The transition time
         */
        function changeTransition(time) {
            itemsWrapper.style[Prefixr.transition] = 'all ' + time + 's';
        }

        /**
         * Start dragging
         * @event
         */
        function startHandler(e) {
            e.stopPropagation();
            initialCoords.x =  e.touches ? e.touches[0].pageX : e.clientX;
            initialCoords.y =  e.touches ? e.touches[0].pageY : e.clientY;

            isDragging = true;
            moved = false;
            initialPos = initialCoords.x;

            lastPos = initialPos;
        }

        /**
         * Move wrapper
         * @event
         */
        function moveHandler(e) {
            if (!isDragging) {
                return;
            } else {
                var currentDragPos = e.touches ? e.touches[0].pageX : e.clientX,
                    currentDragPosY = e.touches ? e.touches[0].pageY : e.clientY,
                    isScrolling = Math.abs(currentDragPos - initialCoords.x) < Math.abs(currentDragPosY - initialCoords.y);

                // user is scrolling window? (stop slider)
                if (isScrolling) {
                    return;
                }

                e.preventDefault();
                e.stopPropagation();

                changeTransition(0);
                var pos = Utils.getTranslateCoordinate(itemsWrapper.style[Prefixr.transform], 'x');


                goTo(pos - lastPos + currentDragPos);
                lastPos = currentDragPos;
                moved = true;
            }
        }

        /**
         * Stop dragging
         * @event
         */
        function endHandler(e) {

            if (!moved) {
                return;
            }
            e.stopPropagation();
            e.preventDefault();

            if (!isDragging) {
                return;
            }

            var currentDragPos = e.changedTouches ? e.changedTouches[0].pageX : e.clientX;


            changeTransition(SETTINGS.time);

            // move to next item
            if (initialPos - currentDragPos > SETTINGS.delta) {
                next();
                // move to prev item
            } else if (initialPos - currentDragPos < -SETTINGS.delta) {
                prev();
                // go to current item
            } else {
                goTo(-size * index);
            }

            if (typeof SETTINGS.onRelease === 'function'){
                SETTINGS.onRelease();
            }
            isDragging = false;
        }

        function clickHandler(e) {
            if (!moved) {
                return;
            }
            e.preventDefault();
            e.stopPropagation();

            isDragging = false;
        }

        /**
         * Stop dragging (body)
         * @event
         */
        function releaseDragging(e) {
            e.preventDefault();
            e.stopPropagation();

            if (!isDragging) {
                return;
            }

            changeTransition(SETTINGS.time);
            goTo(-size * index);
        }

        // public methods and properties
        return {
            prev: prev,
            next: next,
            off: off,
            on: on
        };
    };

    var ZUIEvent = ('ontouchstart' in window) ? {
        START: 'touchstart',
        MOVE: 'touchmove',
        END: 'touchend',
        CLICK: 'touchend'
    } : {
        START: 'mousedown',
        MOVE: 'mousemove',
        END: 'mouseup',
        CLICK: 'click'
    };

    var Utils = {
        /**
         * matches a translate3D coordinate (from translate3D CSS3 property)
         * @param value {String} The translate3D property string: 'translate3D(10px,0,-50px)'
         * @param coordinate {String} The coordinate needed: 'x' || 'y' || 'z'
         * @returns {Number}  Gets the selected coordinate value
         */
        getTranslateCoordinate: function(value, coordinate) {
            var coordinateValue = 0,
                arrMatches = value.toString().match(/([0-9\-]+)+(?![3d]\()/gi);

            //  matches all the 3D coordinates (from translate3D CSS3 property)
            if (arrMatches && arrMatches.length) {
                //  Gets the array position: [x, y, z]
                var coordinatePosition = coordinate === 'x' ? 0 : coordinate === 'y' ? 1 : 2;
                coordinateValue = parseFloat(arrMatches[coordinatePosition]);
            }

            return coordinateValue;
        },
        touch: function() {
            return ('ontouchstart' in window);
        }
    };

}(window.zem = window.zem || {}, jQuery || $));


/**
 * handle events invoking directly a method inside the DOM Element
 */
if (!Element.prototype.addEventListener) {
    Element.prototype.addEventListener = function(type, handler, useCapture) {
        if (this.attachEvent) {
            this.attachEvent('on' + type, function(event) {
                event.preventDefault = function() {
                    event.returnValue = false;
                    return false;
                };

                event.stopPropagation = function() {
                    window.event.cancelBubble = true;
                    return false;
                };

                event.target = event.srcElement;
                event.currentTarget = event.srcElement;


                handler(event);
            });
        }
        return this;
    };
}

if (!Element.prototype.removeEventListener) {
    Element.prototype.removeEventListener = function(type, handler, useCapture) {
        if (this.detachEvent) {
            this.detachEvent('on' + type, handler);
        }
        return this;
    };
}
function brandList(brandJSON, partsUrl) {
    var container = $('.brand-container'),
        wraper = $('.brand-wraper'),
        toggle = $('#stopShowStart'),
        swipeGuide = $('.iconHand'),
        rowElement = '<div class="row-fluid row-item brandsSection">',
        brand = rowElement,
        elements = brandJSON.length,
        resizeTimer, zsliderMobile,
        winWidth = $(window).width(),
        winHeight = $(window).height();

    $(window).on('resize',function(){
        clearTimeout(resizeTimer);
        var winNewWidth = $(window).width(),
            winNewHeight = $(window).height();
        if (winWidth!=winNewWidth || winHeight!=winNewHeight) {
            resizeTimer = setTimeout(resizeTrigger,1000);
            winWidth = winNewWidth;
            winHeight = winNewHeight;
        }
    });



    $.each(brandJSON, function(i,n){
        //loop through JSON and get the values
        //console.log("The css for the brand "+n["name"]+" is "+n["cssName"]);
        if(i > 0 && i%6 === 0){
            brand += '</div>' + rowElement;
        }
        brand += '<div class="span2"><a href="'+ partsUrl + '/partsdirect/brands/'+ n["name"] +'-Parts"><i class="'+ n["cssName"]+' many"></i></a></div>';
    });

    brand += '</div>';
    wraper.append(brand);
    if ($.browser.msie != undefined && parseInt($.browser.version) < 9) {
        var url = $('.svg-icon-hoover').css('background-image').replace('url(', '').replace(')', '').replace(/"/g, '');
        $('.svg-icon-hoover').parent().html('<img id="svg-icon-hoover" src="' + url + '" />');
        url = $('.svg-icon-black-decker').css('background-image').replace('url(', '').replace(')', '').replace(/"/g, '');
        $('.svg-icon-black-decker').parent().html('<img id="svg-icon-black-decker" src="' + url + '" />');
        url = $('.svg-icon-homelite').css('background-image').replace('url(', '').replace(')', '').replace(/"/g, '');
        $('.svg-icon-homelite').parent().html('<img id="svg-icon-homelite" src="' + url + '" />');
    }

    initSlideCarrol.init();

    resizeTrigger();

    function resizeTrigger(){
        if (window.matchMedia && window.matchMedia("(max-width: 767px)").matches) {
            initSlideCarrol.stopStartAnimation(true);
            container.addClass("blockLevel");
            swipeView();
        }else{
            if (typeof zsliderMobile !== 'undefined') {
                zsliderMobile.off();
            }
            if(elements > 6){
                container.removeClass("blockLevel");
                initSlideCarrol.runEvents();
                $(toggle).show();
            }else{
                container.addClass("blockLevel");
            }
        }
    }

    function sliderReleased(){
        setTimeout(function(){
            swipeGuide.hide();
        }, 1000);
    }

    function swipeView(){
        if(typeof zsliderMobile === 'undefined'){
            zsliderMobile = new zem.Slider('.brand-container', {
                wrapper: '.brand-wraper',
                items: '.brandsSection',
                forceTouch: true,
                onRelease: sliderReleased
            });
            /*
             container.hammer().on('dragright', function(e) {
             e.gesture.stopDetect();
             zsliderMobile.prev();
             });

             container.hammer().on('dragleft', function(e) {
             zsliderMobile.next();
             e.gesture.stopDetect();
             });*/



        }else{
            zsliderMobile.on();
        }



    }

}

var initSlideCarrol = (function ($) {
    var slideParent,
        slides,
        openCloseArrows,
        count,
        slidesHeight,
        current = 0,
        isAnimating = false,
        isOpen = false,
        setCSSCurrent, resetCSSCurrent, showAllLogos, closeAllLogos,
        runCarol = 0,
        timeout = 0,
        stopStartAnimation, runSliderThing, runEvents,
        currentSlide;

    setCSSCurrent = {
        top: 0,
        zIndex: 10
    };
    resetCSSCurrent = {
        top: "100%",
        zIndex: 0
    };

    stopStartAnimation = function (animationStart) {
        if (animationStart){
            //stop
            stopAnima();
            showAllLogos();
            slideParent.removeAttr('style');
        }else{
            closeAllLogos();
            openCloseArrows.off().on('click', function (event) {
                event.preventDefault();
                if (isOpen) {
                    // run go
                    closeAllLogos();
                } else {
                    //stop
                    stopAnima();
                    showAllLogos();
                }
            });
        }

    };

    var stopAnima = function () {
        isAnimating = false;
        window.clearInterval(runCarol);
        window.clearTimeout(timeout);
    };

    showAllLogos = function () {
        isOpen = true;
        slideParent.removeAttr('style');
        slides.css("top", "auto").removeClass("fadeOutSlide");
        slideParent.css("height", slidesHeight);
        slideParent.removeClass("default").addClass("blockLevel");
    };

    closeAllLogos = function () {
        isOpen = false;
        slideParent.removeAttr('style');
        slideParent.removeClass("blockLevel").addClass("default");
        slides.removeAttr('style');
        current = 0;
        initSlideCarrol.runSliderThing();
    };



    runSliderThing = function () {
        currentSlide.css(setCSSCurrent);
        stopAnima();
        isAnimating = true;
        runCarol = window.setInterval(function () {

            var currentItem = current;
            slides.css(resetCSSCurrent).removeClass("fadeOutSlide");

            slides.eq(currentItem).css({
                top: "-100%",
                zIndex: 1
            }).addClass('fadeOutSlide');

            timeout = setTimeout(function(){slides.eq(currentItem).css(resetCSSCurrent).removeClass("fadeOutSlide");},3000);

            current < count - 1 ? ++current : current = 0;

            slides.eq(current).css(setCSSCurrent);

        }, 4000);
    };

    runEvents = function () {
        count = slides.length;
        slidesHeight = count * slides.height();
        currentSlide = slides.eq(current);
        initSlideCarrol.stopStartAnimation();
        initSlideCarrol.runSliderThing();
    };

    init = function() {
        slideParent = $('#slider-caro-applianceV2');
        slides = $('.row-item');
        openCloseArrows = $('#stopShowStart');
    };

    return {
        runSliderThing: runSliderThing,
        runCarol: runCarol,
        closeAllLogos: closeAllLogos,
        stopStartAnimation: stopStartAnimation,
        showAllLogos: showAllLogos,
        runEvents: runEvents,
        init: init
    };

}(window.jQuery));
$(function () {

    if ($(".pdImgContainer").length === 1){

        var image = $(".pdImgContainer img");
        var full = false;
        var userMsg = $(".zoomer");
        var zoomOverlay = $(".zoomMsg");
        var startWid = image.width();
        var startHei = image.height();

        setImage = function(){

            if (full){
                image.animate({width: startWid+"px",height: startHei+"px"},3000);
                zoomOverlay.fadeTo(1000,0);
                full = false;
            } else {
                image.animate({maxWidth: (startWid*3) + "px",width: (startWid*3)+"px",height: (startHei*3)+"px"},3000,function(){
                    zoomOverlay.css({"left" : (startWid*3) - (zoomOverlay.width() + 20) + "px"});
                    zoomOverlay.fadeTo(3000,1);

                });
                full = true;

            }
        };

        userMsg.click(function(e) {

            e.preventDefault();
            setImage();

        });

        image.click(function() {

            setImage();

        });

        zoomOverlay.click(function(){

            setImage();

        });

    }
});
NS('shc.pd.base.widgets').AdUnit = shc.pd.base.render.Breakpoint.extend(function () {
    'use strict';

    return {
        /**
         * @constructor
         * @param {object} el jQuery ad unit container element
         */
        init: function (el, enablerClassName) {
            this.el = el;
            this.adUnitEl = $('.adUnit_js', this.el);
            this.enablerClassName = enablerClassName;
            this.imageRendered = false;
        },
        /**
         * Activation event
         * @return {void}
         */
        activate: function () {
            var self = this,
                foundImage = $('img', self.adUnitEl);

            // Account for the same ad unit being used for multiple breakpoints
            if (foundImage.length > 0) {
                self.imageRendered = true;
            }

            // Render if no image is present
            if (self.imageRendered === false) {
                self.renderImage();
            }

            // Set CSS classes
            self.el.addClass(self.enablerClassName);
        },
        /**
         * Deactivation event
         * @return {void}
         */
        deactivate: function () {
            var self = this;

            // Set CSS classes
            self.el.removeClass(self.enablerClassName);
        },
        /**
         * Render image event
         * @return {void}
         */
        renderImage: function () {
            var self = this,
                img = $('<img />'),
                imageUrl = window.SPDUtils.validString(self.adUnitEl.data('imageurl')),
                imageAlt = window.SPDUtils.validString(self.adUnitEl.data('imagealt')),
                linkUrl = window.SPDUtils.validString(self.adUnitEl.data('linkurl')),
                linkTarget = window.SPDUtils.validString(self.adUnitEl.data('linktarget'), '_self'),
                insertTarget = self.adUnitEl;

            // If there is a valid image URL, render
            if (imageUrl !== '') {
                // If there is a valid hyperlink, create an href
                if (linkUrl !== '') {
                    insertTarget = $('<a />');
                    insertTarget.attr('href', linkUrl)
                        .attr('target', linkTarget);
                    self.adUnitEl.append(insertTarget);
                }

                // Render the image itself
                img.attr('src', imageUrl)
                    .attr('alt', imageAlt)
                    .css('max-width', '100%');
                insertTarget.append(img);
                self.imageRendered = true;
            }
        }
    };
}());
NS('shc.pd.base.widgets').DesktopCarousel = shc.pd.base.render.Breakpoint.extend(function () {
    'use strict';

    return {
        /**
         * @constructor
         * @param {jQuery} parent {HTMLElement}
         */
        init: function (parent) {
            this.enablerClassName = 'desktopCarouselEnabled';
            this.masterCtrClassName = 'carouselMarkersDesktop';

            try {
                var items = $('.carouselItemHolder', parent);

                this.parent = parent;

                // get sample item width
                //this.movementPx = items.eq(0).width();
                this.movementPx = 550;

                // init carousel object
                this.carousel = new shc.pd.base.src.Carousel(parent, items.length, this.movementPx);

                // trigger bindings
                this.bindSideTriggers();
                this.bindMasterController();
                this.onIndexChangeControlDisplay(0);
            } catch (e) {
            }
        },
        /**
         * Activation event
         * @return {void}
         */
        activate: function () {
            this.parent.addClass(this.enablerClassName);
            this.carousel.enableAction();
        },
        /**
         * Deactivation event
         * @return {void}
         */
        deactivate: function () {
            this.parent.removeClass(this.enablerClassName);

            // disable animation
            this.carousel.disableAction();

            // reset index
            this.carousel.setIndex(0);

            // remove all styling
            $('.carouselListWrapper', this.parent).removeAttr('style');
        },
        /**
         * Generate left/right triggers
         * @return {void}
         */
        bindSideTriggers: function () {
            var left = $('<a />'),
                right = $('<a />'),
                _this = this;

            // trigger handler back
            left.addClass('carouselTriggerLeft').click(function (e) {
                e.preventDefault();
                _this.carousel.back();
            });

            left.prependTo(this.parent);

            // trigger handler next
            right.addClass('carouselTriggerRight').click(function (e) {
                e.preventDefault();
                _this.carousel.next();
            });

            right.prependTo(this.parent);

            // add icons
            left.html('<i class="icon-angle-left"></i>');
            right.html('<i class="icon-angle-right"></i>');

            _this.left = left;
            _this.right = right;
        },
        /**
         * Generate master controller
         * @return {void}
         */
        bindMasterController: function () {
            var container = $('<div />'),
                itemWrapper = $('<div />'),
                i,
                items = null,
                _this = this;

            for (i = 0; i <= this.carousel.getMaxIndex(); ++i) {
                itemWrapper.append($('<a />'));
            }

            container.addClass(this.masterCtrClassName);
            itemWrapper.addClass('carouselMarkersWrapper');

            // append to container, and append to document
            itemWrapper.appendTo(container);
            container.appendTo(this.parent);

            // get all div as jQuery reference
            items = $('a', itemWrapper);

            // controller clicks
            items.click(function (e) {
                e.preventDefault();
                _this.carousel.setIndex($(this).index());
            });

            // set current
            items.eq(this.carousel.getIndex()).addClass('active');

            // event callback
            this.carousel.setOnIndexChange(function (index) {
                items.removeClass('active');
                items.eq(index).addClass('active');
                _this.onIndexChangeControlDisplay(index);
            });

            _this.controls = container;
        },
        /**
         * Set control displays on index change
         */
        onIndexChangeControlDisplay: function (index) {
            var _this = this,
                itemCount = $('.carouselItemHolder', _this.parent).length;

            // Catch errors in case there is inheritance
            try {
                // Show or hide the left trigger
                if (itemCount < 2) {
                    _this.left.addClass('hideTrigger');
                } else if (index === 0) {
                    _this.left.addClass('hideTrigger');
                } else {
                    _this.left.removeClass('hideTrigger');
                }
            } catch(e) {
            }
            try {
                // Show or hide the right trigger
                if (itemCount < 2) {
                    _this.right.addClass('hideTrigger');
                } else if (index === (itemCount - 1)) {
                    _this.right.addClass('hideTrigger');
                } else {
                    _this.right.removeClass('hideTrigger');
                }
            } catch(e) {
            }
            try {
                // Show or hide the master controls
                if (itemCount < 2) {
                    _this.controls.addClass('hideControls');
                } else {
                    _this.controls.removeClass('hideControls');
                }
            } catch(e) {
            }
        }
    };
}());
NS('shc.pd.base.widgets').TouchCarousel = shc.pd.base.widgets.DesktopCarousel.extend(function () {
    'use strict';

    return {
        /**
         * @constructor
         * @param {jQuery} parent {HTMLElement}
         */
        init: function (parent) {
            this.enablerClassName = 'touchCarouselEnabled';
            this.masterCtrClassName = 'carouselMarkersTouch';

            try {
                var items = $('.carouselItemHolder', parent);

                this.parent = parent;

                // get sample item width
                //this.movementPx = items.eq(0).width();
                this.movementPx = 290;

                // init carousel object
                this.carousel = new shc.pd.base.src.Carousel(parent, items.length, this.movementPx);
                this.carousel.setAnimationSpeed(300);

                // trigger bindings
                this.bindMasterController();
                this.bindTouchEvents();
                this.onIndexChangeControlDisplay(0);
            } catch (e) {
            }
        },
        /**
         * Bind gestures
         * @returns {undefined}
         */
        bindTouchEvents: function () {
            var hasSwiped = false,
                _this = this; // is a Enum when set

            Hammer(this.parent, {swipe_velocity: 0.3}).on('swipeleft', function (e) {
                e.gesture.preventDefault();
                hasSwiped = shc.pd.base.util.Enums.Direction.Right;
            });

            Hammer(this.parent, {swipe_velocity: 0.3}).on('swiperight', function (e) {
                e.gesture.preventDefault();
                hasSwiped = shc.pd.base.util.Enums.Direction.Left;
            });

            Hammer(this.parent).on('dragend', function (e) {
                if (_this.active === true) {
                    if (hasSwiped !== false) { // decide based on gesture
                        if (hasSwiped === shc.pd.base.util.Enums.Direction.Right) {
                            _this.carousel.next();
                        } else {
                            _this.carousel.back();
                        }
                    }

                    // reset gesture reference
                    hasSwiped = false;
                }
            });
        }
    };
}());
NS('shc.pd.base.widgets').ResponsiveTable = (function () {
    'use strict';

    var TD_LABEL_CLASSNAME = 'visible-phone';

    return {
        /**
         * @param {jQuery} tables
         * @returns {undefined}
         */
        init: function (tables) {

            tables.each(function () {
                var tableHeaders = [],
                    uniqueID;

                // get headers
                $('thead th', this).each(function () {
                    tableHeaders.push($(this).text());
                });

                // insert on each content td
                $('tbody td', this).each(function () {
                    // if the first td, it will be shown - the others are collapsed
                    if ($(this).index() === 0) {
                        uniqueID = window.SPDUtils.getGUID();
                        $(this).attr('id', uniqueID);
                    } else {
                        $(this).addClass('td-hideable hidden-phone');
                    };
                    $(this).prepend('<div class="column-label ' + TD_LABEL_CLASSNAME +'">' + tableHeaders[$(this).index()] + '</div>');
                });

                // check if rows shouldn't be hidden
                if ($(this).hasClass('alwaysOpen')) {
                    $('.alwaysOpen td:eq(0)').addClass('td-open');
                    $('.alwaysOpen .td-hideable').removeClass('hidden-phone');
                    // if not...
                } else {
                    // add hide/show toggle for collapsible elements
                    $('tbody').on('click','td',function(){
                        $(this).toggleClass('td-open');
                        $('#'+this.id+' ~ .td-hideable').toggleClass('hidden-phone');
                    });
                }

            });
        }
    };
}());
NS('shc.pd.base.widgets').SearchPanelFinder = (function () {
    /**
     * @type {Object}{String} Enum
     */
    var VisibilityState = {
            Close: 0,
            Open: 1
        },
        /**
         * @type {String}
         */
        OPEN_STATE_CLASSNAME = 'is-open',
        /**
         * @type {Number}
         */
        ANIMATION_DURATION = 500;

    return {
        /**
         * Init widget config
         * @param {jQuery} parent
         * @returns {undefined}
         */
        init: function (parent) {
            var i,
                products = this.getProductTypeSelection(),
                item,
                placeholderOption = $('<option value="0">Select</option>'),
                _this = this;

            this.parent = parent;
            this.wrapper = $('.modelFinderWrapper');
            this.visibilityState = VisibilityState.Close;
            this.productTypeSelect = $('.modelFinderProductSelect select', parent);
            this.results = new shc.pd.base.widgets.SearchPanelFinderResult(this.parent);

            // Set initial states
            $('.modelFinderClose').show();
            $('.modelFinderOpen').hide();

            // append selection node

            this.productTypeSelect.append(placeholderOption);

            for (i = 0; i < products.length; ++i) {
                // set option node
                item = $('<option>').
                    attr('value', products[i].value).
                    text(products[i].name);

                // append node
                this.productTypeSelect.append(item);
            }

            // bind open/close triggers
            this.bindTriggers();

            // bind dropdown change event
            this.productTypeSelect.change(function () {
                var value = $(this).val();

                // remove the "Select", placeholder option
                if (placeholderOption){
                    placeholderOption.remove();
                    placeholderOption = null;
                }

                if (value !== "0") {
                    _this.results.requestProductData(value);
                }else{
                    _this.reset();
                }
            });

            // get wrapper height
            this.wrapper.height('auto');
            this.wrapperHeight = this.wrapper.height();

            // set back height to 0, this flash shouldn't be visible on browsers
            this.wrapper.height(0);
        },
        /**
         * Produce product type selections
         * @returns {Array}
         */
        getProductTypeSelection: function () {
            return [
                {name: 'Cooktops', value: 'cooktop'},
                {name: 'Dishwashers', value: 'dishwasher'},
                {name: 'Dryers', value: 'dryer'},
                {name: 'Freezers', value: 'freezer'},
                {name: 'Microwaves', value: 'microwave'},
                {name: 'Ovens', value: 'wall oven'},
                {name: 'Ranges', value: 'range'},
                {name: 'Refrigerators', value: 'refrigerator'},
                {name: 'Washers', value: 'washer'}
            ];
        },
        /**
         * Resets the panel's contents to default
         * @return {undefined}
         */
        reset: function() {
            $('.modelFinderOutput').html('');
            $('.modelFinderPaneManager').hide();
            $('.modelFinderHelper').show();
        },
        /**
         * Opens search panel (not using slideDown/slideUp for border purposes)
         * @returns {undefined}
         */
        open: function () {
            var _this = this;

            this.visibilityState = VisibilityState.Open;
            this.parent.addClass(OPEN_STATE_CLASSNAME);

            $('.modelFinderClose').hide();
            $('.modelFinderOpen').show();
            $('.modelFinderHelper').show();

            // animate
            // @TODO remove hard coded padding properties
            this.wrapper.stop(true).animate({height: _this.wrapperHeight, paddingTop: 10}, ANIMATION_DURATION, function () {
                $(this).height('auto');
            });
        },
        /**
         * Closes search panel
         * @returns {undefined}
         */
        close: function () {
            var _this = this;

            this.visibilityState = VisibilityState.Close;

            $('.modelFinderClose').show();
            $('.modelFinderOpen').hide();

            // animate
            this.wrapper.stop(true).animate({height: 0, paddingTop: 0, paddingBottom: 0}, ANIMATION_DURATION / 1.5, function () {
                _this.parent.removeClass(OPEN_STATE_CLASSNAME);
                _this.results.setProductType(null);
                _this.productTypeSelect[0].selectedIndex = 0;
            });
        },
        /**
         * Bind open/close triggers
         * @returns {undefined}
         */
        bindTriggers: function () {
            var _this = this;

            // event handler for open/close triggers
            $('.searchPanelFinder_js').click(function (e) {
                // determine action based on current visibiltiy state
                if (_this.visibilityState === VisibilityState.Close) {
                    // open when closed
                    _this.open();
                } else {
                    // close when opened
                    _this.close();
                }
            });
        }
    };
}());
NS('shc.pd.base.widgets').SearchPanelFinderResult = Class.extend(function() {
    var API_PREFIX = mainSitePath + '/partsdirect/',
        PRODUCT_URI = API_PREFIX + 'newModelLocatorActionProductTypeBasedFilter.pd',
        PRODUCT_SWITCHER_URI = API_PREFIX + 'fetchPlateLocationsAndImageForStyle.pd',
        MODEL_BRANDS = API_PREFIX + 'newModelLocatorActionBrandsListStyleBased.pd',
        MODEL_NUMBERS_URI = API_PREFIX + 'newModelLocatorActionSampleModelNumBrandBased.pd';

    return {
        /**
         * @type {String}
         */
        productType: null,
        /**
         * @type {String}
         */
        styleType: null,
        /**
         * Init widget config
         * @param {jQuery} parent container element
         * @returns {undefined}
         */
        init: function (parent) {
            var _this = this;

            // container reference
            this.parent = parent;
            // UI that handles going from model brand search and product output
            this.$paneManager = $('.modelFinderPaneManager', this.parent);
            // UI that contains the product search
            this.$productOutput = $('.modelFinderOutput', this.parent);
            // UI that contains both the 3 images and model helper search
            this.$modelHelper = $('.modelFinderHelper', this.parent);
            // UI that handles the final dropdown
            this.$modelHelperSearch = $('.modelFinderPlateFinder', this.parent);
            // UI that outputs model numbers
            this.$modelNumbersResult = $('.modelFinderPlateOutput', this.parent);
            // brand selector
            this.$modelHelperBrandSelect = $('select', this.$modelHelperSearch);
            // bind manager anchor links
            this.bindViewManagerEvents();
            // event for brand select
            this.$modelHelperBrandSelect.change(function () {
                var value = $(this).val();

                if (value !== 0) {
                    _this.requestModelNumbers($(this).val(), function (html) {
                        _this.showModelNumbers(html);
                    });
                }
            });
        },
        /**
         * Set style type
         * @param {String} styleType
         * @returns {undefined}
         */
        setStyleType: function (styleType) {
            this.styleType = styleType;
        },
        /**
         * Set product type. Anytime the product type changes, all UIs get reset
         * @param {String} productType
         * @returns {undefined}
         */
        setProductType: function (productType) {
            // clear past results
            this.clearProductSearch();
            this.clearModelHelperSearch();
            this.$paneManager.hide();

            // unset style type
            this.setStyleType(null);

            // set product
            this.productType = productType;
        },
        /**
         * Request product data
         * @param {String} product
         * @param {String} style optional
         * @returns {undefined}
         */
        requestProductData: function (product, style) {
            var _this = this,
                data = {},
                callback,
                url = PRODUCT_URI;

            this.setProductType(product);
            data.productType = product;

            // this assumes the initial UI has been established
            if (typeof style !== 'undefined') {
                url = PRODUCT_SWITCHER_URI;
                data.selectedStyle = style;

                this.setStyleType(style);

                // set UI response callback
                callback = function (data) {
                    // Clean image paths in data
                    data = data.replace('src="/partsdirect/assets/img/', 'src="' + mainSitePath + '/partsdirect/assets/img/');

                    _this.clearProductSearch(true);
                    _this.$productOutput.prepend(data);

                    // ui show/hide dance
                    _this.$productOutput.show();
                    _this.$paneManager.show();
                    _this.$modelHelper.hide();
                };
            } else {
                callback = function (data) {
                    // Clean image paths in data
                    data = data.replace('src="/partsdirect/assets/img/', 'src="' + mainSitePath + '/partsdirect/assets/img/');

                    _this.clearProductSearch();
                    _this.$productOutput.html(data);

                    // tango!
                    _this.$productOutput.show();
                    _this.$paneManager.show();
                    _this.$modelHelper.hide();
                };
            }

            $.ajax({
                url: url,
                type: 'GET',
                data: data,
                dataType: 'html'
            }).success(function (data) {
                // a check if you request then close the modal during a request
                if (this.productType !== null) {
                    callback(data);
                }
            }).fail(function () {
                _this.logRequestError(url);
            });
        },
        /**
         * Request for model brands and normalize result
         * @param {Function} callback
         * @returns {undefined}
         */
        requestModelBrands: function (callback) {
            var _this = this;

            $.ajax({
                url: MODEL_BRANDS,
                type: 'GET',
                data: {
                    productType: _this.productType,
                    selectedStyle: _this.styleType // this does not appear to change the result if null
                },
                dataType: 'html'
            }).done(function (data) {
                var output = [];

                $(data).find('a').each(function () {
                    var a = $(this);
                    output.push({key: a.text(), value: a.text()});
                });

                callback(output);
            }).fail(function () {
                _this.logRequestError(MODEL_BRANDS);
            });
        },
        /**
         * @param {String} brand
         * @param {Function} callback
         * @returns {undefined}
         */
        requestModelNumbers: function (brand, callback) {
            var _this = this;

            $.ajax({
                url: MODEL_NUMBERS_URI,
                type: 'GET',
                data: {
                    productType: _this.productType,
                    selectedStyle: _this.styleType,
                    selectedBrand: brand
                },
                dataType: 'html'
            }).done(function (data) {
                callback(data);
            }).fail(function () {
                _this.logRequestError(MODEL_NUMBERS_URI);
            });
        },
        /**
         * Log request error
         * @param {String} msg
         * @returns {undefined}
         */
        logRequestError: function (msg) {
            console.error('Request failed on [GET] ' + msg);
        },
        /**
         * Clears model helper search
         * @returns {undefined}
         */
        clearModelHelperSearch: function () {
            this.$modelHelperBrandSelect.remove('option');
            this.$modelNumbersResult.empty();
            this.$modelHelperSearch.hide();
        },
        /**
         * @param {Boolean} partial
         * @return {void}
         */
        clearProductSearch: function (partial) {
            if (typeof partial !== 'undefined' && partial === true) {
                $('.CMNP_left, .CMNP_center', this.parent).remove();
            } else {
                $('[class*="CMNP"]', this.parent).remove();
            }
        },
        /**
         * Sets options on model brand search
         * @param {Array} options
         * @returns {undefined}
         */
        setModelHelperSearch: function (options) {
            var i;

            this.$modelHelperBrandSelect.empty('option');

            // add select
            options.unshift({
                key: 'Select',
                value: 0
            });

            // append new items
            for (i = 0; i < options.length; ++i) {
                this.$modelHelperBrandSelect.append('<option value="' + options[i].value + '">' + options[i].key + '</option>');
            }

            // reset selected index
            this.$modelHelperBrandSelect[0].selectedIndex = 0;
        },
        /**
         * Shows model numbers HTML
         * @param {String} html
         * @returns {undefined}
         */
        showModelNumbers: function (html) {
            this.$modelNumbersResult.html(html);
        },
        /**
         * Binds model and help panes triggers
         * @returns {undefined}
         */
        bindViewManagerEvents: function () {
            var _this = this;

            // @TODO use class names
            $('div:first-child a', this.$paneManager).click(function (e) {
                e.preventDefault();

                $('a', this.$paneManager).removeClass('active');
                $(this).addClass('active');

                // show the helper search dropdown
                _this.$modelHelper.show();
                _this.$modelHelperSearch.show();
                _this.requestModelBrands(function (data) {
                    _this.setModelHelperSearch(data);
                });

                _this.$productOutput.hide();
            });

            // @TODO use class names
            $('div:last-child a', this.$paneManager).click(function (e) {
                e.preventDefault();

                $('a', this.$paneManager).removeClass('active');
                $(this).addClass('active');

                // clear model search
                _this.clearModelHelperSearch();

                // open result
                _this.$productOutput.show();
                _this.$modelHelperSearch.hide();
                _this.$modelHelper.hide();
            });
        }
    };
}());
(function(a){if(typeof define==="function"&&define.amd&&define.amd.jQuery){define(["jquery"],a)}else{a(jQuery)}}(function(e){var o="left",n="right",d="up",v="down",c="in",w="out",l="none",r="auto",k="swipe",s="pinch",x="tap",i="doubletap",b="longtap",A="horizontal",t="vertical",h="all",q=10,f="start",j="move",g="end",p="cancel",a="ontouchstart" in window,y="TouchSwipe";var m={fingers:1,threshold:25,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,triggerOnTouchEnd:true,triggerOnTouchLeave:false,allowPageScroll:"auto",fallbackToMouseEvents:true,excludedElements:"label, button, input, select, textarea, a, .noSwipe"};e.fn.swipe=function(D){var C=e(this),B=C.data(y);if(B&&typeof D==="string"){if(B[D]){return B[D].apply(this,Array.prototype.slice.call(arguments,1))}else{e.error("Method "+D+" does not exist on jQuery.swipe")}}else{if(!B&&(typeof D==="object"||!D)){return u.apply(this,arguments)}}return C};e.fn.swipe.defaults=m;e.fn.swipe.phases={PHASE_START:f,PHASE_MOVE:j,PHASE_END:g,PHASE_CANCEL:p};e.fn.swipe.directions={LEFT:o,RIGHT:n,UP:d,DOWN:v,IN:c,OUT:w};e.fn.swipe.pageScroll={NONE:l,HORIZONTAL:A,VERTICAL:t,AUTO:r};e.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,ALL:h};function u(B){if(B&&(B.allowPageScroll===undefined&&(B.swipe!==undefined||B.swipeStatus!==undefined))){B.allowPageScroll=l}if(B.click!==undefined&&B.tap===undefined){B.tap=B.click}if(!B){B={}}B=e.extend({},e.fn.swipe.defaults,B);return this.each(function(){var D=e(this);var C=D.data(y);if(!C){C=new z(this,B);D.data(y,C)}})}function z(a0,aq){var av=(a||!aq.fallbackToMouseEvents),G=av?"touchstart":"mousedown",au=av?"touchmove":"mousemove",R=av?"touchend":"mouseup",P=av?null:"mouseleave",az="touchcancel";var ac=0,aL=null,Y=0,aX=0,aV=0,D=1,am=0,aF=0,J=null;var aN=e(a0);var W="start";var T=0;var aM=null;var Q=0,aY=0,a1=0,aa=0,K=0;var aS=null;try{aN.bind(G,aJ);aN.bind(az,a5)}catch(ag){e.error("events not supported "+G+","+az+" on jQuery.swipe")}this.enable=function(){aN.bind(G,aJ);aN.bind(az,a5);return aN};this.disable=function(){aG();return aN};this.destroy=function(){aG();aN.data(y,null);return aN};this.option=function(a8,a7){if(aq[a8]!==undefined){if(a7===undefined){return aq[a8]}else{aq[a8]=a7}}else{e.error("Option "+a8+" does not exist on jQuery.swipe.options")}return null};function aJ(a9){if(ax()){return}if(e(a9.target).closest(aq.excludedElements,aN).length>0){return}var ba=a9.originalEvent?a9.originalEvent:a9;var a8,a7=a?ba.touches[0]:ba;W=f;if(a){T=ba.touches.length}else{a9.preventDefault()}ac=0;aL=null;aF=null;Y=0;aX=0;aV=0;D=1;am=0;aM=af();J=X();O();if(!a||(T===aq.fingers||aq.fingers===h)||aT()){ae(0,a7);Q=ao();if(T==2){ae(1,ba.touches[1]);aX=aV=ap(aM[0].start,aM[1].start)}if(aq.swipeStatus||aq.pinchStatus){a8=L(ba,W)}}else{a8=false}if(a8===false){W=p;L(ba,W);return a8}else{ak(true)}return null}function aZ(ba){var bd=ba.originalEvent?ba.originalEvent:ba;if(W===g||W===p||ai()){return}var a9,a8=a?bd.touches[0]:bd;var bb=aD(a8);aY=ao();if(a){T=bd.touches.length}W=j;if(T==2){if(aX==0){ae(1,bd.touches[1]);aX=aV=ap(aM[0].start,aM[1].start)}else{aD(bd.touches[1]);aV=ap(aM[0].end,aM[1].end);aF=an(aM[0].end,aM[1].end)}D=a3(aX,aV);am=Math.abs(aX-aV)}if((T===aq.fingers||aq.fingers===h)||!a||aT()){aL=aH(bb.start,bb.end);ah(ba,aL);ac=aO(bb.start,bb.end);Y=aI();aE(aL,ac);if(aq.swipeStatus||aq.pinchStatus){a9=L(bd,W)}if(!aq.triggerOnTouchEnd||aq.triggerOnTouchLeave){var a7=true;if(aq.triggerOnTouchLeave){var bc=aU(this);a7=B(bb.end,bc)}if(!aq.triggerOnTouchEnd&&a7){W=ay(j)}else{if(aq.triggerOnTouchLeave&&!a7){W=ay(g)}}if(W==p||W==g){L(bd,W)}}}else{W=p;L(bd,W)}if(a9===false){W=p;L(bd,W)}}function I(a7){var a8=a7.originalEvent;if(a){if(a8.touches.length>0){C();return true}}if(ai()){T=aa}a7.preventDefault();aY=ao();Y=aI();if(a6()){W=p;L(a8,W)}else{if(aq.triggerOnTouchEnd||(aq.triggerOnTouchEnd==false&&W===j)){W=g;L(a8,W)}else{if(!aq.triggerOnTouchEnd&&a2()){W=g;aB(a8,W,x)}else{if(W===j){W=p;L(a8,W)}}}}ak(false);return null}function a5(){T=0;aY=0;Q=0;aX=0;aV=0;D=1;O();ak(false)}function H(a7){var a8=a7.originalEvent;if(aq.triggerOnTouchLeave){W=ay(g);L(a8,W)}}function aG(){aN.unbind(G,aJ);aN.unbind(az,a5);aN.unbind(au,aZ);aN.unbind(R,I);if(P){aN.unbind(P,H)}ak(false)}function ay(bb){var ba=bb;var a9=aw();var a8=aj();var a7=a6();if(!a9||a7){ba=p}else{if(a8&&bb==j&&(!aq.triggerOnTouchEnd||aq.triggerOnTouchLeave)){ba=g}else{if(!a8&&bb==g&&aq.triggerOnTouchLeave){ba=p}}}return ba}function L(a9,a7){var a8=undefined;if(F()||S()){a8=aB(a9,a7,k)}else{if((M()||aT())&&a8!==false){a8=aB(a9,a7,s)}}if(aC()&&a8!==false){a8=aB(a9,a7,i)}else{if(al()&&a8!==false){a8=aB(a9,a7,b)}else{if(ad()&&a8!==false){a8=aB(a9,a7,x)}}}if(a7===p){a5(a9)}if(a7===g){if(a){if(a9.touches.length==0){a5(a9)}}else{a5(a9)}}return a8}function aB(ba,a7,a9){var a8=undefined;if(a9==k){aN.trigger("swipeStatus",[a7,aL||null,ac||0,Y||0,T]);if(aq.swipeStatus){a8=aq.swipeStatus.call(aN,ba,a7,aL||null,ac||0,Y||0,T);if(a8===false){return false}}if(a7==g&&aR()){aN.trigger("swipe",[aL,ac,Y,T]);if(aq.swipe){a8=aq.swipe.call(aN,ba,aL,ac,Y,T);if(a8===false){return false}}switch(aL){case o:aN.trigger("swipeLeft",[aL,ac,Y,T]);if(aq.swipeLeft){a8=aq.swipeLeft.call(aN,ba,aL,ac,Y,T)}break;case n:aN.trigger("swipeRight",[aL,ac,Y,T]);if(aq.swipeRight){a8=aq.swipeRight.call(aN,ba,aL,ac,Y,T)}break;case d:aN.trigger("swipeUp",[aL,ac,Y,T]);if(aq.swipeUp){a8=aq.swipeUp.call(aN,ba,aL,ac,Y,T)}break;case v:aN.trigger("swipeDown",[aL,ac,Y,T]);if(aq.swipeDown){a8=aq.swipeDown.call(aN,ba,aL,ac,Y,T)}break}}}if(a9==s){aN.trigger("pinchStatus",[a7,aF||null,am||0,Y||0,T,D]);if(aq.pinchStatus){a8=aq.pinchStatus.call(aN,ba,a7,aF||null,am||0,Y||0,T,D);if(a8===false){return false}}if(a7==g&&a4()){switch(aF){case c:aN.trigger("pinchIn",[aF||null,am||0,Y||0,T,D]);if(aq.pinchIn){a8=aq.pinchIn.call(aN,ba,aF||null,am||0,Y||0,T,D)}break;case w:aN.trigger("pinchOut",[aF||null,am||0,Y||0,T,D]);if(aq.pinchOut){a8=aq.pinchOut.call(aN,ba,aF||null,am||0,Y||0,T,D)}break}}}if(a9==x){if(a7===p||a7===g){clearTimeout(aS);if(V()&&!E()){K=ao();aS=setTimeout(e.proxy(function(){K=null;aN.trigger("tap",[ba.target]);if(aq.tap){a8=aq.tap.call(aN,ba,ba.target)}},this),aq.doubleTapThreshold)}else{K=null;aN.trigger("tap",[ba.target]);if(aq.tap){a8=aq.tap.call(aN,ba,ba.target)}}}}else{if(a9==i){if(a7===p||a7===g){clearTimeout(aS);K=null;aN.trigger("doubletap",[ba.target]);if(aq.doubleTap){a8=aq.doubleTap.call(aN,ba,ba.target)}}}else{if(a9==b){if(a7===p||a7===g){clearTimeout(aS);K=null;aN.trigger("longtap",[ba.target]);if(aq.longTap){a8=aq.longTap.call(aN,ba,ba.target)}}}}}return a8}function aj(){var a7=true;if(aq.threshold!==null){a7=ac>=aq.threshold}return a7}function a6(){var a7=false;if(aq.cancelThreshold!==null&&aL!==null){a7=(aP(aL)-ac)>=aq.cancelThreshold}return a7}function ab(){if(aq.pinchThreshold!==null){return am>=aq.pinchThreshold}return true}function aw(){var a7;if(aq.maxTimeThreshold){if(Y>=aq.maxTimeThreshold){a7=false}else{a7=true}}else{a7=true}return a7}function ah(a7,a8){if(aq.allowPageScroll===l||aT()){a7.preventDefault()}else{var a9=aq.allowPageScroll===r;switch(a8){case o:if((aq.swipeLeft&&a9)||(!a9&&aq.allowPageScroll!=A)){a7.preventDefault()}break;case n:if((aq.swipeRight&&a9)||(!a9&&aq.allowPageScroll!=A)){a7.preventDefault()}break;case d:if((aq.swipeUp&&a9)||(!a9&&aq.allowPageScroll!=t)){a7.preventDefault()}break;case v:if((aq.swipeDown&&a9)||(!a9&&aq.allowPageScroll!=t)){a7.preventDefault()}break}}}function a4(){var a8=aK();var a7=U();var a9=ab();return a8&&a7&&a9}function aT(){return !!(aq.pinchStatus||aq.pinchIn||aq.pinchOut)}function M(){return !!(a4()&&aT())}function aR(){var ba=aw();var bc=aj();var a9=aK();var a7=U();var a8=a6();var bb=!a8&&a7&&a9&&bc&&ba;return bb}function S(){return !!(aq.swipe||aq.swipeStatus||aq.swipeLeft||aq.swipeRight||aq.swipeUp||aq.swipeDown)}function F(){return !!(aR()&&S())}function aK(){return((T===aq.fingers||aq.fingers===h)||!a)}function U(){return aM[0].end.x!==0}function a2(){return !!(aq.tap)}function V(){return !!(aq.doubleTap)}function aQ(){return !!(aq.longTap)}function N(){if(K==null){return false}var a7=ao();return(V()&&((a7-K)<=aq.doubleTapThreshold))}function E(){return N()}function at(){return((T===1||!a)&&(isNaN(ac)||ac===0))}function aW(){return((Y>aq.longTapThreshold)&&(ac<q))}function ad(){return !!(at()&&a2())}function aC(){return !!(N()&&V())}function al(){return !!(aW()&&aQ())}function C(){a1=ao();aa=event.touches.length+1}function O(){a1=0;aa=0}function ai(){var a7=false;if(a1){var a8=ao()-a1;if(a8<=aq.fingerReleaseThreshold){a7=true}}return a7}function ax(){return !!(aN.data(y+"_intouch")===true)}function ak(a7){if(a7===true){aN.bind(au,aZ);aN.bind(R,I);if(P){aN.bind(P,H)}}else{aN.unbind(au,aZ,false);aN.unbind(R,I,false);if(P){aN.unbind(P,H,false)}}aN.data(y+"_intouch",a7===true)}function ae(a8,a7){var a9=a7.identifier!==undefined?a7.identifier:0;aM[a8].identifier=a9;aM[a8].start.x=aM[a8].end.x=a7.pageX||a7.clientX;aM[a8].start.y=aM[a8].end.y=a7.pageY||a7.clientY;return aM[a8]}function aD(a7){var a9=a7.identifier!==undefined?a7.identifier:0;var a8=Z(a9);a8.end.x=a7.pageX||a7.clientX;a8.end.y=a7.pageY||a7.clientY;return a8}function Z(a8){for(var a7=0;a7<aM.length;a7++){if(aM[a7].identifier==a8){return aM[a7]}}}function af(){var a7=[];for(var a8=0;a8<=5;a8++){a7.push({start:{x:0,y:0},end:{x:0,y:0},identifier:0})}return a7}function aE(a7,a8){a8=Math.max(a8,aP(a7));J[a7].distance=a8}function aP(a7){if(J[a7]){return J[a7].distance}return undefined}function X(){var a7={};a7[o]=ar(o);a7[n]=ar(n);a7[d]=ar(d);a7[v]=ar(v);return a7}function ar(a7){return{direction:a7,distance:0}}function aI(){return aY-Q}function ap(ba,a9){var a8=Math.abs(ba.x-a9.x);var a7=Math.abs(ba.y-a9.y);return Math.round(Math.sqrt(a8*a8+a7*a7))}function a3(a7,a8){var a9=(a8/a7)*1;return a9.toFixed(2)}function an(){if(D<1){return w}else{return c}}function aO(a8,a7){return Math.round(Math.sqrt(Math.pow(a7.x-a8.x,2)+Math.pow(a7.y-a8.y,2)))}function aA(ba,a8){var a7=ba.x-a8.x;var bc=a8.y-ba.y;var a9=Math.atan2(bc,a7);var bb=Math.round(a9*180/Math.PI);if(bb<0){bb=360-Math.abs(bb)}return bb}function aH(a8,a7){var a9=aA(a8,a7);if((a9<=45)&&(a9>=0)){return o}else{if((a9<=360)&&(a9>=315)){return o}else{if((a9>=135)&&(a9<=225)){return n}else{if((a9>45)&&(a9<135)){return v}else{return d}}}}}function ao(){var a7=new Date();return a7.getTime()}function aU(a7){a7=e(a7);var a9=a7.offset();var a8={left:a9.left,right:a9.left+a7.outerWidth(),top:a9.top,bottom:a9.top+a7.outerHeight()};return a8}function B(a7,a8){return(a7.x>a8.left&&a7.x<a8.right&&a7.y>a8.top&&a7.y<a8.bottom)}}}));
/*global window:true, $:true, Class:true, mainSitePath:true */
/**
 * Shared template for addToCart items
 * @param {object} item Cart item to render
 * @param {string} quantity Optional secondary quantity value
 * @return {object} jQuery element representation of the cart item
 */
var cartItemTemplate = function (item, quantity) {
    "use strict";

    // Properties
    var su = window.SPDUtils,
        li = $('<li />'),
        description = su.validString(item.description),
        partNumber = su.validString(item.partNumber),
        partUrl = su.validString(item.partUrl),
        productGroupId = su.validNumber(item.productGroupId),
        supplierId = su.validNumber(item.supplierId),
        renewel = su.validNumber(item.renewalPeriod),
        subNote = '';

    // Data validation
    if (su.validNumber(quantity) === 0) {
        quantity = su.validNumber(item.quantity);
    }
    if (description.length > 17) {
        description = description.substring(0, 17) + '...';
    }
    if (partUrl === '' && productGroupId > 0 && supplierId > 0) {
        partUrl = '/partsdirect/part-number/' + partNumber + '/' + productGroupId + '/' + supplierId;
    }
    if (renewel !== 0) {
        subNote = '<div class="cart-sub"><span class="svg-icon-truck"></span><span>Automatic Reorder</span></div><div class="cart-sub-freq"><span>Set: every ' + renewel + ' months</span></div>';
    }

    li.addClass('cart-item');
    li.html('<span class="cart-part"><a href="' + mainSitePath + partUrl + '">' + partNumber + '</a>' + (description !== '' ? '<br />' + description : '') + '</span><span class="cart-quantity">' + quantity + '</span>' + subNote);

    return li;
};
/*global window:true, $:true, Class:true, mainSitePath:true */
/**
 * Shared template for recently viewed model items
 * @param {object} item Model item to render
 * @return {object} jQuery element representation of the model item
 */
var modelItemTemplate = function (item) {
    "use strict";

    // Properties
    var su = window.SPDUtils,
        li = $('<li />'),
        modelName = su.validString(item.modelName),
        modelDescription = su.validString(item.modelDescription),
        modelUrl = su.validString(item.modelURL);

    li.html('Model <a href="' + mainSitePath + modelUrl +'">' + modelName.replace('"', '') + '<br />' + modelDescription.replace('"', '') + '</a>');

    return li;
};
/*global window:true, $:true, Class:true, mainSitePath:true */
/**
 * Shared template for my models items
 * @param {object} item Model item to render
 * @return {object} jQuery element representation of the model item
 */
var myModelsItemTemplate = function (item) {
    "use strict";

    // Properties
    var su = window.SPDUtils,
        span = $('<span />'),
        modelId = item.id,
        modelNumber = su.validString(item.modelNumber),
        modelBrandName = su.validString(item.brandName),
        modelCategoryName = su.validString(item.categoryName),
        modelDescription = su.validString(item.modelDescription),
        modelItemUrl = su.validString(item.itemURL);

    span.addClass('cartModelItem');
    span.html('<input type="checkbox" value="' + modelId + '" /><a href="' + mainSitePath + modelItemUrl + '">' + modelBrandName + ' ' + modelCategoryName + ' model #' + modelNumber + '</a>');

    return span;
};
/*global window:true, $:true, Class:true, mainSitePath:true */
/**
 * Shared template for recently viewed part items
 * @param {object} item Part item to render
 * @return {object} jQuery element representation of the part item
 */
var partItemTemplate = function (item) {
    "use strict";

    // Properties
    var su = window.SPDUtils,
        li = $('<li />'),
        partName = su.validString(item.partName),
        partDescription = su.validString(item.partDescription),
        partUrl = su.validString(item.partURL),
        partImageUrl = su.validString(item.partImageURL);

    if (partImageUrl.toLowerCase() === 'null') {
        partImageUrl = '';
    }

    li.html('<a href="' + mainSitePath + partUrl + '">' + (partImageUrl !== '' ? '<img src="' + partImageUrl + '" alt="' + partDescription + '" />' : '') + partName.replace('"', '') + '<br />' + partDescription.replace('"', '') + '</a>');

    return li;
};
/*global $:true, window:true, document:true, Class:true, searchPanel:true, revealPanel:true, responsiveImage: true, video:true, guideNavigation:true, regula:true */
(function (window) {
    "use strict";
    /**
     * Global functionality instantiation
     */
    $(document).ready(function () {
        /**
         * IE support
         *
         if ($.browser.msie) {
			var v = $.browser.version;
			v = v.slice(0, v.indexOf('.'));
			if (window.SPDUtils.validNumber(v, 1000) < 10) {
				$('html').addClass('lt-ie10');
			}
			if (window.SPDUtils.validNumber(v, 1000) < 9) {
				$('html').addClass('lt-ie9');
			}
			$('html').addClass('ie-v' + v);
		}
         */
        if (BrowserDetect.browser == 'Explorer') {
            var v = BrowserDetect.version;
            v = v.slice(0, v.indexOf('.'));
            if (window.SPDUtils.validNumber(v, 1000) < 10) {
                $('html').addClass('lt-ie10');
            }
            if (window.SPDUtils.validNumber(v, 1000) < 9) {
                $('html').addClass('lt-ie9');
            }
            $('html').addClass('ie-v' + v);
        }

        /**
         * Seo landing Page
         */
        //var newSeoHeroImage = new seoHeroImage();
        /**
         * Set up userData singleton class before all else
         */
        var newUserData = new userData();
        /**
         * Cross-Domain Window Message Handling
         */
        var newMessageHandler = new messageHandler();
        $(window).bind('message', function (e) {
            e.preventDefault();
            newMessageHandler.handleMessage(e.originalEvent);
        });
        /* Fix Twitter Bootstrap Dropdown Issue */
        $('.dropdown-menu li').click(function(e) {
            if (e.cancelBubble) {
                e.cancelBubble = true;
            } else {
                e.stopPropagation();
            }
        });
        /**
         * modelHeader singleton class setup
         */
        var newModelHeader = new modelHeader();
        /**
         * searchPanel singleton class setup
         */
        //var mainSearchPanel = new searchPanel();
        /**
         * modelNumberSearch class setup
         */
        $('.modelNumberSearch').each(function () {
            var newModelNumberSearch = new modelNumberSearch($(this));
        });
        /**
         * revealPanel class setup
         */
        $('[data-toggle="reveal"]').each(function () {
            var newRevealPanel = new revealPanel($(this));
        });
        /**
         * Login Navigation toggles
         */
        var hamburgerOverlay = $('<div></div>').addClass('hamburger-overlay').appendTo('#viewport');
        $('.trigger').add(hamburgerOverlay).bind('click', function (e) {
            e.preventDefault();
            $('body').toggleClass('loginNav-open');
        });
        $('#loginNavGetHelp').bind('click', function () {
            if (window.SPDUtils.isMobileBreakpoint() === true) {
                $('body').toggleClass('loginNav-open');
            }
        });
        /**
         * Cart Navigation toggles
         */
        var newCartNav = new cartNav();
        $('#cartShop [data-toggle]').bind('click', function (e) {
            if (window.SPDUtils.isMobileBreakpoint()){
                e.preventDefault();
                $('body').toggleClass('cartNav-open');
            }
            // else, follow link to cart page via postback
        });
        /**
         * Navigation hover
         */
        $('.cartNavItem').hover(function() {
            $(this).find('.dropdown-menu').stop(true, true).delay(100).fadeIn(200);
        }, function() {
            $(this).find('.dropdown-menu').stop(true, true).delay(100).fadeOut(200);
        });
        /**
         * customAccordionForms component setup
         */
        $('.customAccordionForms').each(function () {
            var newCustomAccordionForms = new customAccordionForms($(this));
        });
        /**
         * Input help text listeners
         */
        $('[data-inputhelp]').each(function () {
            // Perform initial check
            window.SPDUtils.checkInput($(this));
            // Bind events
            $(this).bind('blur', function () {
                window.SPDUtils.checkInput($(this));
            })
                .bind('focus', function () {
                    window.SPDUtils.checkInput($(this), true);
                })
                .bind('change', function () {
                    window.SPDUtils.checkInput($(this));
                });
        });
        /**
         * Link help text listeners
         */
        $('[data-texthelp]').each(function () {
            // Perform initial check
            window.SPDUtils.checkLink($(this));
        });
        /**
         * responsiveImage class setup
         */
        $('.responsiveImage div[data-desktopimage]').each(function () {
            var newResponsiveImage = new responsiveImage($(this));
        });
        /**
         * responsivePinchImage class setup
         */
        $('.responsivePinchImage').each(function () {
            var newResponsivePinchImage = new responsivePinchImage($(this));
        });
        /**
         * responsiveDropdown class setup
         */
        $('[data-toggle="responsive-dropdown"]').each(function () {
            var newResponsiveDropdown = new responsiveDropdown($(this));
        });
        /**
         * scrub values in select options to remove '.00'
         * for responsive filter dropdown
         */
        $('[data-toggle="responsive-filter-dropdown"] option').each(function () {
            var temp;
            if (this.innerHTML.indexOf('.00') != -1) {
                temp = this.innerHTML.slice(0, -3);
                this.innerHTML = temp;
                this.value = temp;
            }
        });
        /**
         * responsiveFilterDropdown class setup
         */
        $('[data-toggle="responsive-filter-dropdown"]').each(function (index) {

            var newResponsiveDropdown = new responsiveFilterDropdown($(this), index);

        });
        /**
         * airFilterPartDetails class setup
         */
        $('.airFilterPartDetails').each(function () {
            var newAFPD = new airFilterPartDetails($(this));
        });
        /**
         * video class setup
         */
        $('.video div[data-youtubeid]').each(function () {
            var newVideo = new video($(this));
        });
        /**
         * addToCart class setup
         */
        $('.addToCart_js').each(function () {
            var newAddToCart = new addToCart($(this), $('.addToCartQuantity_js', $(this).parent().parent()));
        });
        /**
         * guideNavigation class setup
         */
        $('.guideNavigation').each(function() {
            var newGuideNavigation = new guideNavigation($(this));
        });
        /**
         * collapse101 class setup
         * NOTE: collapse101 is based on Twitter Bootstrap's
         * collapse component with modifications to make it
         * behave responsively the way Sears UX wanted.
         */
        $('[data-toggle="collapse101"]').each(function () {
            var newCollapse101 = new Collapse101($(this));
        });
        /**
         * responsiveCollapse class setup
         */
        $('.responsiveFindThisPart').each(function () {
            var newresponsiveCollapse = new responsiveCollapse($(this), 'responsiveFindThisPart_js');
        });
        $('.category101').each(function () {
            var newresponsiveCollapse = new responsiveCollapse($(this), 'category101_js');
        });
        // commonParts class setup
        $('.commonParts').each(function() {
            var newCommonParts = new commonParts($(this));
        });
        // recommendedParts class setup
        $('.recommendedParts').each(function() {
            var newrecommendedParts = new recommendedParts($(this));
        });
        // desktop carousel initialization
        $('.carousel .desktopCarousel').each(function () {
            var carouselElement = $(this);

            shc.pd.base.render.WidgetBreakpointRegistry.add(new shc.pd.base.render.BreakpointConfig({
                min: 769,
                max: 100000,
                obj: new shc.pd.base.widgets.DesktopCarousel(carouselElement)
            }));
        });
        // touch carousel initialization
        $('.carousel .touchCarousel').each(function () {
            var carouselElement = $(this);

            shc.pd.base.render.WidgetBreakpointRegistry.add(new shc.pd.base.render.BreakpointConfig({
                min: 1,
                max: 768,
                obj: new shc.pd.base.widgets.TouchCarousel(carouselElement)
            }));
        });
        // touch relatedGuide initialization
        $('.relatedGuides .touchCarousel').each(function () {
            var carouselElement = $(this);

            shc.pd.base.render.WidgetBreakpointRegistry.add(new shc.pd.base.render.BreakpointConfig({
                min: 1,
                max: 650,
                obj: new shc.pd.base.widgets.TouchCarousel(carouselElement)
            }));
        });
        /*
         * Responsive table initializer
         */
        shc.pd.base.widgets.ResponsiveTable.init($('table.responsiveTable'));
        /*
         * Search panel finder widget
         */
        shc.pd.base.widgets.SearchPanelFinder.init($('.modelFinder'));
        /*
         * SVG icon compatibility fix for legacy browsers
         */
        if ($('html').hasClass('no-backgroundsize')) {
            $('[class^="svg-icon"]').each(function () {
                var newSVGIcon = new svgIcon($(this));
            });
        }
        /**
         * Cross-domain iframe fix
         */
        $('iframe[data-src]').each(function () {
            var isMobileBrowser = window.SPDUtils.isMobileBrowser(),
                windowWidth = $(window).width(),
                newSrc = $(this).data('src').replace('$1', isMobileBrowser.toString()).replace('$2', windowWidth.toString())
                    + window.SPDUtils.getLocationDetails().fullAddress;

            $(this).attr('src', newSrc);
        });
        // Mobile Ad Units
        $('.mobileAdUnit').each(function () {
            var mobileAdUnit = $(this);

            shc.pd.base.render.WidgetBreakpointRegistry.add(new shc.pd.base.render.BreakpointConfig({
                min: 0,
                max: 767,
                obj: new shc.pd.base.widgets.AdUnit(mobileAdUnit, 'mobileAdEnabled')
            }));
        });
        // Tablet Ad Units
        $('.tabletAdUnit').each(function () {
            var tabletAdUnit = $(this);

            shc.pd.base.render.WidgetBreakpointRegistry.add(new shc.pd.base.render.BreakpointConfig({
                min: 768,
                max: 1023,
                obj: new shc.pd.base.widgets.AdUnit(tabletAdUnit, 'tabletAdEnabled')
            }));
        });
        // Desktop Ad Units
        $('.desktopAdUnit').each(function () {
            var desktopAdUnit = $(this);

            shc.pd.base.render.WidgetBreakpointRegistry.add(new shc.pd.base.render.BreakpointConfig({
                min: 1024,
                max: 100000,
                obj: new shc.pd.base.widgets.AdUnit(desktopAdUnit, 'desktopAdEnabled')
            }));
        });
        // Initialise AddThis if needed
        if ($('.socialBar').length > 0) {
            window.SPDUtils.prepareAddThis();
        }
        // Side Chat Navigation
        $('.sideChatNavigation').each(function () {
            var newSideChatNavigation = new sideChatNavigation($(this));
        });

        /**
         *
         * NOTE:
         * Please update your the code in the bindEvents fn to
         * more specifically select the accordion(aka collapse) components
         * that are required in the mervRatingHelp update.
         *
         * As it stands, your code will now break the other accordions used
         * throughout the project. Thanks!
         *
         * (See recommendedParts.less for an example of how this works with less,
         * no js/jquery needed.
         *
         */

        //Merv Rating Help
        //var newMervRatingHelp = new mervRatingHelp($(this));
        /**
         * airFilterDimension class setup
         */

        var newFilterDim = new airFilterDimension();

        /**
         * (Air/Water) Filter Banners class setup
         */

        var filterBannerTemplate = $('#js_filterBannerTemplate').length;
        if (filterBannerTemplate === 1 ) {
            var newBanners = new banners();
        }

        /**
         * (PRC) Fix to hide the header-promo message and side-chat on PRC Landing Page
         */
        if ($('#partsRepairCenter').length > 0) {
            $(".headerPromo").addClass('hidden');
            $(".sideChatNavigation").addClass('hidden');
        }

    });
}(window));